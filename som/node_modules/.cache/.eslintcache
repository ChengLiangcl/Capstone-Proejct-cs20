[{"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\index.js":"1","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\reportWebVitals.js":"2","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\App.js":"3","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\MainComponent.js":"4","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DatabaseComponent.js":"5","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\LoginComponent.js":"6","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ForgetPasswordComponent.js":"7","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\VisualisationComponent.js":"8","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\configureStore.js":"9","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Signup.js":"10","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ModelComponent.js":"11","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\SidebarComponent.js":"12","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\MetadataForm.js":"13","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DetailedDatasetComponent.js":"14","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ConnectionUploading.js":"15","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DeleteOneDataset.js":"16","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\AlldatasetsComponent.js":"17","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\ActionCreators.js":"18","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\LoadingComponent.js":"19","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DatasetUploadComponent.js":"20","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\searchFileComponent.js":"21","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\allDatasetFiles.js":"22","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\datasetFiles.js":"23","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\detailedData.js":"24","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\metadata.js":"25","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\modelFiles.js":"26","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\login.js":"27","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\user.js":"28","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\connectionResult.js":"29","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ModelBriefInfo.js":"30","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\SearchModelComponent.js":"31","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DeleteOneModel.js":"32","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ModelUploadComponent.js":"33","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Modal\\DatasetUploading.js":"34","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Modal\\ConnectionUploading.js":"35","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Modal\\BindModel.js":"36","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Modal\\AskBindedDatasets.js":"37","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\others\\constants.js":"38","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\others\\compareProps.js":"39","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Modal\\BindedDatasets.js":"40","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Modal\\downloadFile.js":"41","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\metadataEmpty.js":"42","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Modal\\NeedUploading.js":"43","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\ActionTypes.js":"44","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\server\\baseUrl.js":"45","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\server\\backendUrl.js":"46","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\SearchAllDatasets.js":"47","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\AllModelsComponents.js":"48","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\SearchAllModels.js":"49","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\allModels.js":"50","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Umatrix\\VisualisationComponent.js":"51","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Umatrix\\Umatrix.js":"52","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Umatrix\\HexagonExpand.js":"53","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Umatrix\\HexagonVector.js":"54","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\somJS\\SOM.js":"55","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Modal\\AllBindedDataset.js":"56"},{"size":727,"mtime":1620784824696,"results":"57","hashOfConfig":"58"},{"size":375,"mtime":1620784824706,"results":"59","hashOfConfig":"58"},{"size":1178,"mtime":1620993022813,"results":"60","hashOfConfig":"58"},{"size":20899,"mtime":1621328457865,"results":"61","hashOfConfig":"58"},{"size":11782,"mtime":1621324100945,"results":"62","hashOfConfig":"58"},{"size":1603,"mtime":1620784824678,"results":"63","hashOfConfig":"58"},{"size":6483,"mtime":1620993022878,"results":"64","hashOfConfig":"58"},{"size":5098,"mtime":1621326671651,"results":"65","hashOfConfig":"58"},{"size":1182,"mtime":1621309175426,"results":"66","hashOfConfig":"58"},{"size":6044,"mtime":1620993022926,"results":"67","hashOfConfig":"58"},{"size":8296,"mtime":1621329488384,"results":"68","hashOfConfig":"58"},{"size":2808,"mtime":1621327022245,"results":"69","hashOfConfig":"58"},{"size":21994,"mtime":1620993022888,"results":"70","hashOfConfig":"58"},{"size":6232,"mtime":1621327855364,"results":"71","hashOfConfig":"58"},{"size":13943,"mtime":1621264259026,"results":"72","hashOfConfig":"58"},{"size":1825,"mtime":1620993022859,"results":"73","hashOfConfig":"58"},{"size":3775,"mtime":1621319049456,"results":"74","hashOfConfig":"58"},{"size":17369,"mtime":1621329183543,"results":"75","hashOfConfig":"58"},{"size":462,"mtime":1620784824678,"results":"76","hashOfConfig":"58"},{"size":7667,"mtime":1621264114868,"results":"77","hashOfConfig":"58"},{"size":1214,"mtime":1620784824690,"results":"78","hashOfConfig":"58"},{"size":730,"mtime":1621259763377,"results":"79","hashOfConfig":"58"},{"size":3051,"mtime":1621322316952,"results":"80","hashOfConfig":"58"},{"size":656,"mtime":1620784824703,"results":"81","hashOfConfig":"58"},{"size":698,"mtime":1620784824703,"results":"82","hashOfConfig":"58"},{"size":2793,"mtime":1621322315675,"results":"83","hashOfConfig":"58"},{"size":5392,"mtime":1620993022928,"results":"84","hashOfConfig":"58"},{"size":429,"mtime":1620784824706,"results":"85","hashOfConfig":"58"},{"size":2667,"mtime":1621325856087,"results":"86","hashOfConfig":"58"},{"size":2215,"mtime":1620993022915,"results":"87","hashOfConfig":"58"},{"size":1207,"mtime":1621306729980,"results":"88","hashOfConfig":"58"},{"size":1800,"mtime":1620784824676,"results":"89","hashOfConfig":"58"},{"size":2844,"mtime":1620784824686,"results":"90","hashOfConfig":"58"},{"size":1449,"mtime":1620993022913,"results":"91","hashOfConfig":"58"},{"size":1668,"mtime":1620993022904,"results":"92","hashOfConfig":"58"},{"size":2779,"mtime":1620993022895,"results":"93","hashOfConfig":"58"},{"size":1728,"mtime":1620784824681,"results":"94","hashOfConfig":"58"},{"size":118,"mtime":1620993022929,"results":"95","hashOfConfig":"58"},{"size":5864,"mtime":1620784824698,"results":"96","hashOfConfig":"58"},{"size":5677,"mtime":1621327212839,"results":"97","hashOfConfig":"58"},{"size":4823,"mtime":1621307425363,"results":"98","hashOfConfig":"58"},{"size":479,"mtime":1621267936772,"results":"99","hashOfConfig":"58"},{"size":1353,"mtime":1620784824684,"results":"100","hashOfConfig":"58"},{"size":2931,"mtime":1621325542001,"results":"101","hashOfConfig":"58"},{"size":160,"mtime":1620784824708,"results":"102","hashOfConfig":"58"},{"size":51,"mtime":1620784824708,"results":"103","hashOfConfig":"58"},{"size":1243,"mtime":1621307014696,"results":"104","hashOfConfig":"58"},{"size":2809,"mtime":1621330341837,"results":"105","hashOfConfig":"58"},{"size":1228,"mtime":1621308759098,"results":"106","hashOfConfig":"58"},{"size":454,"mtime":1621310062580,"results":"107","hashOfConfig":"58"},{"size":7766,"mtime":1621329241769,"results":"108","hashOfConfig":"58"},{"size":32167,"mtime":1621325003560,"results":"109","hashOfConfig":"58"},{"size":2913,"mtime":1621324963488,"results":"110","hashOfConfig":"58"},{"size":3154,"mtime":1621324981992,"results":"111","hashOfConfig":"58"},{"size":7648,"mtime":1621326128122,"results":"112","hashOfConfig":"58"},{"size":5742,"mtime":1621330255996,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"117"},"1ph6j2f",{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"117"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"117"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"117"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"117"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"117"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"117"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"117"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"117"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"117"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"117"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"117"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"117"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"117"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"117"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"117"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"117"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"117"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"117"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"117"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"117"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"117"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"117"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"117"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"117"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"117"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"117"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"238","messages":"239","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"117"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"245","messages":"246","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"117"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"117"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"117"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\index.js",["258"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Popup from 'react-popup';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'fontsource-roboto';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'font-awesome/css/font-awesome.css';\r\nimport \"@pathofdev/react-tag-input/build/index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["259","260"],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\reportWebVitals.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\App.js",["261","262","263","264","265","266"],"import './App.css';\r\nimport React, {Component} from 'react';\r\nimport {BrowserRouter, Route, Switch, Redirect} from 'react-router-dom';\r\nimport Main from './components/MainComponent';\r\n\r\nimport {Provider} from 'react-redux';\r\nimport {ConfigureStore} from './redux/configureStore';\r\nimport Database from \"./components/DatabaseComponent\";\r\nimport SOMModel from \"./components/ModelComponent\";\r\nimport Visualisation from \"./components/VisualisationComponent\";\r\nimport Login from \"./components/LoginComponent\";\r\nimport Signup from \"./components/Signup\";\r\nimport {Col} from \"reactstrap\";\r\nimport ForgetPasswordComponent from \"./components/ForgetPasswordComponent\";\r\n\r\nconst store = ConfigureStore();\r\n\r\nclass App extends Component{\r\n  \r\n  render(){\r\n    return (\r\n      <Provider store={store}>\r\n        <BrowserRouter>\r\n        <Switch>\r\n            <Route path=\"/password\" component={ForgetPasswordComponent}/>\r\n            <Route path=\"/login\" component={Login}/>\r\n            <Route path=\"/\" component={()=><div className=\"APP\">\r\n              <Main/>\r\n            </div>}/>\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\MainComponent.js",["267","268","269","270","271","272","273","274","275","276","277","278","279"],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DatabaseComponent.js",["280","281","282","283","284","285","286","287"],"import React, { Component } from 'react';\r\nimport { Card, CardBody } from 'reactstrap';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { Table } from 'reactstrap';\r\nimport { IconButton, Modal, TableRow } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport ModelBinding from './Modal/BindModel';\r\nimport TableChartIcon from '@material-ui/icons/TableChart';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport DatasetUpload from './DatasetUploadComponent';\r\nimport DatasetUploading from './Modal/DatasetUploading';\r\nimport DeleteOneDataset from './DeleteOneDataset';\r\nimport DownloadFile from '../components/Modal/downloadFile';\r\nimport { Loading } from './LoadingComponent';\r\nimport MetadataForm from './MetadataForm';\r\nimport SearchFile from './searchFileComponent';\r\nimport SearchAllDatasets from './SearchAllDatasets';\r\n\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { purple } from '@material-ui/core/colors';\r\n\r\nconst AllDatasetSwitch = withStyles({\r\n    switchBase: {\r\n      color: '#FFF1CC',\r\n      '&$checked': {\r\n        color: '#FFD466',\r\n      },\r\n      '&$checked + $track': {\r\n        backgroundColor: '#FFD466',\r\n      },\r\n    },\r\n    checked: {},\r\n    track: {},\r\n  })(Switch);\r\n\r\nclass Database extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isShown: false,\r\n            checkAllDatasets: false\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState(state => ({ ...state, [event.target.name]: event.target.checked }));\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.isQuery) {\r\n            this.props.fetchDatasetFiles(sessionStorage.getItem('verifiedUsername'));\r\n        } \r\n    }\r\n\r\n    // to create a flexible table head, where the number of columns depends on the attributes in the datafile.\r\n    // dataset: array. JSON data stored inside.\r\n    tableHead(datasets) {\r\n        if (datasets !== undefined) {\r\n            return (\r\n                <thead>\r\n                    <tr>\r\n                        <th width=\"10%\">File name</th>\r\n                        <th width=\"18%\">Description</th>\r\n                        <th width=\"8%\">Size</th>\r\n                        <th width=\"14%\">Operation</th>\r\n                    </tr>\r\n                </thead>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>The table for storing uploaded datasets does not exist</div>\r\n        );\r\n    }\r\n\r\n    //TODO: may change if the design of the database is changed\r\n    tableBody(datasets) {\r\n        // when there is no uploaded dataset in the database\r\n        console.log(`dataset length: ${datasets.length}, dataset is ${datasets}`)\r\n        if (datasets.length === 0) {\r\n            return (\r\n                <tbody />\r\n            );\r\n        }\r\n        else { // where are dataset stored in the database\r\n            return (\r\n                <tbody>\r\n                    {datasets.map((eachDataset, index) =>\r\n                        <tr key={index}>\r\n                            <td key={'dataset name'}>{eachDataset.FileName}</td>\r\n                            <td key={'dataset briefInfo'}>{eachDataset.BriefInfo}</td>\r\n                            <td key={'dataset size'}>{eachDataset.Size}</td>\r\n                            <td key={\"operateEachDataset\"}>{this.operateDataset(true, eachDataset.FileName, eachDataset.ModelName, eachDataset.UserName)}</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    //showOperate: bool. the delete button and the create button will be disable\r\n    operateDataset(showOperate, fileName, bindModelName, userName) {\r\n        console.log(\"dataset comp: \", userName);\r\n        if (showOperate) {\r\n            return (\r\n                <Container>\r\n                    <Row>\r\n                        <DeleteOneDataset deleteDataset={this.props.deleteDataset}\r\n                            deletedFileName={fileName} />\r\n\r\n                        <Link to={`/metadata-form/${fileName}`}>\r\n                            <IconButton aria-label=\"create matadata\" component=\"span\">\r\n                                <CreateIcon/>\r\n                            </IconButton>\r\n                        </Link>\r\n\r\n                        <ModelBinding modelFiles={this.props.modelFiles} datasetName={fileName}\r\n                            bindModel={this.props.bindModel} bindedModelName={bindModelName}/>\r\n                        \r\n                        <DownloadFile downloadFile={this.props.downloadFile} datasetName={fileName} userName={userName}/>\r\n                    </Row>\r\n                </Container>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Container>\r\n                    <Row>\r\n                        <Link to={`/alldataset/${fileName}?userName=${userName}&fileName=${fileName}`}>\r\n                            <IconButton aria-label=\"detailed data\" component=\"span\">\r\n                                <TableChartIcon />\r\n                            </IconButton>\r\n                        </Link>\r\n\r\n                        <DownloadFile downloadFile={this.props.downloadFile} datasetName={fileName} userName={userName} />\r\n                    </Row>\r\n                </Container>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderDatasetTable(datasets, isLoading, errMess, isQuery) {\r\n        if (isLoading) {\r\n            return (\r\n                <Loading />\r\n            );\r\n        }\r\n        else if (errMess) {\r\n            return (\r\n                <h4>{errMess}</h4>\r\n            );\r\n        }\r\n        else if (isQuery) {\r\n            return (\r\n                <div>\r\n                    <Table hover style={{ tableLayout: 'fixed', wordWrap: 'break-word' }}>\r\n                        {this.tableHead(datasets)}\r\n                        {this.tableBody(datasets)}\r\n                    </Table>\r\n                    <p style={{ color: '#378CC6', fontSize: '12px' }}>Query result: {datasets.length} datasets are found</p>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Table hover style={{ tableLayout: 'fixed', wordWrap: 'break-word' }}>\r\n                    {this.tableHead(datasets)}\r\n                    {this.tableBody(datasets)}\r\n                </Table>\r\n            );\r\n        }\r\n    }\r\n\r\n    allTableHead(datasets) {\r\n        if (datasets !== undefined) {\r\n            return (\r\n                <thead style={{ backgroundColor: '#FFE399', color: \"black\" }}>\r\n                    <tr>\r\n                        <th width=\"12%\">File name</th>\r\n                        <th width=\"20%\">Description</th>\r\n                        <th width=\"12%\">User name</th>\r\n                        <th width=\"8%\">Operation</th>\r\n                    </tr>\r\n                </thead>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>The table for storing uploaded datasets does not exist</div>\r\n        );\r\n    }\r\n\r\n    allTableBody(datasets) {\r\n        // when there is no uploaded dataset in the database\r\n        if (datasets.length === 0) {\r\n            return (\r\n                <tbody />\r\n            );\r\n        }\r\n        else { // where are dataset stored in the database\r\n            return (\r\n                <tbody>\r\n                    {datasets.map((eachDataset, index) =>\r\n                        <tr key={index}>\r\n                            <td key={'name'}>{eachDataset.FileName}</td>\r\n                            <td key={'Description'}>{eachDataset.Description}</td>\r\n                            <td key={'Username'}>{eachDataset.UserName}</td>\r\n                            <td key={\"operateEachDataset\"}>{this.operateDataset(false, eachDataset.FileName, \" \", eachDataset.UserName)}</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    renderAllDatasetTable(datasets, isLoading, errMess, isQuery) {\r\n        if (isLoading) {\r\n            return (\r\n                <Loading />\r\n            );\r\n        }\r\n        else if (errMess) {\r\n            return (\r\n                <h4>{errMess}</h4>\r\n            );\r\n        }\r\n        else if (isQuery) {\r\n            return (\r\n                <div>\r\n                    <Table hover style={{ tableLayout: 'fixed', wordWrap: 'break-word' }}>\r\n                        {this.allTableHead(datasets)}\r\n                        {this.allTableBody(datasets)}\r\n                    </Table>\r\n                    <p style={{ color: '#378CC6', fontSize: '12px' }}>Query result: {datasets.length} datasets are found</p>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Table hover style={{ tableLayout: 'fixed', wordWrap: 'break-word' }}>\r\n                    {this.allTableHead(datasets)}\r\n                    {this.allTableBody(datasets)}\r\n                </Table>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(\"switch state: \", this.state.checkAllDatasets)\r\n        if (this.state.checkAllDatasets){\r\n            return (\r\n                <Container>\r\n                  <Col className=\"search-box\" >\r\n                    <SearchAllDatasets queryDatasets={this.props.queryDatasets}/>\r\n                  </Col>\r\n\r\n                  <Col>\r\n                    <Row>\r\n                        <Col md=\"9\">\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                            <FormGroup>\r\n                                <FormControlLabel\r\n                                    control={<AllDatasetSwitch checked={this.state.checkAllDatasets} onChange={this.handleChange} color=\"primary\" name=\"checkAllDatasets\" />}\r\n                                    label=\"All datasets\"\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n          \r\n                  <Col className=\"database\">\r\n                    {this.renderAllDatasetTable(this.props.allDatasetFiles, this.props.isAllLoading, this.props.allErrMess)}\r\n                  </Col>\r\n                </Container>\r\n              );\r\n        }\r\n        return (\r\n            <Container>\r\n                <Col className=\"search-box\" >\r\n                    <SearchFile queryDatasets={this.props.queryDatasets} />\r\n                </Col>\r\n\r\n                <Col>\r\n                    <Row>\r\n                        <Col md=\"9\">\r\n                            <DatasetUploading uploadDataset={this.props.uploadDataset} fetchDatasetFiles={this.props.fetchDatasetFiles} />\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                            <FormGroup>\r\n                                <FormControlLabel\r\n                                    control={<AllDatasetSwitch checked={this.state.checkAllDatasets} onChange={this.handleChange} color=\"warning\" name=\"checkAllDatasets\" />}\r\n                                    label=\"All datasets\"\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n\r\n                <Col className=\"database\">\r\n                    {this.renderDatasetTable(this.props.datasetFiles, this.props.isLoading, this.props.errMess, this.props.isQuery)}\r\n                </Col>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Database;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\LoginComponent.js",["288"],"import React, {useEffect, useState} from \"react\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Signup from \"./Signup\";\r\nimport Login from './login'\r\n\r\nconst paperStyle = {width: 340, margin: \"20px auto\",textAlign:'center',boxSizing:'content-box'}\r\nconst SignInOutContainer = () => {\r\n  const [value, setValue] = useState(0);\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  function TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`simple-tabpanel-${index}`}\r\n        aria-labelledby={`simple-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box>\r\n            <Typography>{children}</Typography>\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  return (\r\n\r\n    <Paper style={paperStyle}>\r\n      <Tabs\r\n        value={value}\r\n        indicatorColor=\"primary\"\r\n        textColor=\"primary\"\r\n        onChange={handleChange}\r\n        aria-label=\"disabled tabs example\">\r\n        <Tab label=\"Sign In\"/>\r\n        <Tab label=\"Sign Up\"/>\r\n      </Tabs>\r\n      <TabPanel value={value} index={0}>\r\n        <Login handleChange={handleChange}/>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <Signup/>\r\n      </TabPanel>\r\n\r\n    </Paper>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default SignInOutContainer;\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ForgetPasswordComponent.js",["289","290"],"import React, {useState} from 'react';\r\n\r\nimport {Grid, Paper, Typography} from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Formik, Field, Form, ErrorMessage} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {questions} from '../others/constants'\r\n\r\nimport {\r\n  passwordChange\r\n} from '../redux/ActionCreators';\r\nimport {connect} from \"react-redux\";\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {Col, Modal, ModalBody, ModalHeader, Row} from \"reactstrap\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.user,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  passwordChange: (data,cb) => {\r\n    dispatch(passwordChange(data,cb))\r\n  },\r\n});\r\n\r\nconst ForgetPassword = ({handleChange, ...props}) => {\r\n  const paperStyle = {width: 340,textAlign:'center', padding: 20, height: '70vh auto', margin: \"10vh auto 0\"}\r\n  let myStyle = {\r\n    color: '#6495ED',\r\n    fontSize: '48px',\r\n    fontWeight: 'bold',\r\n    fontStyle: 'italic'\r\n  }\r\n\r\n  let username = {\r\n    margin: '30px'\r\n  }\r\n  let button = {\r\n    margin: '30px',\r\n    fontSize: '24px',\r\n  }\r\n  const initialValues = {\r\n    username: '',\r\n    password: '',\r\n    confirmpassword: '',\r\n    email: '',\r\n    question: questions[0],\r\n    answer: '',\r\n  }\r\n  const validationSchema = Yup.object().shape({\r\n    username: Yup.string().required(\"*Required!\"),\r\n    password: Yup.string().min(8, \"The password length should be at least 8 digits \").required(\"*Required!\"),\r\n    confirmpassword: Yup.string().oneOf([Yup.ref('password')], \"Password not matched\").required(\"*Required!\"),\r\n    question: Yup.string().required(\"*Required!\"),\r\n    answer: Yup.string().required(\"*Required!\"),\r\n  })\r\n\r\n  const [isModalOpen, setModal] = useState(false);\r\n  const [modalContent, setModalContent] = useState('');\r\n\r\n  const handlenNoBtn = () => {\r\n    setModal(!isModalOpen);\r\n  };\r\n  const onSubmit = (values) => {\r\n    console.log(values);\r\n    props.passwordChange(values,(res)=>{\r\n      console.log(res);\r\n      setModalContent(res.toString())\r\n      setModal(true)\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Grid>\r\n      <Paper elevation={10} style={paperStyle}>\r\n        <div style={myStyle}> SOM</div>\r\n        <h3>reset password</h3>\r\n        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n          {(props) => (\r\n            <Form>\r\n              <div>\r\n                <div style={username}>\r\n                  <Field as={TextField}\r\n                         id=\"outlined-search\"\r\n                         label=\"username\"\r\n                         name=\"username\"\r\n                         type=\"search\"\r\n                         helperText={\r\n                           <ErrorMessage name=\"username\">\r\n                           {msg => <div style={{color: 'red'}}>{msg}</div>}\r\n                           </ErrorMessage>\r\n                         }\r\n                         variant=\"outlined\"/>\r\n                </div>\r\n\r\n                <div>\r\n                  <Field as={TextField}\r\n                         id=\"outlined-password-input\"\r\n                         label=\"Password\"\r\n                         name=\"password\"\r\n                         type=\"password\"\r\n                         autoComplete=\"current-password\"\r\n                         helperText={\r\n                           <ErrorMessage name=\"password\">\r\n                           {msg => <div style={{color: 'red'}}>{msg}</div>}\r\n                           </ErrorMessage>\r\n                         }\r\n                         variant=\"outlined\"/>\r\n                </div>\r\n                <div style={username}>\r\n                  <Field as={TextField}\r\n                         id=\"outlined-confirmpassword-input\"\r\n                         name=\"confirmpassword\"\r\n                         label=\"confirm password\"\r\n                         type=\"password\"\r\n                         autoComplete=\"current-password\"\r\n                         helperText={\r\n                           <ErrorMessage name=\"confirmpassword\">\r\n                             {msg => <div style={{color: 'red'}}>{msg}</div>}\r\n                           </ErrorMessage>\r\n                         }\r\n                         variant=\"outlined\"/>\r\n                </div>\r\n\r\n                <div style={username}>\r\n                  <Field as={(props)=><Select style={{width:195}} {...props}>\r\n                    {questions.map(item=> <MenuItem value={item}>{item}</MenuItem>)}\r\n                  </Select>}\r\n                         name=\"question\"\r\n                         label=\"question\"\r\n                         helperText={\r\n                           <ErrorMessage name=\"question\">\r\n                             {msg => <div style={{color: 'red'}}>{msg}</div>}\r\n                           </ErrorMessage>\r\n                         }\r\n                         variant=\"outlined\"/>\r\n                </div>\r\n                <div style={username}>\r\n                  <Field as={TextField}\r\n                         id=\"outlined-answer-input\"\r\n                         name=\"answer\"\r\n                         label=\"answer\"\r\n                         helperText={\r\n                           <ErrorMessage name=\"answer\">\r\n                             {msg => <div style={{color: 'red'}}>{msg}</div>}\r\n                           </ErrorMessage>\r\n                         }\r\n                         variant=\"outlined\"/>\r\n                </div>\r\n              </div>\r\n              <div style={button}>\r\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\r\n                  Submit\r\n                </Button>\r\n                <Link to={'/login'}> <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\r\n                  Back to login\r\n                </Button></Link>\r\n              </div>\r\n            </Form>\r\n          )}\r\n\r\n\r\n\r\n        </Formik>\r\n        <Modal isOpen={isModalOpen} centered={true}>\r\n          <ModalBody>\r\n            <p>{modalContent}</p>\r\n            <Row>\r\n              <Col>\r\n                <Button onClick={handlenNoBtn}>Ok</Button>\r\n              </Col>\r\n            </Row>\r\n          </ModalBody>\r\n      </Modal>\r\n      </Paper>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ForgetPassword));\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\VisualisationComponent.js",["291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310"],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\configureStore.js",["311"],"import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport { createForms } from 'react-redux-form';\r\nimport { DatasetFiles } from './datasetFiles';\r\nimport { ModelFiles } from './modelFiles';\r\nimport { DetailedData } from './detailedData';\r\nimport { AllDatasetFiles } from './allDatasetFiles';\r\nimport { Metadata } from './metadata';\r\nimport { User } from './user';\r\nimport { ConnectionFiles } from './connectionResult';\r\nimport { AllModelFiles } from './allModels';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        combineReducers({\r\n            user: User,\r\n            datasetFiles: DatasetFiles,\r\n            modelFiles: ModelFiles,\r\n            detailedData: DetailedData,\r\n            metadata: Metadata,\r\n            allDatasetFiles: AllDatasetFiles,\r\n            allModels: AllModelFiles,\r\n            connectionFiles: ConnectionFiles\r\n        }),\r\n        // applyMiddleware can return store enhancer\r\n        // after this, thunk and logger are available within the application\r\n        applyMiddleware(thunk, logger)\r\n    );\r\n\r\n    return store;\r\n}\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Signup.js",["312","313","314","315","316"],"import React, {useState} from 'react'\r\nimport {Grid, Paper, Avatar, Typography} from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\nimport Button from '@material-ui/core/Button';\r\nimport Link from '@material-ui/core/Link';\r\nimport {Formik, Field, Form, ErrorMessage} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {questions} from '../others/constants'\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\n\r\nimport {\r\n  signUp, updateUser\r\n} from '../redux/ActionCreators';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {Col, Modal, ModalBody, ModalHeader, Row} from \"reactstrap\";\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  signUp: (data, cb) => {\r\n    dispatch(signUp(data, cb))\r\n  },\r\n});\r\n\r\nconst Signup = (props) => {\r\n  const paperStyle = {padding: 20, height: '90vh auto', margin: \"20px auto\"}\r\n  let myStyle = {\r\n    color: '#6495ED',\r\n    fontSize: '48px',\r\n    fontWeight: 'bold',\r\n    fontStyle: 'italic'\r\n  }\r\n  let username = {\r\n    margin: '10px',\r\n  }\r\n  let password = {\r\n    margin: '10px'\r\n  }\r\n  let confirmpassword = {\r\n    margin: '10px'\r\n  }\r\n  let button = {\r\n    margin: '20px',\r\n    fontSize: '24px',\r\n  }\r\n  const initialValues = {\r\n    password: '',\r\n    confirmpassword: '',\r\n    email: '',\r\n    question: questions[0],\r\n    answer: '',\r\n  }\r\n  const validationSchema = Yup.object().shape({\r\n    email: Yup.string().required(\"*Required!\"),\r\n    password: Yup.string().min(8, \"The password length should be at least 8 digits \").required(\"*Required!\"),\r\n    confirmpassword: Yup.string().oneOf([Yup.ref('password')], \"Password not matched\").required(\"*Required!\"),\r\n    question: Yup.string().required(\"*Required!\"),\r\n    answer: Yup.string().required(\"*Required!\"),\r\n  })\r\n\r\n  const [isModalOpen, setModal] = useState(false);\r\n  const [modalContent, setModalContent] = useState('');\r\n\r\n  const handlenNoBtn = () => {\r\n    setModal(!isModalOpen);\r\n  };\r\n\r\n\r\n  const onSubmit = (values) => {\r\n    console.log(values)\r\n    props.signUp(values, res => {\r\n      setModal(true)\r\n      console.log(res);\r\n      setModalContent(res.toString())\r\n    })\r\n  }\r\n  return (\r\n\r\n    <Paper elevation={10} style={paperStyle}>\r\n      <Grid>\r\n        <div style={myStyle}> SOM</div>\r\n        <h3>Sign Up</h3>\r\n        <Typography variant='caption'>Please register your own account</Typography>\r\n      </Grid>\r\n\r\n      <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n        {(props) => (\r\n          <Form>\r\n            <Field as={TextField}\r\n                   id=\"outlined-email-input\"\r\n                   name=\"email\"\r\n                   label=\"username\"\r\n                   type=\"search\"\r\n                   autoComplete=\"current-password\"\r\n                   helperText={\r\n                     <ErrorMessage name=\"email\">\r\n                       {msg => <div style={{color: 'red'}}>{msg}</div>}\r\n                     </ErrorMessage>\r\n                   }\r\n                   variant=\"outlined\"/>\r\n\r\n            <div style={password}>\r\n              <Field as={TextField}\r\n                     id=\"outlined-password-input\"\r\n                     name=\"password\"\r\n                     label=\"password\"\r\n                     type=\"password\"\r\n                     autoComplete=\"current-password\"\r\n                     helperText={\r\n                       <ErrorMessage name=\"password\">\r\n                         {msg => <div style={{color: 'red'}}>{msg}</div>}\r\n                       </ErrorMessage>\r\n                     }\r\n                     variant=\"outlined\"/>\r\n            </div>\r\n            <div style={confirmpassword}>\r\n              <Field as={TextField}\r\n                     id=\"outlined-confirmpassword-input\"\r\n                     name=\"confirmpassword\"\r\n                     label=\"confirm password\"\r\n                     type=\"password\"\r\n                     autoComplete=\"current-password\"\r\n                     helperText={\r\n                       <ErrorMessage name=\"confirmpassword\">\r\n                         {msg => <div style={{color: 'red'}}>{msg}</div>}\r\n                       </ErrorMessage>\r\n                     }\r\n                     variant=\"outlined\"/>\r\n            </div>\r\n\r\n            <div style={username}>\r\n              <Field as={(props)=><Select style={{width:195}} {...props}>\r\n                {questions.map(item=> <MenuItem value={item}>{item}</MenuItem>)}\r\n              </Select>}\r\n                     name=\"question\"\r\n                     label=\"question\"\r\n                     helperText={\r\n                       <ErrorMessage name=\"question\">\r\n                         {msg => <div style={{color: 'red'}}>{msg}</div>}\r\n                       </ErrorMessage>\r\n                     }\r\n                     variant=\"outlined\"/>\r\n            </div>\r\n            <div style={username}>\r\n              <Field as={TextField}\r\n                     id=\"outlined-answer-input\"\r\n                     name=\"answer\"\r\n                     label=\"answer\"\r\n                     helperText={\r\n                       <ErrorMessage name=\"answer\">\r\n                         {msg => <div style={{color: 'red'}}>{msg}</div>}\r\n                       </ErrorMessage>\r\n                     }\r\n                     variant=\"outlined\"/>\r\n            </div>\r\n            <div style={button}>\r\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\r\n                Sign Up\r\n              </Button>\r\n            </div>\r\n\r\n          </Form>\r\n        )}\r\n\r\n\r\n      </Formik>\r\n      <Modal isOpen={isModalOpen} centered={true}>\r\n        <ModalBody>\r\n          <p>{modalContent}</p>\r\n          <Row>\r\n            <Col>\r\n              <Button onClick={handlenNoBtn}>Ok</Button>\r\n            </Col>\r\n          </Row>\r\n        </ModalBody>\r\n      </Modal>\r\n    </Paper>\r\n\r\n\r\n  )\r\n}\r\nexport default withRouter(connect(null, mapDispatchToProps)(Signup));\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ModelComponent.js",["317","318","319","320","321","322","323","324","325","326","327"],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\SidebarComponent.js",["328","329","330","331","332","333"],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\MetadataForm.js",["334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352"],"import React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\r\nimport { Button, Row, Col, Label, Container } from 'reactstrap';\r\nimport { Control, LocalForm, Form, Errors, actions } from 'react-redux-form';\r\nimport { Table } from 'reactstrap';\r\nimport { Loading } from './LoadingComponent';\r\nimport ReactTagInput from \"@pathofdev/react-tag-input\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Drawer, IconButton, Modal } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport \"@pathofdev/react-tag-input/build/index.css\";\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport TableChartIcon from '@material-ui/icons/TableChart';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport DetailedDataset from './DetailedDatasetComponent';\r\n\r\nconst drawerWidth = '40%';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        overflow: 'auto'\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n        overflow: 'auto'\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-start',\r\n    },\r\n}));\r\n\r\nfunction MetadataForm(props) {\r\n\r\n    const FileName = localStorage.getItem('datasetname-metadata');\r\n    console.log(\"local get file name: \", FileName);\r\n\r\n    const BriefInfo = props.metadata.BriefInfo !== \"\" ? props.metadata.BriefInfo : \"Please input a brief description for the dataset\";\r\n    const Description = props.metadata.Description !== \"\" ? props.metadata.Description : \"Please input a detailed description for the dataset\";\r\n    const Source = props.metadata.Source !== \"\" ? props.metadata.Source : \"Please input the source\";\r\n    const Keywords = props.metadata.Keywords.length !== 0 ? String(props.metadata.Keywords) : \"Type and press Enter\";\r\n    const AttrLen = props.metadata.AttrInfo.length !== 0 ? props.metadata.AttrInfo.length : attr;\r\n    const AttrInfo = props.metadata.AttrInfo.map(eachAttr => eachAttr);\r\n    console.log(\"Attr Info check\", AttrInfo);\r\n\r\n    const [tags, setTags] = useState([]);\r\n    const [attr, setAttr] = useState(AttrLen);\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    const handleSubmit = (values) => {\r\n        const attrInfo = integrateAttrInfo(attr, values);\r\n        const fixedValue = fixEmptyForm(values, tags, attrInfo);\r\n        console.log('Current State is: ' + JSON.stringify(fixedValue));\r\n\r\n        // 'props.submitMetadata' is from Redux actionCreators, which is used to post the metadata to the backend server\r\n        props.submitMetadata(fixedValue);\r\n        //alert(`Current State is:  ${JSON.stringify(fixedValue)}`);\r\n        alert(`Submit successfully!`);\r\n        //props.resetMetadata();\r\n        //props.fetchDatasetFiles();\r\n    };\r\n\r\n    const TagInputs = (tags) => {\r\n        const { model, dispatch } = props;\r\n        return <ReactTagInput tags={tags} onChange={(newTags) => setTags(newTags)} onCustomChange={e => dispatch(actions.change(model, e))} />\r\n    };\r\n\r\n    const handleAddClick = () => {\r\n        setAttr(attr + 1);\r\n    };\r\n\r\n    const handleRemoveClick = () => {\r\n        if (attr > 1) {\r\n            setAttr(attr - 1);\r\n        } else {\r\n            setAttr(1);\r\n        }\r\n    };\r\n\r\n    const AttrRow = (attrNum, showButtons) => {\r\n\r\n        const AttrName = AttrInfo[attrNum - 1] == undefined || AttrInfo[attrNum - 1].attrName === \"\" ? \"attribute name\" : AttrInfo[attrNum - 1].attrName;\r\n        const AttrDescription = AttrInfo[attrNum - 1] == undefined || AttrInfo[attrNum - 1].attrDescription === \"\" ? \"attribute description\" : AttrInfo[attrNum - 1].attrDescription;\r\n\r\n\r\n        if (showButtons) {\r\n            return (\r\n                <Row>\r\n                    <Label md={2} className=\"attribute\" htmlFor=\"attrInfo\">{`Attribute${attrNum}: `}</Label>\r\n                    <Label className=\"attribute\" htmlFor=\"attrName\"></Label>\r\n                    <Col className=\"align-item-center\">\r\n                        <Control.text md={1} model={`.attrName${attrNum}`} id={`.attrName${attrNum}`} name=\"attrName\" placeholder={AttrName} className=\"form-control\" />\r\n                    </Col>\r\n\r\n                    <Label className=\"attribute\" htmlFor=\"attrDescription\"></Label>\r\n                    <Col className=\"align-item-center\">\r\n                        <Control.text md={1} model={`.attrDescription${attrNum}`} id={`.attrDescription${attrNum}`} name=\"attrInfo\" placeholder={AttrDescription} className=\"form-control\" />\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <Row>\r\n                            <IconButton onClick={handleAddClick} aria-label=\"add an attribute\" component=\"span\">\r\n                                <AddIcon />\r\n                            </IconButton>\r\n                            <IconButton onClick={handleRemoveClick} aria-label=\"remove an attribute\" component=\"span\">\r\n                                <RemoveIcon />\r\n                            </IconButton>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Row>\r\n                    <Label md={2} className=\"attribute\" htmlFor=\"attrInfo\">{`Attribute${attrNum}: `}</Label>\r\n                    <Label className=\"attribute\" htmlFor=\"attrName\"></Label>\r\n                    <Col className=\"align-item-center\">\r\n                        <Control.text md={1} model={`.attrName${attrNum}`} id={`.attrName${attrNum}`} name=\"attrName\" placeholder={AttrName} className=\"form-control\" />\r\n                    </Col>\r\n\r\n                    <Label className=\"attribute\" htmlFor=\"attrDescription\"></Label>\r\n                    <Col className=\"align-item-center\">\r\n                        <Control.text md={1} model={`.attrDescription${attrNum}`} id={`.attrDescription${attrNum}`} name=\"attrInfo\" placeholder={AttrDescription} className=\"form-control\" />\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <Row>\r\n                            <IconButton className=\"nodisplay\" aria-label=\"add an attribute\" component=\"span\">\r\n                                <AddIcon />\r\n                            </IconButton>\r\n                            <IconButton className=\"nodisplay\" aria-label=\"remove an attribute\" component=\"span\">\r\n                                <RemoveIcon />\r\n                            </IconButton>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            );\r\n        }\r\n\r\n    };\r\n\r\n    const AttrForm = (num) => {\r\n        let arr = [];\r\n        let attrArray = [];\r\n        for (let i = 0; i < num; i++) {\r\n            arr.push(AttrRow(i + 1, false));\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    // this function is for integrate all attribution infos into an array\r\n    // so that it can be send into the backend server as a whole\r\n    const integrateAttrInfo = (attrNum, values) => {\r\n        let attrInfo = [];\r\n\r\n        for (let i = 0; i < attrNum; i++) {\r\n            let attrIndex = `Attribute${i + 1}`;\r\n\r\n            attrIndex = {\r\n                // to identify if the attrName exists in the values (meaning if a user input words into it)\r\n                // if not, then adding \"\" to attrName; if the user inputted, then keep the inputted value\r\n                attrName: values[`attrName${i + 1}`] == null ? AttrInfo[i].attrName : values[`attrName${i + 1}`],\r\n                attrDescription: values[`attrDescription${i + 1}`] == null ? AttrInfo[i].attrDescription : values[`attrDescription${i + 1}`]\r\n            };\r\n\r\n            attrInfo.push(attrIndex);\r\n        }\r\n        return attrInfo;\r\n    };\r\n\r\n    // this function is to fill up \"\" while a user input nothing in a form filed.\r\n    const fixEmptyForm = (values, tags, attrInfo) => {\r\n        let inputForm = [\"FileName\", \"UserName\", \"BriefInfo\", \"Description\", \"Source\", \"Keywords\", \"AttrInfo\"]\r\n        let fixedForm = [];\r\n        let fixedValue = {};\r\n        console.log(\"attr len: \", attrInfo.length);\r\n        console.log(\"attr info: \", attrInfo);\r\n\r\n        const compareAttr = (attrInfo) => {\r\n            const result = attrInfo.map((eachAttr, index) => {\r\n                return eachAttr[\"attrName\"] === \"\" && eachAttr[\"attrDescription\"] === \"\" ? \"null\" : \"not-null\"\r\n            })\r\n            console.log(\"attr compare: \", result);\r\n            return result.includes(\"not-null\");\r\n        }\r\n\r\n        for (let eachForm of inputForm) {\r\n            switch (eachForm) {\r\n                case \"FileName\":\r\n                    fixedValue[eachForm] = props.dataset.FileName;\r\n                    break;\r\n                case \"UserName\":\r\n                    fixedValue[eachForm] = props.dataset.UserName;\r\n                    break;\r\n                case \"Keywords\":\r\n                    fixedValue[eachForm] = tags.length === 0 ? props.metadata.Keywords : tags\r\n                    break;\r\n                case \"AttrInfo\":\r\n                    fixedValue[eachForm] = compareAttr(attrInfo) ? attrInfo : props.metadata.AttrInfo;\r\n                    console.log(\"fixed Attr: \", fixedValue[eachForm]);\r\n                    break;\r\n                /**\r\n                case \"Label\":\r\n                    fixedValue[eachForm] = values[eachForm] == null ? \"Unknown\" : values[eachForm];\r\n                    break;\r\n                 */\r\n                default:\r\n                    fixedValue[eachForm] = values[eachForm] == null ? props.metadata[eachForm] : values[eachForm];\r\n            }\r\n        }\r\n        fixedForm.push(fixedValue);\r\n\r\n        return fixedForm;\r\n    };\r\n\r\n    useEffect(() => {\r\n        // fetch the existing metadata first\r\n        console.log(\"start refreshing metadata form\")\r\n        props.sendNameForDetailedData(FileName, sessionStorage.getItem('verifiedUsername'));\r\n    });\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <AppBar style={{ backgroundColor: \"#378CC6\" }} position=\"relative\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" noWrap className=\"title col-md-11\">\r\n                            Data Description - {FileName}\r\n                        </Typography>\r\n                        <IconButton aria-label=\"open drawer\" edge=\"end\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(open && classes.hide)}>\r\n                            <TableChartIcon style={{ color: \"white\" }} />\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </Row>\r\n\r\n            <Row style={{ paddingTop: \"5%\" }}>\r\n                <Col className=\"metadata-info\">\r\n\r\n                    <LocalForm onSubmit={(values) => handleSubmit(values)}>\r\n                        <Col className=\"form-group\">\r\n                            <Row>\r\n                                <Label htmlFor=\"BriefInfo\" md=\"2\">Brief descripton:</Label>\r\n                                <Col>\r\n                                    <Control.text model=\".BriefInfo\" id=\"BriefInfo\" name=\"BriefInfo\"\r\n                                        placeholder={BriefInfo}\r\n                                        className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n\r\n                        <Col className=\"form-group\">\r\n                            <Label htmlFor=\"Description\">Dataset description:</Label>\r\n                            <Col md={10}>\r\n                                <Control.textarea model=\".Description\" id=\"Description\" name=\"Description\"\r\n                                    row=\"6\" className=\"form-control\" placeholder={Description} />\r\n                            </Col>\r\n                        </Col>\r\n\r\n                        <Col className=\"form-group\">\r\n                            <Row>\r\n                                <Label htmlFor=\"Source\" md={1}>Source:</Label>\r\n                                <Col>\r\n                                    <Control.text model=\".Source\" id=\"Source\" name=\"Source\"\r\n                                        placeholder={Source}\r\n                                        className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n\r\n                        {/** \r\n                        <Row className=\"form-group\">\r\n                            <Col md={5}>\r\n                                <Label htmlFor=\"Number_of_Instance\" md={10}>Number of instances:</Label>\r\n                                <Col md={4}>\r\n                                    <Control.input model=\".Number_of_Instance\" id=\"Number_of_Instance\" name=\"Number_of_Instance\"\r\n                                        className=\"form-control\"\r\n                                        min=\"0\" type=\"number\" step=\"1\" />\r\n                                </Col>\r\n                            </Col>\r\n\r\n                            <Col md={5}>\r\n                                <Label htmlFor=\"Number_of_Attribute\" md={10}>Number of attributes:</Label>\r\n                                <Col md={4}>\r\n                                    <Control.input model=\".Number_of_Attribute\" id=\"Number_of_Attribute\" name=\"Number_of_Attribute\"\r\n                                        className=\"form-control\"\r\n                                        min=\"0\" type=\"number\" step=\"1\" />\r\n                                </Col>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Col className=\"form-group\">\r\n                            <Row>\r\n                                <Label md={4}>Whether the dataset containes labels:</Label>\r\n                                <Col md={2}>\r\n                                    <Control.select model=\".Label\" id=\"Label\" name=\"Label\"\r\n                                        className=\"form-control\">\r\n                                        <option>Unknown</option>\r\n                                        <option>Yes</option>\r\n                                        <option>No</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        */}\r\n\r\n                        <Col className=\"form-group\">\r\n                            <Row>\r\n                                <Label htmlFor=\"keywords\" md={2}>Key words:</Label>\r\n                                <Col>\r\n                                    <ReactTagInput tags={tags} onChange={(newTags) => setTags(newTags)} placeholder={Keywords} />\r\n                                    <Control model=\".keywords\" id=\"keywords\" name=\"keywords\"\r\n                                        value=\"test\" className=\"form-control nodisplay\" />\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n\r\n                        <Col className=\"form-group\"> {/**for loop */}\r\n                            <Label style={{ backgroundColor: \"aliceblue\", width: \"100%\" }}>Attribute Information:</Label>\r\n                            <Col>\r\n                                {AttrForm(attr - 1)}\r\n                                {AttrRow(attr, true)}\r\n                            </Col>\r\n                        </Col>\r\n\r\n                        <div className=\"submit-button col-md-4 align-items-center\">\r\n                            <Button type=\"submit\" style={{ backgroundColor: \"#378CC6\" }}>Submit</Button>\r\n                        </div>\r\n\r\n                    </LocalForm>\r\n\r\n\r\n                </Col>\r\n            </Row>\r\n\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"persistent\"\r\n                anchor=\"right\"\r\n                open={open}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}>\r\n                <div className={classes.drawerHeader}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        {theme.direction === 'rtl' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />   \r\n            \r\n                <RenderMetadata metadata={props.metadata} isLoading={props.isLoading_metadata} errMess={props.errMess_metadata}\r\n                        fileName={FileName} />\r\n                <RenderDetailedData detailedData={props.detailedData} isLoading={props.isLoading_detailedData} errMess={props.errMess_detailedData} />\r\n            </Drawer>\r\n        </Container>\r\n    );\r\n}\r\n\r\n// detail data -> metadata\r\nconst RenderMetadata = ({ metadata, isLoading, errMess, fileName }) => {\r\n    console.log(\"check metadata\");\r\n    console.log(JSON.stringify(metadata));\r\n    if (isLoading) {\r\n        return (\r\n            <Loading />\r\n        );\r\n    }\r\n    else if (errMess) {\r\n        return (\r\n            <h4>{errMess}</h4>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Table size=\"sm\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>Metadata: {fileName}</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            <tr>\r\n                                <th scope=\"row\">1</th>\r\n                                <td>Dataset description:</td>\r\n                                <td>{metadata.Description}</td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th scope=\"row\">2</th>\r\n                                <td>Source:</td>\r\n                                <td>{metadata.Source}</td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th scope=\"row\">3</th>\r\n                                <td>Number of instances</td>\r\n                                <td>{metadata.Number_of_Instance}</td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th scope=\"row\">4</th>\r\n                                <td>Number of attributes:</td>\r\n                                <td>{metadata.Number_of_Attribute}</td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th scope=\"row\">5</th>\r\n                                <td>Whether the dataset contains labels:</td>\r\n                                <td>{metadata.Label}</td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th scope=\"row\">6</th>\r\n                                <td>Keywords:</td>\r\n                                <td>{metadata.Keywords.length === 0 ? \"\" : JSON.stringify(metadata.Keywords)}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </Table>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Table size=\"sm\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Attributes</th>\r\n                                <th>Description</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {metadata.AttrInfo.map((eachAttr, index) =>\r\n                                <tr key={index}>\r\n                                    {Object.values(eachAttr).map(eachValue => <td key={eachValue}>{eachValue}</td>)}\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </Table>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nconst RenderDetailedData = ({ detailedData, isLoading, errMess }) => {\r\n    // pass the datasetName to the backend server\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <Loading />\r\n        );\r\n    }\r\n    else if (errMess) {\r\n        return (\r\n            <h4>{errMess}</h4>\r\n        );\r\n    }\r\n    else {\r\n        console.log(\"detailed data is:\");\r\n        console.log(detailedData);\r\n        const colName = Object.keys(detailedData[Object.keys(detailedData)[0]]);\r\n        console.log(\"colname is \" + colName);\r\n        return (\r\n            <Table striped>\r\n                <thead>\r\n                    <tr key=\"tbhead\">\r\n                        {colName.map(col =>\r\n                            <th key={col}>{col}</th>\r\n                        )}\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {Object.keys(detailedData).map(row => // [row1, row2, row3, row4, row5]\r\n                        <tr>\r\n                            {Object.values(detailedData[row]).map(value =>\r\n                                <td>{value}</td>\r\n                            )}\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n\r\n            </Table>\r\n        );\r\n    }\r\n};\r\n\r\n\r\nexport default MetadataForm;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DetailedDatasetComponent.js",["353","354","355"],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ConnectionUploading.js",["356","357","358","359","360","361","362","363","364","365","366"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Row, Col, Container, Progress, Card, CardBody, CardTitle, CardText, Button, CardColumns } from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\r\nimport { ListGroup, ListGroupItem } from 'reactstrap';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport NeedUploading from './Modal/NeedUploading';\r\n\r\nfunction ConnectionUploading(props) {\r\n    const MODEL_REMIND = \"Please upload your model. (only accept .cod)\";\r\n    const DATASET_REMIND = \"Please upload your datasets. (only accept .dat, .txt, .csv, .xlsx)\";\r\n    const [selectedModel, setSelectedModel] = useState(undefined);\r\n    const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n    const [currentFile, setCurrentFile] = useState(undefined);\r\n    const [progress, setProgress] = useState(0);\r\n    const [modelMessage, setModelMessage] = useState(MODEL_REMIND);\r\n    const [message, setMessage] = useState(DATASET_REMIND);\r\n\r\n    const [fileInfo, setFileInfos] = useState(\"\");\r\n    const [isModalOpen, setModal] = useState(false);\r\n\r\n    const el = useRef(); // accesing input element\r\n\r\n    const validModalFormat = \"cod\";\r\n    const validDatasetFormat = [\"dat\", \"txt\", \"csv\", \"xlsx\"];\r\n    const [model_message, setModelFail] = useState(\"\");\r\n    const [dataset_message, setDatasetFail] = useState(\"\");\r\n\r\n    const checkValidation = (file, reminder, message, setFail) => {\r\n        let reader = new FileReader();\r\n        console.log(\"file name: \", file.name);\r\n        reader.onloadend = () => {\r\n            let lines = reader.result.split('\\n');\r\n            try {\r\n                let line_check = parseFloat(lines[0].split(' ')[0]);\r\n                message = Number.isNaN(line_check) ? `Could not upload ${file.name}.#` : `${file.name} uploaded successfully!#`;\r\n                reminder += message;\r\n                console.log(\"check reminder: \", reminder);\r\n                setFail(reminder);\r\n            }\r\n            catch (e) {\r\n                message = `# Could not upload ${file.name}.#`;\r\n                reminder += message;\r\n                setFail(reminder);\r\n            }\r\n        };\r\n\r\n        reader.onerror = () => {\r\n            message = `# Could not upload ${file.name}.#`;\r\n            reminder += message;\r\n            setDatasetFail(reminder);\r\n        };\r\n\r\n        reader.readAsText(file);\r\n    };\r\n\r\n    // It is for get the uploaded file you selected\r\n    const handleModelChange = (event) => {\r\n        const file = event.target.files[0]; // accessing file\r\n        let modelMessage = '';\r\n        let message = '';\r\n        console.log(\"accepted model: \", file.name);\r\n        if (file.name !== null || file.name !== undefined || file.name.length !== 0) {\r\n            const acceptedModelArray = file.name.split(\".\");\r\n            const modelExtension = acceptedModelArray.slice(acceptedModelArray.length - 1, acceptedModelArray.length)[0]\r\n            if (modelExtension === validModalFormat) {\r\n                checkValidation(file, modelMessage, message, setModelFail);\r\n            } else {\r\n                setModelFail(\"Could not upload the model. Please check your model format or the content!\");\r\n            }\r\n            setSelectedModel(event.target.files[0]); // storing file\r\n            //setFileInfos(file.name)\r\n        }\r\n    }\r\n\r\n    const handleDatasetChange = (event) => {\r\n        const files = event.target.files; // accessing file\r\n        let datasetMessage = '';\r\n\r\n        for (let file of files) {\r\n            let message = '';\r\n\r\n            const acceptedDatasetArray = file.name.split(\".\");\r\n            const datasetExtension = acceptedDatasetArray.slice(acceptedDatasetArray.length - 1, acceptedDatasetArray.length)[0];\r\n            if (validDatasetFormat.includes(datasetExtension)) {\r\n                let reader = new FileReader();\r\n                console.log(\"file name: \", file.name);\r\n                reader.onloadend = () => {\r\n                    let lines = reader.result.split('\\n');\r\n                    console.log(\"check lines: \", lines);\r\n                    try {\r\n\r\n                        if (datasetExtension === \"txt\" || datasetExtension == \"dat\") {\r\n                            const firstRow = lines[0].trim().split(\" \");\r\n                            console.log(\"first row: \", firstRow);\r\n                            console.log(\"first row: \", firstRow.length);\r\n\r\n                            if (firstRow.length === 1) {\r\n                                console.log(\"firs row len 1\");\r\n                                let line_check = parseFloat(firstRow[0]);\r\n                                message = Number.isNaN(line_check) ? `# Could not upload ${file.name}. ` : `# ${file.name} uploaded successfully!  `;\r\n                                datasetMessage += message;\r\n                                setDatasetFail(datasetMessage);\r\n                            }\r\n                            else {\r\n                                console.log(\"firs row len not 1\");\r\n                                message = `# Could not upload ${file.name}. `;\r\n                                datasetMessage += message;\r\n                                setDatasetFail(datasetMessage);\r\n                            }\r\n                        }\r\n                        else {\r\n                            const firstRow = lines[0].trim().split(\" \");\r\n                            const secondRow = lines[1].trim().split(\" \");\r\n\r\n                            if (firstRow.length !== secondRow.length) {\r\n                                message = `# Could not upload ${file.name}. `;\r\n                                datasetMessage += message;\r\n                                setDatasetFail(datasetMessage);\r\n                            }\r\n                            else {\r\n                                const checkLine = secondRow.slice(0, secondRow.length - 1).map(elem => Number.isNaN(parseFloat(elem)) ? \"noUpdate\" : \"update\");\r\n                                message = checkLine.includes(\"noUpdate\") ? `# Could not upload ${file.name}. ` : `# ${file.name} uploaded successfully!  `;\r\n                                datasetMessage += message;\r\n                                setDatasetFail(datasetMessage);\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n                    catch (e) {\r\n                        message = `# Could not upload ${file.name}. `;\r\n                        datasetMessage += message;\r\n                        setDatasetFail(datasetMessage);\r\n                    }\r\n                };\r\n\r\n                reader.onerror = () => {\r\n                    message = `# Could not upload ${file.name}. `;\r\n                    datasetMessage += message;\r\n                    setDatasetFail(datasetMessage);\r\n                };\r\n\r\n                reader.readAsText(file);\r\n            }\r\n            else {\r\n                message = `# Could not upload ${file.name}. `;\r\n                datasetMessage += message;\r\n                setDatasetFail(datasetMessage);\r\n            }\r\n\r\n            // const acceptedDatasetArray = file.name.split(\".\");\r\n            // const datasetExtension = acceptedDatasetArray.slice(acceptedDatasetArray.length - 1, acceptedDatasetArray.length)[0];\r\n            // let message = validDatasetFormat.includes(datasetExtension) ? `# ${file.name} uploaded successfully!  ` : `# Could not upload ${file.name}.  `;\r\n\r\n        }\r\n        setSelectedFiles(files); // storing file\r\n    }\r\n\r\n    // We use selectedFiles for accessing current File as the first Item. \r\n    // Then we call UploadService.upload() method on the currentFile with a callback.\r\n    const uploadModel = () => {\r\n        setProgress(0);\r\n\r\n        const formData = new FormData();\r\n\r\n        formData.append('username', selectedModel, sessionStorage.getItem('verifiedUsername'));\r\n        formData.append('model', selectedModel);\r\n\r\n        if (selectedFiles !== undefined) {\r\n            for (let i = 0; i < selectedFiles.length; i++) {\r\n                formData.append(`file${i}`, selectedFiles[i]); // appending file\r\n            }\r\n        }\r\n\r\n        // Display the keys\r\n        for (var key of formData.keys()) {\r\n            console.log(key);\r\n        }\r\n\r\n        console.log(\"selected file:\", selectedFiles);\r\n        setCurrentFile(selectedFiles);\r\n\r\n        // 'props.uploadModel' is from Redux actionCreators, which is used to post the uploaded model to the backend server\r\n        props.connectUploading(formData, (event) => {\r\n            setProgress(Math.round((100 * event.loaded) / event.total));\r\n        }, sessionStorage.getItem('verifiedUsername'))\r\n            .then(() => console.log(\"I'm back\"))\r\n            .then((response) => {\r\n                setModelMessage(\"Uploaded successfully\");\r\n                setMessage(\"Uploaded successfully\");\r\n                console.log(\"get connect names: \", props.connectionFiles);\r\n            })\r\n            .catch((res) => {\r\n                setProgress(0);\r\n                console.log(\"dataset\", dataset_message);\r\n                console.log(`model message: ${model_message}, dataset message: ${dataset_message}`)\r\n                setModelMessage(model_message);\r\n                if (model_message === \"Could not upload the model. Please check your model format or the content!\") {\r\n                    setMessage(\"datasets are not allowed to be uploaded while model uploading fails\");\r\n                } else {\r\n                    setMessage(dataset_message);\r\n                }\r\n            });\r\n    };\r\n\r\n    const handleUploadBtn = () => {\r\n        if (selectedModel == undefined) {\r\n            setModal(!isModalOpen);\r\n        }\r\n        else {\r\n            uploadModel();\r\n        }\r\n    }\r\n\r\n    const toggleModal = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    // while a user chooses not to delete a dataset\r\n    const handlenNoBtn = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n\r\n            <div>\r\n                {currentFile && (<Progress animated value={progress} max=\"100\">{progress}%</Progress>)}\r\n            </div>\r\n\r\n            <Row>\r\n                <Col md=\"9\">\r\n                    <Row>\r\n                        <label htmlFor=\"file-upload\">\r\n                            <input type=\"file\" id=\"file-upload\" ref={el} onChange={handleModelChange} />\r\n                            <div className=\"alert alert-light\" role=\"alert\">\r\n                                {modelMessage.split(\"#\").map(eachMessage =>\r\n                                    <p>{eachMessage.includes(\"successfully\") || eachMessage === MODEL_REMIND ? eachMessage : <div style={{ color: 'red' }}>{eachMessage}</div>}</p>\r\n                                )}\r\n                            </div>\r\n                        </label>\r\n                    </Row>\r\n                </Col>\r\n\r\n                <Col>\r\n                    <Button\r\n                        style={{ backgroundColor: \"#378CC6\" }}\r\n                        disabled={!selectedModel}\r\n                        onClick={handleUploadBtn}>\r\n                        Upload\r\n                    </Button>\r\n                </Col>\r\n\r\n            </Row>\r\n\r\n            {/** datasets */}\r\n            <Row>\r\n                <Col md=\"5\">\r\n                    <Row>\r\n                        <label htmlFor=\"file-upload\">\r\n                            <input type=\"file\" multiple ref={el} onChange={handleDatasetChange} />\r\n                            <div className=\"alert alert-light\" role=\"alert\">\r\n                                {message.split(\"#\").map(eachMessage =>\r\n                                    <p>{eachMessage.includes(\"successfully\") || eachMessage === DATASET_REMIND ? eachMessage : <div style={{ color: 'red' }}>{eachMessage}</div>}</p>\r\n                                )}\r\n                            </div>\r\n                        </label>\r\n                    </Row>\r\n                </Col>\r\n\r\n                <Modal isOpen={isModalOpen} toggle={toggleModal} centered={true}>\r\n                    <ModalHeader toggle={toggleModal}>Dataset Delete</ModalHeader>\r\n                    <ModalBody>\r\n                        <p>You have not selected any model. Please select one before uploading !</p>\r\n                        <Row>\r\n                            <Col>\r\n                                <Button onClick={handleUploadBtn}>Got it!</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </Row>\r\n\r\n            <Card>\r\n                <CardBody>\r\n                    <CardTitle>\r\n                        <h5 className=\"center\">Last Uploading History</h5>\r\n                        <p style={{ color: \"grey\", fontSize: \"small\" }}>Notice: the file name will be automatically modified if there is a file with the same name in your database</p>\r\n                    </CardTitle>\r\n                </CardBody>\r\n                <CardBody>\r\n                    <CardTitle><strong>uploaded Model</strong></CardTitle>\r\n                    <CardText>\r\n                        <ListGroup>\r\n                            <ListGroupItem className=\"justify-content-between\">{props.connectionFiles[0]}</ListGroupItem>\r\n                        </ListGroup>\r\n                    </CardText>\r\n\r\n                    <CardTitle><strong>uploaded Datasets</strong></CardTitle>\r\n                    <CardText>\r\n                        <ListGroup>\r\n                            {props.connectionFiles[1].map((filename, index) => (\r\n                                <ListGroupItem className=\"justify-content-between\">{filename}</ListGroupItem>\r\n                            ))}\r\n                        </ListGroup>\r\n                    </CardText>\r\n                </CardBody>\r\n            </Card>\r\n        </Container>\r\n    );\r\n\r\n}\r\n\r\nexport default ConnectionUploading;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DeleteOneDataset.js",["367","368","369","370"],"import { Modal, ModalHeader, ModalBody, Button, Row, Col} from 'reactstrap';\r\nimport React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\r\nimport { IconButton, TableRow } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nfunction DeleteOneDataset(props) {\r\n    const [isModalOpen, setModal] = useState(false);\r\n\r\n    const toggleModal = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    // while a user chooses not to delete a dataset\r\n    const handlenNoBtn = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    //while a user chooses to delete a dataset\r\n    const handleYesBtn= () => {\r\n        console.log(\"filename is \" + props.deletedFileName);\r\n        console.log(typeof(props.deleteDataset));\r\n        props.deleteDataset(props.deletedFileName, sessionStorage.getItem('verifiedUsername'));\r\n        setModal(!isModalOpen);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <IconButton aria-label=\"delete a dataset\" component=\"span\">\r\n                <DeleteIcon onClick={toggleModal}/>\r\n            </IconButton>\r\n\r\n            <Modal isOpen={isModalOpen} toggle={toggleModal} centered={true}>\r\n                <ModalHeader toggle={toggleModal}>Dataset Delete</ModalHeader>\r\n                <ModalBody>\r\n                    <p>Do you want to delete this dataset?</p>\r\n                    <Row>\r\n                        <Col>\r\n                            <Button onClick={handleYesBtn} style={{backgroundColor: '#378CC6'}}>Yes</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={handlenNoBtn}>No</Button>\r\n                        </Col>          \r\n                    </Row>\r\n                </ModalBody>\r\n            </Modal>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default DeleteOneDataset;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\AlldatasetsComponent.js",["371","372","373"],"import React, { Component } from 'react';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { Table } from 'reactstrap';\r\nimport { IconButton, Modal, TableRow } from '@material-ui/core';\r\nimport TableChartIcon from '@material-ui/icons/TableChart';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Loading } from './LoadingComponent';\r\nimport DownloadFile from '../components/Modal/downloadFile';\r\nimport SearchAllDatasets from './SearchAllDatasets';\r\n\r\nclass AllDataset extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.props.fetchDatasetFiles();\r\n  }\r\n\r\n  // to create a flexible table head, where the number of columns depends on the attributes in the datafile.\r\n  // dataset: array. JSON data stored inside.\r\n  tableHead(datasets) {\r\n    if (datasets !== undefined) {\r\n      return (\r\n        <thead style={{backgroundColor: '#FFE399', color: \"black\"}}>\r\n          <tr>\r\n            <th width=\"12%\">File name</th>\r\n            <th width=\"20%\">Description</th>\r\n            <th width=\"12%\">User name</th>\r\n            <th width=\"8%\">Operation</th>\r\n          </tr>\r\n        </thead>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>The table for storing uploaded datasets does not exist</div>\r\n    );\r\n  }\r\n\r\n  tableBody(datasets) {\r\n    // when there is no uploaded dataset in the database\r\n    if (datasets.length === 0) {\r\n      return (\r\n        <tbody />\r\n      );\r\n    }\r\n    else { // where are dataset stored in the database\r\n      return (\r\n        <tbody>\r\n          {datasets.map((eachDataset, index) =>\r\n            <tr key={index}>\r\n              <td key={'name'}>{eachDataset.FileName}</td>\r\n              <td key={'Description'}>{eachDataset.Description}</td>\r\n              <td key={'Username'}>{eachDataset.UserName}</td>\r\n              <td key={\"operateEachDataset\"}>{this.operateDataset(true, eachDataset.FileName, eachDataset.UserName)}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n  //showOperate: bool. the delete button and the create button will be disable\r\n  operateDataset(showOperate, fileName, userName) {\r\n    /**\r\n     if (icons === \"add only\") {\r\n            return (\r\n                <Container>\r\n                    <Row>\r\n                        <DatasetUpload addDataset={this.props.datasetfile} />\r\n                    </Row>\r\n                </Container>\r\n            );\r\n        }*/\r\n    if (showOperate) {\r\n      return (\r\n        <Container>\r\n          <Row>\r\n            <Link to={`/alldataset/${fileName}?userName=${userName}&fileName=${fileName}`}>\r\n              <IconButton aria-label=\"detailed data\" component=\"span\">\r\n                <TableChartIcon />\r\n              </IconButton>\r\n            </Link>\r\n\r\n            <DownloadFile downloadFile={this.props.downloadFile} datasetName={fileName} userName={userName}/>\r\n          </Row>\r\n        </Container>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderDatasetTable(datasets, isLoading, errMess) {\r\n    if (isLoading) {\r\n      return (\r\n        <Loading />\r\n      );\r\n    }\r\n    else if (errMess) {\r\n      return (\r\n        <h4>{errMess}</h4>\r\n      );\r\n    }\r\n    else {\r\n      return (\r\n        <Table hover style={{ tableLayout: 'fixed', wordWrap: 'break-word' }}>\r\n          {this.tableHead(datasets)}\r\n          {this.tableBody(datasets)}\r\n        </Table>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Col className=\"search-box\" >\r\n          <SearchAllDatasets queryDatasets={this.props.queryDatasets}/>\r\n        </Col>\r\n\r\n        <Col className=\"database\">\r\n          {this.renderDatasetTable(this.props.datasetFiles, this.props.isLoading, this.props.errMess)}\r\n        </Col>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AllDataset;\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\ActionCreators.js",["374"],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\LoadingComponent.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DatasetUploadComponent.js",["375","376","377","378","379","380"],"import React, { useState, useRef } from 'react';\r\nimport { IconButton, Modal } from '@material-ui/core';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport { Row, Col, Container, Progress, Button } from 'reactstrap';\r\n\r\nfunction DatasetUpload(props) {\r\n    const DATASET_REMIND = \"Please upload your datasets. (only accept .dat, .txt, .csv, .xlsx)\";\r\n    const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n    const [currentFile, setCurrentFile] = useState(undefined);\r\n    const [progress, setProgress] = useState(0); // tracking the status of uploading\r\n    const [message, setMessage] = useState(DATASET_REMIND);\r\n    const el = useRef(); // accesing input element\r\n\r\n    const validDatasetFormat = [\"dat\", \"txt\", \"csv\", \"xlsx\"];\r\n    const [dataset_message, setDatasetFail] = useState(\"1\");\r\n\r\n    // It is for get the uploaded file you selected\r\n    const handleDatasetChange = (event) => {\r\n        const files = event.target.files; // accessing file\r\n        let datasetMessage = '';\r\n\r\n        for (let file of files) {\r\n            let message = '';\r\n\r\n            const acceptedDatasetArray = file.name.split(\".\");\r\n            const datasetExtension = acceptedDatasetArray.slice(acceptedDatasetArray.length - 1, acceptedDatasetArray.length)[0];\r\n            if (validDatasetFormat.includes(datasetExtension)) {\r\n                let reader = new FileReader();\r\n                console.log(\"file name: \", file.name);\r\n                reader.onloadend = () => {\r\n                    let lines = reader.result.split('\\n');\r\n                    console.log(\"check lines: \", lines);\r\n                    try {\r\n\r\n                        if (datasetExtension === \"txt\" || datasetExtension == \"dat\") {\r\n                            const firstRow = lines[0].trim().split(\" \");\r\n                            console.log(\"first row: \", firstRow);\r\n                            console.log(\"first row: \", firstRow.length);\r\n\r\n                            if (firstRow.length === 1) {\r\n                                console.log(\"firs row len 1\");\r\n                                let line_check = parseFloat(firstRow[0]);\r\n                                message = Number.isNaN(line_check) ? `# Could not upload ${file.name}. ` : `# ${file.name} uploaded successfully!  `;\r\n                                datasetMessage += message;\r\n                                setDatasetFail(datasetMessage);\r\n                            }\r\n                            else {\r\n                                console.log(\"firs row len not 1\");\r\n                                message = `# Could not upload ${file.name}. `;\r\n                                datasetMessage += message;\r\n                                setDatasetFail(datasetMessage);\r\n                            }\r\n                        }\r\n                        else{\r\n                            const firstRow = lines[0].trim().split(\" \");\r\n                            const secondRow = lines[1].trim().split(\" \");\r\n \r\n                            if (firstRow.length !== secondRow.length){\r\n                                message = `# Could not upload ${file.name}. `;\r\n                                datasetMessage += message;\r\n                                setDatasetFail(datasetMessage);\r\n                            }\r\n                            else{\r\n                                const checkLine = secondRow.slice(0, secondRow.length-1).map( elem => Number.isNaN(parseFloat(elem)) ? \"noUpdate\" : \"update\");\r\n                                message = checkLine.includes(\"noUpdate\") ? `# Could not upload ${file.name}. ` : `# ${file.name} uploaded successfully!  `;\r\n                                datasetMessage += message;\r\n                                setDatasetFail(datasetMessage);\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n                    catch (e) {\r\n                        message = `# Could not upload ${file.name}. `;\r\n                        datasetMessage += message;\r\n                        setDatasetFail(datasetMessage);\r\n                    }\r\n                };\r\n\r\n                reader.onerror = () => {\r\n                    message = `# Could not upload ${file.name}. `;\r\n                    datasetMessage += message;\r\n                    setDatasetFail(datasetMessage);\r\n                };\r\n\r\n                reader.readAsText(file);\r\n            }\r\n            else {\r\n                message = `# Could not upload ${file.name}. `;\r\n                datasetMessage += message;\r\n                setDatasetFail(datasetMessage);\r\n            }\r\n\r\n            // const acceptedDatasetArray = file.name.split(\".\");\r\n            // const datasetExtension = acceptedDatasetArray.slice(acceptedDatasetArray.length - 1, acceptedDatasetArray.length)[0];\r\n            // let message = validDatasetFormat.includes(datasetExtension) ? `# ${file.name} uploaded successfully!  ` : `# Could not upload ${file.name}.  `;\r\n\r\n        }\r\n        setSelectedFiles(files); // storing file\r\n    }\r\n\r\n    const handleUploadBtn = () => {\r\n        uploadFile();\r\n    }\r\n\r\n    const uploadFile = () => {\r\n        setProgress(0);\r\n\r\n        //console.log(\"accepted dataset: \", selectedFiles);\r\n\r\n        const formData = new FormData();\r\n        formData.append('username', selectedFiles[0], sessionStorage.getItem('verifiedUsername'));\r\n        if (selectedFiles !== undefined) {\r\n            for (let i = 0; i < selectedFiles.length; i++) {\r\n                formData.append(`file${i}`, selectedFiles[i]); // appending file\r\n            }\r\n        }\r\n\r\n        // Display the keys\r\n        for (var key of formData.keys()) {\r\n            console.log(key);\r\n        }\r\n\r\n        setCurrentFile(selectedFiles);\r\n\r\n        // 'props.uploadDataset' is from Redux actionCreators, which is used to post the uploaded dataset to the backend server\r\n        props.uploadDataset(formData, (event) => {\r\n            setProgress(Math.round((100 * event.loaded) / event.total));\r\n        }, sessionStorage.getItem('verifiedUsername'))\r\n            .then((response) => {\r\n                setMessage(\"Uploaded successfully\");\r\n            })\r\n            .catch(() => {\r\n                setProgress(0);\r\n                setMessage(dataset_message);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <div>\r\n                {currentFile && (<Progress animated value={progress} max=\"100\">{progress}%</Progress>)}\r\n            </div>\r\n\r\n            {/** datasets */}\r\n            <Row style={{ paddingTop: '2%' }}>\r\n                <Col md=\"9\">\r\n                    <Row>\r\n                        <label htmlFor=\"file-upload\">\r\n                            <input type=\"file\" multiple ref={el} onChange={handleDatasetChange} />\r\n                            <div className=\"alert alert-light\" role=\"alert\">\r\n                                {message.split(\"#\").map(eachMessage =>\r\n                                    <p>{eachMessage.includes(\"successfully\") || eachMessage === DATASET_REMIND ? eachMessage : <div style={{ color: 'red' }}>{eachMessage}</div>}</p>\r\n                                )}\r\n                            </div>\r\n                        </label>\r\n                    </Row>\r\n                </Col>\r\n\r\n                <Col>\r\n                    <Button\r\n                        style={{ backgroundColor: \"#378CC6\" }}\r\n                        disabled={!selectedFiles}\r\n                        onClick={handleUploadBtn}>\r\n                        Upload\r\n                    </Button>\r\n                </Col>\r\n\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default DatasetUpload;\r\n\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\searchFileComponent.js",["381","382","383"],"import React, { useState, useRef } from 'react';\r\nimport { InputGroup, InputGroupText, InputGroupAddon, Input } from 'reactstrap';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\n\r\nfunction SearchFile(props) {\r\n    const [inputValue, setInput] = useState('');\r\n    const el = useRef(); // accesing input element\r\n\r\n    const handleChange = (event) => {\r\n        const userInput = event.target.value;\r\n        console.log(\"the user input: \", userInput);\r\n        setInput(event.target.value);\r\n    };\r\n\r\n    const handleClick = () => {\r\n        console.log(\"the current input value: \", inputValue);\r\n        props.queryDatasets(inputValue, sessionStorage.getItem('verifiedUsername'));\r\n    };\r\n\r\n    return (\r\n        <Col md={{ size: 7 }}>\r\n            <InputGroup style={{ width: '6' }} >\r\n                <Input ref={el} onChange={handleChange} placeholder=\"Search similar datasets here\" />\r\n                <InputGroupAddon addonType=\"append\">\r\n                    <Button onClick={handleClick} style={{ backgroundColor: '#378CC6' }}>Search</Button>\r\n                </InputGroupAddon>\r\n            </InputGroup>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default SearchFile;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\allDatasetFiles.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\datasetFiles.js",["384"],"import * as ActionTypes from './ActionTypes';\r\n\r\nexport const DatasetFiles = (state = {\r\n    isLoading: true,\r\n    isQuery: false,\r\n    errMess: null,\r\n    datasetFiles: []\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_DATASETFILES:\r\n            console.log(\"I wanna check dataset file\");\r\n            return { ...state, isLoading: false, errMess: null, datasetFiles: action.payload };\r\n\r\n        case ActionTypes.QUERY_DATASETFILES:\r\n            return { ...state, isLoading: false, errMess: null, isQuery: true, datasetFiles: action.payload };\r\n\r\n        case ActionTypes.DATASETFILES_LOADING:\r\n            return { ...state, isLoading: true, errMess: null, datasetFiles: [] }\r\n\r\n        case ActionTypes.DATASETFILES_FAILED:\r\n            return { ...state, isLoading: false, errMess: action.payload };\r\n\r\n        // when a user upload a dataset, we will first send the dataset to the server,\r\n        // if the dataset is successfully added on the server site, and the server sends back a success of the posting of the dataset\r\n        // only then we will add it to the redux store.\r\n        case ActionTypes.UPLOAD_DATASET:\r\n            var dataset = action.payload; // get the uploaded dataset\r\n            return { ...state, datasetFiles: state.datasetFiles.concat(dataset) };\r\n\r\n        case ActionTypes.REMOVE_DATASET:\r\n            console.log(\"start delete\");\r\n            var datasetName = action.payload; // to get the filename of the selected dataset\r\n            let deletedIndex = 0; // to find the corresponding index based on filename\r\n            console.log(\"get dataset is \" + datasetName);\r\n            for (let [index, eachDataset] of Object.entries(state.datasetFiles)) {\r\n                if (eachDataset.FileName === datasetName) {\r\n                    deletedIndex = parseInt(index, 10);\r\n                }\r\n            }\r\n\r\n            console.log(\"deletedIndex is \" + deletedIndex);\r\n\r\n            const newDataset = [\r\n                ...state.datasetFiles.slice(0, deletedIndex),\r\n                ...state.datasetFiles.slice(deletedIndex + 1, state.datasetFiles.length)];\r\n\r\n            return { ...state, datasetFiles: newDataset };\r\n\r\n        case ActionTypes.MODIFY_BRIFINFO:\r\n            console.log(\"start modify briefInfo in a dataset file!\");\r\n            var briefInfo_datasetName = action.payload; // to get the new briefInfo\r\n            var briefInfo = briefInfo_datasetName[1];\r\n            var datasetName = briefInfo_datasetName[0];\r\n\r\n            const updatedDataset = state.datasetFiles.map(item => {\r\n                if (item.FileName === datasetName) {\r\n                    item.BriefInfo = briefInfo\r\n                    console.log(\"get item: \", item);\r\n                    return item\r\n                } else {\r\n                    return item\r\n                }\r\n            });\r\n\r\n            console.log(\"new updatedDatasets: \", updatedDataset)\r\n            return { ...state, datasetFiles: updatedDataset };\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\detailedData.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\metadata.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\modelFiles.js",["385"],"import * as ActionTypes from './ActionTypes';\r\n\r\nexport const ModelFiles = (state = {\r\n    isLoading: true,\r\n    isQuery: false,\r\n    errMess: null,\r\n    modelFiles: []\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_MODELFILES:\r\n            console.log(\"I wanna check model file\");\r\n            return { ...state, isLoading: false, errMess: null, isQuery: false, modelFiles: action.payload };\r\n\r\n        case ActionTypes.QUERY_MODELFILES:\r\n            return { ...state, isLoading: false, errMess: null, isQuery: true, modelFiles: action.payload };\r\n\r\n        case ActionTypes.MODELFILES_LOADING:\r\n            return { ...state, isLoading: true, errMess: null, modelFiles: [] }\r\n\r\n        case ActionTypes.MODELFILES_FAILED:\r\n            return { ...state, isLoading: false, errMess: action.payload };\r\n\r\n        case ActionTypes.UPLOAD_MODEL:\r\n            var model = action.payload; // get the uploaded model\r\n            return { ...state, modelFiles: [...state.modelFiles, ...model] };\r\n\r\n        case ActionTypes.REMOVE_MODEL:\r\n            console.log(\"start delete\");\r\n            var modelName = action.payload; // to get the filename of the selected model\r\n            let deletedIndex = 0; // to find the corresponding index based on filename\r\n            console.log(\"get model is \" + modelName);\r\n            for (let [index, eachModel] of Object.entries(state.modelFiles)) {\r\n                if (eachModel.FileName === modelName) {\r\n                    deletedIndex = parseInt(index, 10);\r\n                }\r\n            }\r\n\r\n            console.log(\"deletedIndex is \" + deletedIndex);\r\n\r\n            const newModel = [\r\n                ...state.modelFiles.slice(0, deletedIndex),\r\n                ...state.modelFiles.slice(deletedIndex + 1, state.modelFiles.length)];\r\n\r\n            return { ...state, modelFiles: newModel };\r\n\r\n        case ActionTypes.EDIT_MODEL_DESCRIPTION:\r\n            console.log(\"start edit\");\r\n            var { modelName, description } = action.payload;\r\n            console.log(\"my modelname:\", modelName);\r\n            console.log(\"my description:\", description)\r\n            state.modelFiles.forEach(item => {\r\n                if (item.FileName === modelName) {\r\n                    item.BriefInfo = description\r\n                }\r\n            })\r\n\r\n            const updatedModel = state.modelFiles.map(item => {\r\n                if (item.FileName === modelName) {\r\n                    item.BriefInfo = description\r\n                    return item\r\n                } else {\r\n                    return item\r\n                }\r\n            });\r\n\r\n            console.log(\"new modelFile: \", updatedModel)\r\n            return { ...state, modelFiles: updatedModel };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\login.js",["386","387","388","389","390"],"import React, { useEffect, useState } from 'react';\r\nimport { Grid, Paper, Typography } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Link from '@material-ui/core/Link';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Modal, ModalHeader, ModalBody, Row, Col } from 'reactstrap';\r\n\r\nimport {\r\n  login, updateUser\r\n} from '../redux/ActionCreators';\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.user,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  login: (data) => { dispatch(login(data)) },\r\n  updateUser: (data) => { dispatch(updateUser(data)) },\r\n});\r\n\r\nconst Login = ({ handleChange, ...props }) => {\r\n  const paperStyle = { padding: 20, height: '70vh auto', margin: \"20px auto\" }\r\n  let myStyle = {\r\n    color: '#6495ED',\r\n    fontSize: '48px',\r\n    fontWeight: 'bold',\r\n    fontStyle: 'italic'\r\n  }\r\n  let root = {\r\n    '& .MuiTextField-root': {\r\n      margin: '20ch',\r\n      width: '25ch',\r\n    }\r\n  }\r\n  let username = {\r\n    margin: '30px'\r\n  }\r\n  let button = {\r\n    margin: '30px',\r\n    fontSize: '24px',\r\n  }\r\n  const initialValues = {\r\n    username: '',\r\n    password: ''\r\n\r\n  }\r\n  const validationSchema = Yup.object().shape({\r\n    username: Yup.string().required(\"*Required!\"),\r\n    password: Yup.string().required(\"*Required!\")\r\n\r\n  })\r\n  const [user, setUser] = useState('')\r\n  const onSubmit = (values) => {\r\n    console.log(\"check username and password\", values)\r\n    // save into the local session\r\n    console.log(values.username)\r\n    sessionStorage.setItem('username', values.username);\r\n    sessionStorage.setItem('password', values.password)\r\n    const loginInfo = { username: sessionStorage.getItem('username'), password: sessionStorage.getItem('password') };\r\n    console.log(\"userInfo \", loginInfo);\r\n    setUser(loginInfo.username);\r\n    props.login(loginInfo);\r\n  }\r\n\r\n  const [isModalOpen, setModal] = useState(false);\r\n\r\n  const handlenNoBtn = () => {\r\n    setModal(!isModalOpen);\r\n    //location.reload()\r\n    props.updateUser(null)\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    console.log(\"helllloo\");\r\n    console.log(123, sessionStorage.getItem('verifiedUsername'));\r\n    if (sessionStorage.getItem('verifiedUsername') != undefined || sessionStorage.getItem('verifiedUsername') !== null){\r\n      props.updateUser(sessionStorage.getItem('verifiedUsername'));\r\n    }\r\n    \r\n    if (props.user.userInfo) {\r\n      console.log(props.user.userInfo);\r\n      if (sessionStorage.getItem('verifiedUsername') === sessionStorage.getItem('username')) {\r\n        props.history.replace('/');\r\n      } else {\r\n        setModal(!isModalOpen);\r\n      }\r\n      //弹出一个警示，告诉用户登陆失败\r\n\r\n    }\r\n  }, [props.user.userInfo])\r\n\r\n  return (\r\n    <Grid>\r\n      <Paper elevation={10} style={paperStyle}>\r\n        <div style={myStyle}> SOM </div>\r\n        <h3>Sign In</h3>\r\n        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n          {(props) => (\r\n            <Form>\r\n              <div>\r\n                <div style={username}>\r\n                  <Field as={TextField}\r\n                    id=\"outlined-search\"\r\n                    label=\"username\"\r\n                    name=\"username\"\r\n                    type=\"search\"\r\n                    helperText={\r\n                      <ErrorMessage name=\"username\" />\r\n                    }\r\n                    variant=\"outlined\" />\r\n                </div>\r\n\r\n                <div>\r\n                  <Field as={TextField}\r\n                    id=\"outlined-password-input\"\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    autoComplete=\"current-password\"\r\n                    helperText={\r\n                      <ErrorMessage name=\"password\" />\r\n                    }\r\n                    variant=\"outlined\" />\r\n                </div>\r\n\r\n              </div>\r\n              <div style={button}>\r\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\r\n                  Sign In\r\n                      </Button>\r\n              </div>\r\n            </Form>\r\n          )}\r\n\r\n\r\n        </Formik>\r\n\r\n        <div style={button}>\r\n\r\n\r\n          <Typography> don't have an account yet?\r\n                <Link href=\"#\" onClick={() => handleChange(\"event\", 1)}>\r\n              Sign up\r\n                </Link>\r\n          </Typography>\r\n        </div>\r\n        <div style={button}>\r\n          <Typography> forget password?\r\n            <Link onClick={() => props.history.push('/password')}>\r\n              click here!\r\n            </Link>\r\n          </Typography>\r\n        </div>\r\n      </Paper>\r\n      <Modal isOpen={isModalOpen} centered={true}>\r\n        <ModalHeader>warning!</ModalHeader>\r\n        <ModalBody>\r\n          <p>Username and password do not match</p>\r\n          <Row>\r\n            <Col>\r\n              <Button onClick={handlenNoBtn}>Ok</Button>\r\n            </Col>\r\n          </Row>\r\n        </ModalBody>\r\n      </Modal>\r\n\r\n    </Grid>\r\n\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\user.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\connectionResult.js",["391"],"import * as ActionTypes from './ActionTypes';\r\n\r\nexport const ConnectionFiles = (state = {\r\n    isLoading: true,\r\n    errMess: null,\r\n    connectionFiles: [\"this is for a uploaded model\", [\"this is for uploaded datasets\"]],\r\n    uploadingStatus: [\"\", \"\"],\r\n    bindedDatasets: [],\r\n    umatrixDatasets: []\r\n}, action) => {\r\n    switch (action.type) {\r\n        // when a user upload a dataset, we will first send the dataset to the server,\r\n        // if the dataset is successfully added on the server site, and the server sends back a success of the posting of the dataset\r\n        // only then we will add it to the redux store.\r\n        case ActionTypes.ADD_CONNECTIONS:\r\n            var files = action.payload; // get the uploaded dataset\r\n            console.log(\"did i get the connected files? \", action.payload)\r\n            return { ...state, connectionFiles: action.payload };\r\n\r\n        case ActionTypes.ADD_UMATRIXDATASETS:\r\n            console.log(\"did i get the umatrix datasets? \", action.payload)\r\n            return { ...state, isLoading: false, umatrixDatasets: action.payload };\r\n\r\n        case ActionTypes.UPDATE_UPLOADINGSTATUS:\r\n            return { ...state, uploadingStatus: action.payload };\r\n\r\n        case ActionTypes.CLEAR_CONNECTIONS:\r\n            const connectionFiles = [\"\", [\"\"]]\r\n            return { ...state, connectionFiles: connectionFiles };\r\n\r\n        case ActionTypes.ADD_BINDDATASETS:\r\n            console.log(\"did i get the binded datasets? \", action.payload)\r\n            return { ...state, isLoading: false, bindedDatasets: action.payload };\r\n\r\n        case ActionTypes.BIND_LOADING:\r\n            return { ...state, isLoading: true, errMess: null, bindedDatasets: [] };\r\n\r\n        case ActionTypes.REMOVE_BIND:\r\n            console.log(\"start delete a binded dataset\");\r\n            var datasetName = action.payload; // to get the filename of the selected dataset\r\n            let deletedIndex = 0; // to find the corresponding index based on filename\r\n            console.log(\"get dataset is \" + datasetName);\r\n            for (let [index, eachDataset] of Object.entries(state.bindedDatasets)) {\r\n                if (eachDataset.FileName === datasetName) {\r\n                    deletedIndex = parseInt(index, 10);\r\n                }\r\n            }\r\n\r\n            console.log(\"deletedIndex is \" + deletedIndex);\r\n\r\n            const newDataset = [\r\n                ...state.datasetFiles.slice(0, deletedIndex),\r\n                ...state.datasetFiles.slice(deletedIndex + 1, state.datasetFiles.length)];\r\n\r\n            return { ...state, bindedDatasets: newDataset };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ModelBriefInfo.js",["392","393","394"],"import { Modal, ModalHeader, ModalBody, Button, Row, Col, Input } from 'reactstrap';\r\nimport React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\r\nimport { IconButton, TableRow } from '@material-ui/core';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\n\r\nfunction ModelBriefInfo(props) {\r\n    const [isModalOpen, setModal] = useState(false);\r\n    const [briefInfo, setBriefInfo] = useState('');\r\n    const el = useRef(); // accesing input element\r\n\r\n    const toggleModal = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    // while a user chooses not to delete a model\r\n    const handlenNoBtn = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    //while a user chooses to delete a model\r\n    const handleYesBtn = () => {\r\n        console.log(\"filename is \" + props.modelName);\r\n        props.editModelDescription(props.modelName, briefInfo, sessionStorage.getItem('verifiedUsername'));\r\n        props.fetchModelFiles(sessionStorage.getItem('verifiedUsername'), false);\r\n        //props.fetchModelFiles()\r\n        setModal(!isModalOpen);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <IconButton aria-label=\"delete a model\" component=\"span\">\r\n                <CreateIcon onClick={toggleModal} />\r\n            </IconButton>\r\n\r\n            <Modal isOpen={isModalOpen} toggle={toggleModal} centered={true}>\r\n                <ModalHeader toggle={toggleModal}>Model Description</ModalHeader>\r\n                <ModalBody>\r\n                    <Row style={{paddingLeft: '2%', paddingRight: '2%'}}>\r\n                        <Input placeholder={'Model description'} ref={el} value={briefInfo} onChange={event => setBriefInfo(event.target.value)} />\r\n                    </Row>\r\n                    <Row style={{paddingTop: '5%'}}>\r\n                        <Col>\r\n                            <Button onClick={handleYesBtn} style={{ backgroundColor: '#378CC6' }}>Yes</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={handlenNoBtn}>No</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </ModalBody>\r\n            </Modal>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ModelBriefInfo;\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\SearchModelComponent.js",["395","396","397"],"import React, { useState, useRef } from 'react';\r\nimport { InputGroup, InputGroupText, InputGroupAddon, Input } from 'reactstrap';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\n\r\nfunction SearchModel(props) {\r\n    const [inputValue, setInput] = useState('');\r\n    const el = useRef(); // accesing input element\r\n\r\n    const handleChange = (event) => {\r\n        const userInput = event.target.value;\r\n        console.log(\"the user input: \", userInput);\r\n        setInput(event.target.value);\r\n    };\r\n\r\n    const handleClick = () => {\r\n        console.log(\"the current input value: \", inputValue);\r\n        props.queryModels(inputValue, sessionStorage.getItem('verifiedUsername'));\r\n    };\r\n\r\n    return (\r\n        <Col md={{ size: 7 }}>\r\n            <InputGroup style={{ width: '6' }} >\r\n                <Input ref={el} onChange={handleChange} placeholder=\"Search models here\" />\r\n                <InputGroupAddon addonType=\"append\">\r\n                    <Button onClick={handleClick} style={{ backgroundColor: '#378CC6' }}>Search</Button>\r\n                </InputGroupAddon>\r\n            </InputGroup>\r\n        </Col>\r\n \r\n    );\r\n}\r\n\r\nexport default SearchModel;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DeleteOneModel.js",["398","399","400","401"],"import { Modal, ModalHeader, ModalBody, Button, Row, Col} from 'reactstrap';\r\nimport React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\r\nimport { IconButton, TableRow } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nfunction DeleteOneModel(props) {\r\n    const [isModalOpen, setModal] = useState(false);\r\n\r\n    const toggleModal = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    // while a user chooses not to delete a model\r\n    const handlenNoBtn = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    //while a user chooses to delete a model\r\n    const handleYesBtn= () => {\r\n        console.log(\"filename is \" + props.deletedFileName);\r\n        console.log(typeof(props.deleteModel));\r\n        props.deleteModel(props.deletedFileName, sessionStorage.getItem('verifiedUsername'));\r\n        setModal(!isModalOpen);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <IconButton aria-label=\"delete a model\" component=\"span\">\r\n                <DeleteIcon onClick={toggleModal} />\r\n            </IconButton>\r\n\r\n            <Modal isOpen={isModalOpen} toggle={toggleModal} centered={true}>\r\n                <ModalHeader toggle={toggleModal}>Model Delete</ModalHeader>\r\n                <ModalBody>\r\n                    <p>Do you want to delete this model?</p>\r\n                    <Row>\r\n                        <Col>\r\n                            <Button onClick={handleYesBtn} style={{backgroundColor: '#378CC6'}}>Yes</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={handlenNoBtn}>No</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </ModalBody>\r\n            </Modal>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default DeleteOneModel;\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ModelUploadComponent.js",["402","403","404","405","406","407","408"],"import React, { useRef, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { IconButton, Modal } from '@material-ui/core';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport { Row, Col, Container, Progress } from 'reactstrap';\r\n\r\nfunction ModelUpload(props) {\r\n    const [dfile, setFile] = useState(''); // storing the uploaded file\r\n    const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n    const [currentFile, setCurrentFile] = useState(undefined);\r\n    const [progress, setProgress] = useState(0); // tracking the status of uploading\r\n    const [message, setMessage] = useState(\"Please upload your model\");\r\n    const el = useRef(); // accesing input element\r\n\r\n    // It is for get the uploaded file you selected\r\n    const handleChange = (event) => {\r\n        const file = event.target.files[0]; // accessing file\r\n        console.log(file);\r\n        setFile(file); // storing file\r\n        uploadFile(file);\r\n    }\r\n\r\n    const uploadFile = (file) => {\r\n        setProgress(0);\r\n\r\n        const formData = new FormData();\r\n        formData.append('username', file, sessionStorage.getItem('verifiedUsername'));\r\n        formData.append('file', file); // appending file\r\n        \r\n        console.log(\"formdata:\", formData);\r\n\r\n        setCurrentFile(file);\r\n\r\n        // 'props.uploadModel' is from Redux actionCreators, which is used to post the uploaded model to the backend server\r\n        props.uploadModel(formData, (event) => {\r\n            setProgress(Math.round((100 * event.loaded) / event.total));\r\n        }, sessionStorage.getItem('verifiedUsername')).then(() => {\r\n            setMessage(\"Uploaded successfully\");\r\n        })\r\n        .catch(() => {\r\n            setProgress(0);\r\n            setMessage(\"Could not upload the file!\");\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <div className=\"md-2\">\r\n                    {/*TODO: users may only be allowed to upload .dat => <input> needs to add accept=\".dat* ref={el} */}\r\n                    <input type=\"file\" className=\"file-upload\" id=\"file-upload\" ref={el} onChange={handleChange} />\r\n                    <label htmlFor=\"file-upload\">\r\n                        <IconButton aria-label=\"upload a model\" component=\"span\">\r\n                            <PublishIcon />\r\n                        </IconButton>\r\n                    </label>\r\n                </div>\r\n\r\n                <div>\r\n                    <div className=\"alert alert-light\" role=\"alert\">\r\n                        {message}\r\n                    </div>\r\n                </div>\r\n            </Row>\r\n\r\n\r\n            <div>\r\n                {currentFile && (<Progress animated value={progress} max=\"100\">{progress}%</Progress>)}\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ModelUpload;\r\n\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Modal\\DatasetUploading.js",["409","410","411","412","413","414","415","416"],"import { Modal, ModalHeader, ModalBody, Button, Row, Col} from 'reactstrap';\r\nimport React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\r\nimport { IconButton, TableRow } from '@material-ui/core';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport DatasetUpload from '../DatasetUploadComponent';\r\n\r\nfunction DatasetUploading(props) {\r\n    const [isModalOpen, setModal] = useState(false);\r\n\r\n    const toggleModal = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setModal(!isModalOpen);\r\n        props.fetchDatasetFiles(sessionStorage.getItem('verifiedUsername'));\r\n    }\r\n\r\n    // while a user chooses not to delete a dataset\r\n    const handlenNoBtn = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <IconButton aria-label=\"connect uploading\" component=\"span\">\r\n                <PublishIcon onClick={toggleModal} />\r\n            </IconButton>\r\n\r\n            <p style={{color: \"grey\"}}>Please upload your datasets here</p>\r\n\r\n            <Modal isOpen={isModalOpen} centered={true}>\r\n                <ModalHeader toggle={closeModal}>Upload your datasets</ModalHeader>\r\n                <ModalBody>\r\n                    <DatasetUpload uploadDataset={props.uploadDataset} fetchDatasetFiles={props.fetchDatasetFiles}/>\r\n                </ModalBody>\r\n            </Modal>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default DatasetUploading;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Modal\\ConnectionUploading.js",["417","418","419","420","421","422","423","424"],"import { Modal, ModalHeader, ModalBody, Button, Row, Col} from 'reactstrap';\r\nimport React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\r\nimport { IconButton, TableRow } from '@material-ui/core';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport ConnectionUploading from '../ConnectionUploading';\r\n\r\nfunction ConnectUploading(props) {\r\n    const [isModalOpen, setModal] = useState(false);\r\n\r\n    const toggleModal = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setModal(!isModalOpen);\r\n        props.fetchModelFiles(sessionStorage.getItem('verifiedUsername'));\r\n        props.fetchDatasetFiles(sessionStorage.getItem('verifiedUsername'));\r\n    }\r\n\r\n    // while a user chooses not to delete a dataset\r\n    const handlenNoBtn = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <IconButton aria-label=\"connect uploading\" component=\"span\">\r\n                <PublishIcon onClick={toggleModal} />\r\n            </IconButton>\r\n\r\n            <p style={{color: \"grey\"}}>Please upload your model and datasets here</p>\r\n\r\n            <Modal isOpen={isModalOpen} centered={true}>\r\n                <ModalHeader toggle={closeModal}>Upload your model and datasets</ModalHeader>\r\n                <ModalBody>\r\n                    <ConnectionUploading connectUploading={props.connectUploading}\r\n                            connectionFiles = {props.connectionFiles}\r\n                            clearConnectionFiles = {props.clearConnectionFiles}/>\r\n                </ModalBody>\r\n            </Modal>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ConnectUploading;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Modal\\BindModel.js",["425","426","427","428","429","430","431","432","433","434","435"],"import { Modal, ModalHeader, ModalBody, Button, Row, Col, Label, Input } from 'reactstrap';\r\nimport React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\r\nimport { IconButton, TableRow } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport SettingsEthernetIcon from '@material-ui/icons/SettingsEthernet';\r\nimport { Control, LocalForm, Form, Errors, actions } from 'react-redux-form';\r\n\r\nfunction ModelBinding(props) {\r\n    const [isModalOpen, setModal] = useState(false);\r\n\r\n    const toggleModal = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    // while a user chooses not to delete a dataset\r\n    const handlenNoBtn = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    const handleSubmit = (values) => {\r\n        const newValue = values.bindedModel.split(':');\r\n        console.log(newValue);\r\n        props.bindModel(newValue[0], sessionStorage.getItem('verifiedUsername'), props.datasetName);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <IconButton aria-label=\"delete a dataset\" component=\"span\">\r\n                <SettingsEthernetIcon onClick={toggleModal}/>\r\n            </IconButton>\r\n\r\n            <Modal isOpen={isModalOpen} toggle={toggleModal} centered={true}>\r\n                <ModalHeader toggle={toggleModal}>Bind Model</ModalHeader>\r\n                <ModalBody>\r\n                    <LocalForm onSubmit={(values) => handleSubmit(values)}>\r\n                        <Col className=\"form-group\">\r\n                            <Row>\r\n                                <Label md={10} style={{color: \"grey\"}}>Current binded model: {props.bindedModelName == \"\" ? \"no binded model\" : props.bindedModelName}</Label>\r\n                            </Row>\r\n                            <Row style={{paddingTop: '2%'}}>\r\n                                <Label md={4}>Select a model:</Label>\r\n                                <Col md={7}>\r\n                                    <Control.select model=\".bindedModel\" id=\"bindedModel\" name=\"bindedModel\"\r\n                                        className=\"form-control\">\r\n                                        <option>-----Please select a model-----</option>\r\n                                        {props.modelFiles.map( eachModel => <option>{`${eachModel.FileName}: ${eachModel.BriefInfo}`}</option>)}\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button type=\"submit\" onClick={handlenNoBtn}>Bind</Button>\r\n                        </Col>\r\n                    </LocalForm>\r\n                </ModalBody>\r\n            </Modal>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ModelBinding;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Modal\\AskBindedDatasets.js",["436","437","438","439","440","441"],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\others\\constants.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\others\\compareProps.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Modal\\BindedDatasets.js",["442","443","444","445","446","447","448","449","450","451","452","453"],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Modal\\downloadFile.js",["454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478"],"import GetAppIcon from '@material-ui/icons/GetApp';\r\nimport { Modal, ModalHeader, ModalBody, Button, Row, Col, Label, Input } from 'reactstrap';\r\nimport React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\r\nimport { IconButton, TableRow } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport SettingsEthernetIcon from '@material-ui/icons/SettingsEthernet';\r\nimport { Control, LocalForm, Form, Errors, actions } from 'react-redux-form';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuList from '@material-ui/core/MenuList';\r\n\r\nconst options = ['.txt', '.dat', '.csv'];\r\n\r\nfunction DownloadFile(props) {\r\n    //const [isModalOpen, setModal] = useState(false);\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const anchorRef = useRef(null);\r\n\r\n    const handleMenuItemClick = (event, index) => {\r\n        let filename = props.datasetName.split(\".\")[0] + options[index];\r\n        console.log(\"download filename is : \", filename);\r\n\r\n        downloading(props.datasetName, filename, options[index]);\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    // const toggleModal = () => {\r\n    //     setModal(!isModalOpen);\r\n    // };\r\n\r\n    // // while a user chooses not to delete a dataset\r\n    // const handlenNoBtn = () => {\r\n    //     setModal(!isModalOpen);\r\n    // };\r\n\r\n    const handleDownload = () => {\r\n        downloading();\r\n    };\r\n\r\n    const downloading = (datasetName, downloadName, downloadType) => {\r\n        props.downloadFile(datasetName, downloadName, downloadType, props.userName)\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n                <IconButton\r\n                    ref={anchorRef}\r\n                    aria-controls={open ? 'split-button-menu' : undefined}\r\n                    aria-expanded={open ? 'true' : undefined}\r\n                    aria-label=\"select merge strategy\"\r\n                    aria-haspopup=\"menu\"\r\n                    onClick={handleToggle}\r\n                >\r\n                     <GetAppIcon/>\r\n                </IconButton>\r\n\r\n            <Popper style={{zIndex: \"3\"}} open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n                        }}\r\n                    >\r\n                        <Paper>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList id=\"split-button-menu\">\r\n                                    {options.map((option, index) => (\r\n                                        <MenuItem\r\n                                            key={option}\r\n                                            onClick={(event) => handleMenuItemClick(event, index)}\r\n                                        >\r\n                                            {option}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n\r\n            {/* <IconButton aria-label=\"delete a dataset\" component=\"span\">\r\n                <GetAppIcon onClick={handleDownload} />\r\n            </IconButton> */}\r\n\r\n            {/* <Modal isOpen={isModalOpen} toggle={toggleModal} centered={true}>\r\n                <ModalHeader toggle={toggleModal}>Bind Model</ModalHeader>\r\n                <ModalBody>\r\n                    <LocalForm onSubmit={(values) => handleSubmit(values)}>\r\n                        <input type=\"file\" onChange={onChange} />\r\n                        <Col>\r\n                            <Button type=\"submit\" onClick={handlenNoBtn}>Bind</Button>\r\n                        </Col>\r\n                    </LocalForm>\r\n                </ModalBody>\r\n            </Modal> */}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default DownloadFile;\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\metadataEmpty.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Modal\\NeedUploading.js",["479","480","481","482"],"import { Modal, ModalHeader, ModalBody, Button, Row, Col} from 'reactstrap';\r\nimport React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\r\nimport { IconButton, TableRow } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nfunction NeedUploading(props) {\r\n    const [isModalOpen, setModal] = useState(false);\r\n\r\n    const toggleModal = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    // while a user chooses not to delete a dataset\r\n    const handlenNoBtn = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <IconButton aria-label=\"delete a dataset\" component=\"span\">\r\n                <DeleteIcon onClick={toggleModal} />\r\n            </IconButton>\r\n\r\n            <Modal isOpen={isModalOpen} toggle={toggleModal} centered={true}>\r\n                <ModalHeader toggle={toggleModal}>Dataset Delete</ModalHeader>\r\n                <ModalBody>\r\n                    <p>You have not selected any model. Please select one before uploading !</p>\r\n                    <Row>\r\n                        <Col>\r\n                            <Button onClick={handlenNoBtn}>Got it!</Button>\r\n                        </Col>          \r\n                    </Row>\r\n                </ModalBody>\r\n            </Modal>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default NeedUploading;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\ActionTypes.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\server\\baseUrl.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\server\\backendUrl.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\SearchAllDatasets.js",["483","484","485"],"import React, { useState, useRef } from 'react';\r\nimport { InputGroup, InputGroupText, InputGroupAddon, Input } from 'reactstrap';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\n\r\nfunction SearchAllDatasets(props) {\r\n    const [inputValue, setInput] = useState('');\r\n    const el = useRef(); // accesing input element\r\n\r\n    const handleChange = (event) => {\r\n        const userInput = event.target.value;\r\n        console.log(\"the user input: \", userInput);\r\n        setInput(event.target.value);\r\n    };\r\n\r\n    const handleClick = () => {\r\n        console.log(\"the current input value: \", inputValue);\r\n        props.queryDatasets(inputValue, sessionStorage.getItem('verifiedUsername'));\r\n    };\r\n\r\n    return (\r\n        <Col md={{ size: 7 }}>\r\n            <InputGroup style={{ width: '6' }} >\r\n                <Input ref={el} onChange={handleChange} placeholder=\"Search similar datasets here\" />\r\n                <InputGroupAddon addonType=\"append\">\r\n                    <Button onClick={handleClick} style={{ backgroundColor: '#FFD466', color: 'grey' }}>Search</Button>\r\n                </InputGroupAddon>\r\n            </InputGroup>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default SearchAllDatasets;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\AllModelsComponents.js",["486","487","488","489","490","491","492"],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\SearchAllModels.js",["493","494","495"],"import React, { useState, useRef } from 'react';\r\nimport { InputGroup, InputGroupText, InputGroupAddon, Input } from 'reactstrap';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\n\r\nfunction SearchAllModel(props) {\r\n    const [inputValue, setInput] = useState('');\r\n    const el = useRef(); // accesing input element\r\n\r\n    const handleChange = (event) => {\r\n        const userInput = event.target.value;\r\n        console.log(\"the user input: \", userInput);\r\n        setInput(event.target.value);\r\n    };\r\n\r\n    const handleClick = () => {\r\n        console.log(\"the current input value: \", inputValue);\r\n        props.queryModels(inputValue, sessionStorage.getItem('verifiedUsername'));\r\n    };\r\n\r\n    return (\r\n        <Col md={{ size: 7 }}>\r\n            <InputGroup style={{ width: '6' }} >\r\n                <Input ref={el} onChange={handleChange} placeholder=\"Search models here\" />\r\n                <InputGroupAddon addonType=\"append\">\r\n                    <Button onClick={handleClick} style={{ backgroundColor: '#FFD466', color: 'grey' }}>Search</Button>\r\n                </InputGroupAddon>\r\n            </InputGroup>\r\n        </Col>\r\n \r\n    );\r\n}\r\n\r\nexport default SearchAllModel;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\allModels.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Umatrix\\VisualisationComponent.js",["496","497","498","499","500","501","502","503","504","505","506","507","508","509"],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Umatrix\\Umatrix.js",["510","511","512","513","514"],"import React, { Component } from 'react';\r\nimport HexagonVector from './HexagonVector';\r\nimport ExpandedVector from './HexagonExpand';\r\nimport { getSOM } from '../../somJS/SOM';\r\nimport Color from 'color';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { MapInteractionCSS } from 'react-map-interaction';\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\nimport IndeterminateCheckBoxIcon from '@material-ui/icons/IndeterminateCheckBox';\r\nimport SettingsBackupRestoreIcon from '@material-ui/icons/SettingsBackupRestore';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport { IconButton, Button } from '@material-ui/core';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n\r\n/**\r\n * Generates the displayed U-Matrix.\r\n * The grid's coordinate system is inspired by https://www.redblobgames.com/grids/hexagons/. \r\n * Check the topics 'Offset coordinates' and 'Doubled coordinates'.\r\n * \r\n * Inspired by the above, there's two coordinate systems being simultaneously used in the code below:\r\n *  - The SOM coordinate system described by the SOM paper. The following variables refer to this coordinate system:\r\n *    - rowNum\r\n *    - colNum\r\n *    - xDim\r\n *    - yDim\r\n *  - The 'expanded' coordinate system which considers the intermediate hexagons between vectors, representing their distance.\r\n *    The following variables refer to this coordinate system:\r\n *    - expandedRowNum\r\n *    - expandedColNum\r\n *    - xExpandedDim\r\n *    - yExpandedDim\r\n */\r\nclass UMatrix extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hexagonGrid: null, // som\r\n            value: {\r\n                scale: 1,\r\n                translation: { x: 0, y: 0 }\r\n            },\r\n            minDropdownOpen: false,\r\n            maxDropdownOpen: false,\r\n            minEndColor: '#3F7EBE',\r\n            minColor: null,\r\n            maxColor: null,\r\n            displayRatio: 0.5\r\n        }\r\n        this.resetTransform = this.resetTransform.bind(this);\r\n        this.zoomIn = this.zoomIn.bind(this);\r\n        this.zoomOut = this.zoomOut.bind(this);\r\n        this.minToggle = this.minToggle.bind(this);\r\n        this.maxToggle = this.maxToggle.bind(this);\r\n    }\r\n\r\n    resetTransform() {\r\n        this.setState({\r\n            value: {\r\n                scale: 1,\r\n                translation: { x: 0, y: 0 }\r\n            }\r\n        });\r\n    }\r\n\r\n    zoomIn() {\r\n        this.setState(state => ({\r\n            value: {\r\n                scale: state.value.scale > 0.11 ? state.value.scale - 0.1 : state.value.scale,\r\n                translation: { x: 0, y: 0 }\r\n            }\r\n        }));\r\n    }\r\n\r\n    zoomOut() {\r\n        this.setState(state => ({\r\n            value: {\r\n                scale: state.value.scale + 0.1,\r\n                translation: { x: 0, y: 0 }\r\n            }\r\n        }));\r\n    }\r\n\r\n    minToggle() {\r\n        this.setState(state => ({\r\n            minDropdownOpen: !state.minDropdownOpen\r\n        }));\r\n    }\r\n\r\n    maxToggle() {\r\n        this.setState(state => ({\r\n            maxDropdownOpen: !state.maxDropdownOpen\r\n        }));\r\n    }\r\n\r\n    //Load the hexagon grid into memory\r\n    componentDidMount() {\r\n        getSOM(this.props.model).then(grid => this.setState({\r\n            hexagonGrid: grid,\r\n            maxDistance: grid.getMaxDistance(),\r\n            minDistance: grid.getMinDistance(),\r\n            xExpandedDim: grid.xDim * 4 - 1,\r\n            yExpandedDim: grid.yDim * 2 - 1,\r\n            // Hexagon dimensions explained here https://www.redblobgames.com/grids/hexagons/\r\n            hexagonWidth: Math.sqrt(3) * this.props.hexagonSize,\r\n            hexagonHeight: 1.5 * this.props.hexagonSize\r\n        }))\r\n    }\r\n\r\n    // Returns CSS to correctly place the hexagon in the grid\r\n    getHexagonCSS(expandedRowNum, expandedColNum) {\r\n        // CSS grid indices start from 1 instead of 0\r\n        return {\r\n            'grid-column-start': `${expandedColNum + 1}`,\r\n            'grid-column-end': `${expandedColNum + 2}`,\r\n            'grid-row-start': `${expandedRowNum + 1}`,\r\n            'grid-row-end': `${expandedRowNum + 2}`,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {JSX.Element} hexagon \r\n     * @param {number} expandedRowNum \r\n     * @param {number} expandedColNum \r\n     * @returns a div that captures the hexagon's position in the displayed/expanded hexagon grid\r\n     */\r\n    getGridItem(hexagon, expandedRowNum, expandedColNum) {\r\n        return <div key={expandedRowNum * this.state.xExpandedDim + expandedColNum}\r\n            style={this.getHexagonCSS(expandedRowNum, expandedColNum)}>\r\n            {hexagon}\r\n        </div>\r\n    }\r\n\r\n    /**\r\n     * Returns the coordinates of the hexagon (in the expanded space) representing the distance between\r\n     * the hexagon at (expandedColNum, expandedRowNum) and its neighbour\r\n     * @param {'bottom-left'|'bottom-right'|'right'} neighbour \r\n     * @param {number} expandedRowNum \r\n     * @param {number} expandedColNum \r\n     * @returns coordinates of the distance hexagon\r\n     */\r\n    getNeighbourCoordinates(neighbour, expandedRowNum, expandedColNum) {\r\n        switch (neighbour) {\r\n            case 'bottom-left':\r\n                expandedRowNum++\r\n                expandedColNum--\r\n                break\r\n            case 'bottom-right':\r\n                expandedRowNum++\r\n                expandedColNum++\r\n                break\r\n            case 'right':\r\n                expandedColNum += 2\r\n                break;\r\n            default:\r\n                throw new Error(`${neighbour} is not a valid neighbour`)\r\n        }\r\n        return [expandedColNum, expandedRowNum]\r\n    }\r\n\r\n    /**\r\n     * Generates the hexagon at position (colNum, rowNum) in the grid, representing a codebook vector.\r\n     * Also generates up to 3 hexagons to represent the vector's distances to three of its neighbours.\r\n     * Check out the Components tab in React's Devtools plugin to see the order of hexagon generation.\r\n     * @param {number} rowNum \r\n     * @param {number} colNum \r\n     * @returns a list of up to 4 JSX elements, \r\n     * \r\n     */\r\n    generateHexagonNeighbourhood(rowNum, colNum) {\r\n        const hexagon = this.state.hexagonGrid.grid[rowNum][colNum]\r\n        //console.log(\"Umatrix hexagon: \", hexagon.vector);\r\n        const vectorHexagon = <HexagonVector\r\n            size={this.state.hexagonWidth}\r\n            isVector={true}\r\n            distanceRatio={hexagon.getAverageDistance() / this.state.maxDistance}\r\n            minDistanceRatio={this.state.minDistance / this.state.maxDistance}\r\n            maxDistanceRatio={this.state.maxDistance / this.state.maxDistance}\r\n            averageDistance={hexagon.getAverageDistance()}\r\n            hexagon={hexagon}\r\n            label={hexagon.label}\r\n            minColor={this.state.minColor}\r\n            maxColor={this.state.maxColor}\r\n            displayRatio={this.state.displayRatio}\r\n        />\r\n\r\n        // For odd-indexed rows we add 2 * (rowNum % 2) to shift it forward\r\n        const expandedColNum = 4 * colNum + 2 * (rowNum % 2)\r\n        const expandedRowNum = 2 * rowNum\r\n\r\n        // First add the vector hexagon\r\n        const neighbourhood = [this.getGridItem(vectorHexagon, expandedRowNum, expandedColNum)]\r\n        // Then add the vector hexagon's neighbours (which are distance hexagons)\r\n        for (const neighbour of ['bottom-left', 'bottom-right', 'right']) {\r\n            if (hexagon.neighbours[neighbour]) {\r\n                const distanceHexagon = <ExpandedVector\r\n                    size={this.state.hexagonWidth}\r\n                    isVector={false}\r\n                    distanceRatio={hexagon.getDistance(neighbour) / this.state.maxDistance}\r\n                    betweenDistance={hexagon.getDistance(neighbour)}\r\n                    minDistanceRatio={this.state.minDistance / this.state.maxDistance}\r\n                    maxDistanceRatio={this.state.maxDistance / this.state.maxDistance}\r\n                    minColor={this.state.minColor}\r\n                    maxColor={this.state.maxColor}\r\n                    displayRatio={this.state.displayRatio}\r\n                />\r\n                const [x, y] = this.getNeighbourCoordinates(neighbour, expandedRowNum, expandedColNum)\r\n                neighbourhood.push(this.getGridItem(distanceHexagon, y, x))\r\n            }\r\n        }\r\n\r\n        return neighbourhood\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.hexagonGrid) {\r\n            return null\r\n        }\r\n\r\n        const gridCssStyle = {\r\n            'display': 'grid',\r\n            'grid-template-columns': `repeat(${this.state.xExpandedDim}, ${0.5 * this.state.hexagonWidth}px)`,\r\n            'grid-template-rows': `repeat(${this.state.yExpandedDim}, ${this.state.hexagonHeight}px)`,\r\n            'height': '100vh'\r\n        }\r\n\r\n        const legendCssStyle = {\r\n            'background': `linear-gradient(90deg, ${this.state.minColor == null ? '#FCFDFE' : this.state.minColor} 0%, \r\n                ${this.state.minColor == null && this.state.maxColor == null ? '#3D7AB7' : this.state.minColor} 50%,\r\n                 ${this.state.maxColor == null ? '#1E3B59' : this.state.maxColor} 100%)`\r\n        }\r\n\r\n        let gridItems = []\r\n        for (let rowNum = 0; rowNum < this.state.hexagonGrid.yDim; rowNum++) {\r\n            for (let colNum = 0; colNum < this.state.hexagonGrid.xDim; colNum++) {\r\n                const neighbourhood = this.generateHexagonNeighbourhood(rowNum, colNum)\r\n                gridItems = gridItems.concat(neighbourhood)\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <ButtonDropdown isOpen={this.state.minDropdownOpen} toggle={this.minToggle}>\r\n                        <DropdownToggle caret size=\"sm\" style={{ backgroundColor: \"white\", color: \"grey\", border: \"none\" }}>\r\n                            Minimum distance: {this.state.minDistance.toFixed(4)}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                            <DropdownItem header>Color for minimum distance: </DropdownItem>\r\n                            <DropdownItem>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#ffffff' })}><FiberManualRecordIcon style={{ color: '#ffffff' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#000000' })}><FiberManualRecordIcon style={{ color: '#000000' }} /></IconButton>\r\n                            </DropdownItem>\r\n                            <DropdownItem>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#E6B8AF' })}><FiberManualRecordIcon style={{ color: '#E6B8AF' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#F4CCCC' })}><FiberManualRecordIcon style={{ color: '#F4CCCC' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#FCE5CD' })}><FiberManualRecordIcon style={{ color: '#FCE5CD' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#FFF2CC' })}><FiberManualRecordIcon style={{ color: '#FFF2CC' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#D9EAD3' })}><FiberManualRecordIcon style={{ color: '#D9EAD3' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#D0E0E3' })}><FiberManualRecordIcon style={{ color: '#D0E0E3' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#C9DAF8' })}><FiberManualRecordIcon style={{ color: '#C9DAF8' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#CFE2F3' })}><FiberManualRecordIcon style={{ color: '#CFE2F3' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#D9D2E9' })}><FiberManualRecordIcon style={{ color: '#D9D2E9' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#EAD1DC' })}><FiberManualRecordIcon style={{ color: '#EAD1DC' }} /></IconButton>\r\n                            </DropdownItem>\r\n                            <DropdownItem>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#DD7E6B' })}><FiberManualRecordIcon style={{ color: '#DD7E6B' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#EA9999' })}><FiberManualRecordIcon style={{ color: '#EA9999' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#F9CB9C' })}><FiberManualRecordIcon style={{ color: '#F9CB9C' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#FFE599' })}><FiberManualRecordIcon style={{ color: '#FFE599' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#B6D7A8' })}><FiberManualRecordIcon style={{ color: '#B6D7A8' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#A2C4C9' })}><FiberManualRecordIcon style={{ color: '#A2C4C9' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#A4C2F4' })}><FiberManualRecordIcon style={{ color: '#A4C2F4' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#9FC5E8' })}><FiberManualRecordIcon style={{ color: '#9FC5E8' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#B4A7D6' })}><FiberManualRecordIcon style={{ color: '#B4A7D6' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#D5A6BD' })}><FiberManualRecordIcon style={{ color: '#D5A6BD' }} /></IconButton>\r\n                            </DropdownItem>\r\n                            <DropdownItem>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#A61C00' })}><FiberManualRecordIcon style={{ color: '#A61C00' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#CC0000' })}><FiberManualRecordIcon style={{ color: '#CC0000' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#E69138' })}><FiberManualRecordIcon style={{ color: '#E69138' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#F1C232' })}><FiberManualRecordIcon style={{ color: '#F1C232' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#6AA84F' })}><FiberManualRecordIcon style={{ color: '#6AA84F' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#45818E' })}><FiberManualRecordIcon style={{ color: '#45818E' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#3C78D8' })}><FiberManualRecordIcon style={{ color: '#3C78D8' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#3D85C6' })}><FiberManualRecordIcon style={{ color: '#3D85C6' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#674EA7' })}><FiberManualRecordIcon style={{ color: '#674EA7' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#A64D79' })}><FiberManualRecordIcon style={{ color: '#A64D79' }} /></IconButton>\r\n                            </DropdownItem>\r\n                            <DropdownItem>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#85200C' })}><FiberManualRecordIcon style={{ color: '#85200C' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#990000' })}><FiberManualRecordIcon style={{ color: '#990000' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#B45F06' })}><FiberManualRecordIcon style={{ color: '#B45F06' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#BF9000' })}><FiberManualRecordIcon style={{ color: '#BF9000' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#38761D' })}><FiberManualRecordIcon style={{ color: '#38761D' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#134F5C' })}><FiberManualRecordIcon style={{ color: '#134F5C' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#1155CC' })}><FiberManualRecordIcon style={{ color: '#1155CC' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#0B5394' })}><FiberManualRecordIcon style={{ color: '#0B5394' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#351C75' })}><FiberManualRecordIcon style={{ color: '#351C75' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#741B47' })}><FiberManualRecordIcon style={{ color: '#741B47' }} /></IconButton>\r\n                            </DropdownItem>\r\n                            <DropdownItem>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#980000' })}><FiberManualRecordIcon style={{ color: '#980000' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#FF0000' })}><FiberManualRecordIcon style={{ color: '#FF0000' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#FF9900' })}><FiberManualRecordIcon style={{ color: '#FF9900' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#FFFF00' })}><FiberManualRecordIcon style={{ color: '#FFFF00' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#00FF00' })}><FiberManualRecordIcon style={{ color: '#00FF00' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#00FFFF' })}><FiberManualRecordIcon style={{ color: '#00FFFF' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#4A86E8' })}><FiberManualRecordIcon style={{ color: '#4A86E8' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#0000FF' })}><FiberManualRecordIcon style={{ color: '#0000FF' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#9900FF' })}><FiberManualRecordIcon style={{ color: '#9900FF' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ minColor: '#FF00FF' })}><FiberManualRecordIcon style={{ color: '#FF00FF' }} /></IconButton>\r\n                            </DropdownItem>\r\n                        </DropdownMenu>\r\n                    </ButtonDropdown>\r\n\r\n                    <div>\r\n                        <IconButton onClick={() => this.setState({ minColor: null, maxColor: null, minEndColor: '#3F7EBE', displayRatio: 0.5 })}><AutorenewIcon /></IconButton>\r\n                    </div>\r\n\r\n                    <ButtonDropdown isOpen={this.state.maxDropdownOpen} toggle={this.maxToggle}>\r\n                        <DropdownToggle caret size=\"sm\" style={{ backgroundColor: \"white\", color: \"grey\", border: \"none\" }}>\r\n                            Maximum distance: {this.state.maxDistance.toFixed(4)}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                            <DropdownItem header>Color for maximum distance:</DropdownItem>\r\n                            <DropdownItem>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#ffffff' })}><FiberManualRecordIcon style={{ color: '#ffffff' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#000000' })}><FiberManualRecordIcon style={{ color: '#000000' }} /></IconButton>\r\n                            </DropdownItem>\r\n                            <DropdownItem>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#E6B8AF' })}><FiberManualRecordIcon style={{ color: '#E6B8AF' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#F4CCCC' })}><FiberManualRecordIcon style={{ color: '#F4CCCC' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#FCE5CD' })}><FiberManualRecordIcon style={{ color: '#FCE5CD' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#FFF2CC' })}><FiberManualRecordIcon style={{ color: '#FFF2CC' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#D9EAD3' })}><FiberManualRecordIcon style={{ color: '#D9EAD3' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#D0E0E3' })}><FiberManualRecordIcon style={{ color: '#D0E0E3' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#C9DAF8' })}><FiberManualRecordIcon style={{ color: '#C9DAF8' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#CFE2F3' })}><FiberManualRecordIcon style={{ color: '#CFE2F3' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#D9D2E9' })}><FiberManualRecordIcon style={{ color: '#D9D2E9' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#EAD1DC' })}><FiberManualRecordIcon style={{ color: '#EAD1DC' }} /></IconButton>\r\n                            </DropdownItem>\r\n                            <DropdownItem>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#DD7E6B' })}><FiberManualRecordIcon style={{ color: '#DD7E6B' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#EA9999' })}><FiberManualRecordIcon style={{ color: '#EA9999' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#F9CB9C' })}><FiberManualRecordIcon style={{ color: '#F9CB9C' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#FFE599' })}><FiberManualRecordIcon style={{ color: '#FFE599' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxolor: '#B6D7A8' })}><FiberManualRecordIcon style={{ color: '#B6D7A8' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#A2C4C9' })}><FiberManualRecordIcon style={{ color: '#A2C4C9' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#A4C2F4' })}><FiberManualRecordIcon style={{ color: '#A4C2F4' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#9FC5E8' })}><FiberManualRecordIcon style={{ color: '#9FC5E8' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#B4A7D6' })}><FiberManualRecordIcon style={{ color: '#B4A7D6' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#D5A6BD' })}><FiberManualRecordIcon style={{ color: '#D5A6BD' }} /></IconButton>\r\n                            </DropdownItem>\r\n                            <DropdownItem>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#A61C00' })}><FiberManualRecordIcon style={{ color: '#A61C00' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#CC0000' })}><FiberManualRecordIcon style={{ color: '#CC0000' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#E69138' })}><FiberManualRecordIcon style={{ color: '#E69138' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#F1C232' })}><FiberManualRecordIcon style={{ color: '#F1C232' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#6AA84F' })}><FiberManualRecordIcon style={{ color: '#6AA84F' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#45818E' })}><FiberManualRecordIcon style={{ color: '#45818E' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#3C78D8' })}><FiberManualRecordIcon style={{ color: '#3C78D8' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#3D85C6' })}><FiberManualRecordIcon style={{ color: '#3D85C6' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#674EA7' })}><FiberManualRecordIcon style={{ color: '#674EA7' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#A64D79' })}><FiberManualRecordIcon style={{ color: '#A64D79' }} /></IconButton>\r\n                            </DropdownItem>\r\n                            <DropdownItem>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#85200C' })}><FiberManualRecordIcon style={{ color: '#85200C' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#990000' })}><FiberManualRecordIcon style={{ color: '#990000' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#B45F06' })}><FiberManualRecordIcon style={{ color: '#B45F06' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#BF9000' })}><FiberManualRecordIcon style={{ color: '#BF9000' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#38761D' })}><FiberManualRecordIcon style={{ color: '#38761D' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#134F5C' })}><FiberManualRecordIcon style={{ color: '#134F5C' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#1155CC' })}><FiberManualRecordIcon style={{ color: '#1155CC' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#0B5394' })}><FiberManualRecordIcon style={{ color: '#0B5394' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#351C75' })}><FiberManualRecordIcon style={{ color: '#351C75' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#741B47' })}><FiberManualRecordIcon style={{ color: '#741B47' }} /></IconButton>\r\n                            </DropdownItem>\r\n                            <DropdownItem>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#980000' })}><FiberManualRecordIcon style={{ color: '#980000' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#FF0000' })}><FiberManualRecordIcon style={{ color: '#FF0000' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#FF9900' })}><FiberManualRecordIcon style={{ color: '#FF9900' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#FFFF00' })}><FiberManualRecordIcon style={{ color: '#FFFF00' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#00FF00' })}><FiberManualRecordIcon style={{ color: '#00FF00' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#00FFFF' })}><FiberManualRecordIcon style={{ color: '#00FFFF' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#4A86E8' })}><FiberManualRecordIcon style={{ color: '#4A86E8' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#0000FF' })}><FiberManualRecordIcon style={{ color: '#0000FF' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#9900FF' })}><FiberManualRecordIcon style={{ color: '#9900FF' }} /></IconButton>\r\n                                <IconButton size=\"small\" onClick={() => this.setState({ maxColor: '#FF00FF' })}><FiberManualRecordIcon style={{ color: '#FF00FF' }} /></IconButton>\r\n                            </DropdownItem>\r\n                        </DropdownMenu>\r\n                    </ButtonDropdown>\r\n                </div>\r\n\r\n                <Row style={legendCssStyle}>\r\n                    <p></p>\r\n                </Row>\r\n\r\n                <div>\r\n                    <React.Fragment>\r\n                        <Button style={{ color: \"grey\" }}>Zoom: </Button>\r\n                        <IconButton onClick={this.zoomOut}><AddBoxIcon /></IconButton>\r\n                        <IconButton onClick={this.zoomIn}><IndeterminateCheckBoxIcon /></IconButton>\r\n                        <IconButton onClick={this.resetTransform}>< SettingsBackupRestoreIcon /></IconButton>\r\n                    </React.Fragment>\r\n                    <MapInteractionCSS\r\n                        value={this.state.value}\r\n                        onChange={(value) => this.setState({ value })}>\r\n                        <div style={gridCssStyle}>\r\n                            {gridItems}\r\n                        </div>\r\n                    </MapInteractionCSS>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UMatrix;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Umatrix\\HexagonExpand.js",["515"],"import React, { useState } from 'react';\r\nimport { Card, CardTitle, CardBody, Row, Col } from 'reactstrap';\r\nimport Color from 'color';\r\nimport { IconButton } from '@material-ui/core';\r\n\r\n/**\r\n * @param {*} props \r\n * @returns A single display hexagon in the U-Matrix\r\n */\r\nfunction ExpandedHexagon(props) {\r\n\r\n    // let color;\r\n    // switch (props.distanceRatio) {\r\n    //   case props.minDistanceRatio:\r\n    //     color = props.minColor == null ? Color('#FCFDFE').darken(props.minDistanceRatio) : Color(props.minColor).darken(props.minDistanceRatio);\r\n    //   case props.maxDistanceRatio:\r\n    //     color = props.maxColor == null ? Color('#FCFDFE').darken(props.maxDistanceRatio) : Color(props.maxColor).darken(props.minDistanceRatio);\r\n    //   default:\r\n    //     color = Color('#FFF2CC').darken(props.distanceRatio);\r\n    // }\r\n    let color;\r\n    if (props.minColor == null && props.maxColor == null) {\r\n        color = Color('#FCFDFE').darken(props.distanceRatio)\r\n    }\r\n    else {\r\n        let minDistanceColor = props.minColor == null ? '#FCFDFE' : props.minColor;\r\n        let maxDistanceColor = props.maxColor == null ? '#1E3B59' : props.maxColor;\r\n        color = Color(minDistanceColor).mix(Color(maxDistanceColor), props.distanceRatio);\r\n    }\r\n\r\n    const [isShown, setIsShown] = useState(false);\r\n\r\n    let centre;\r\n    if (props.isVector) {\r\n        centre = <circle cx=\"8\" cy=\"8\" r=\"1.5\"\r\n            fill={props.distanceRatio > 0.5 ? \"white\" : \"black\"} />\r\n    } else {\r\n        centre = null\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <IconButton style={{ zIndex: \"1\" }}\r\n                onMouseEnter={() => setIsShown(true)}\r\n                onMouseLeave={() => setIsShown(false)}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width={props.size}\r\n                    class=\"bi bi-hexagon-fill\"\r\n                    viewBox=\"0 0 16 16\">\r\n                    <path fill={color} fill-rule=\"evenodd\"\r\n                        d=\"M8.5.134a1 1 0 0 0-1 0l-6 3.577a1 1 0 0 0-.5.866v6.846a1 1 0 0 0 .5.866l6 3.577a1 1 0 0 0 1 0l6-3.577a1 1 0 0 0 .5-.866V4.577a1 1 0 0 0-.5-.866L8.5.134z\"\r\n                    />\r\n                    {centre}\r\n                </svg>\r\n            </IconButton>\r\n\r\n            <Col>\r\n                {isShown && (\r\n                    <Card style={{ backgroundColor: \"#f8f58d\", zIndex: \"2\", width: \"27vw\", height: \"auto\" }}>\r\n                        <CardBody>\r\n                            <div><strong>distance between two vectors: </strong></div>\r\n                            <div>{props.betweenDistance}</div>\r\n                            <br />\r\n                            {props.label && (<div><strong>Codebook Label: </strong>{props.label}</div>)}\r\n                        </CardBody>\r\n                    </Card>\r\n                )}\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default ExpandedHexagon;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Umatrix\\HexagonVector.js",["516"],"import React, { useState } from 'react';\r\nimport { Card, CardTitle, CardBody, Row, Col } from 'reactstrap';\r\nimport Color from 'color';\r\nimport { IconButton } from '@material-ui/core';\r\n\r\n/**\r\n * @param {*} props \r\n * @returns A single display hexagon in the U-Matrix\r\n */\r\nfunction HexagonVector(props) {\r\n\r\n    let color;\r\n    if (props.minColor == null && props.maxColor == null) {\r\n        color = Color('#FCFDFE').darken(props.distanceRatio)\r\n    }\r\n    else {\r\n        let minDistanceColor = props.minColor == null ? '#FCFDFE' : props.minColor;\r\n        let maxDistanceColor = props.maxColor == null ? '#1E3B59' : props.maxColor;\r\n        color = Color(minDistanceColor).mix(Color(maxDistanceColor), props.distanceRatio);\r\n    }\r\n\r\n    const [isShown, setIsShown] = useState(false);\r\n\r\n    let centre;\r\n    if (props.isVector) {\r\n        if (props.label) {\r\n            //console.log(\"HexagonVector label: \", props.label);\r\n            centre = <rect x=\"6\" y=\"6\" width=\"4\" height=\"4\"\r\n                fill={props.distanceRatio > 0.5 ? \"white\" : \"yellow\"} />\r\n        }\r\n        else {\r\n            centre = <circle cx=\"8\" cy=\"8\" r=\"1.5\"\r\n                fill={props.distanceRatio > 0.5 ? \"white\" : \"black\"} />\r\n        }\r\n\r\n    } else {\r\n        centre = null\r\n    }\r\n\r\n    const vector = (hexagon) => {\r\n        return hexagon.map((elem, index) => {\r\n            if (index < hexagon.length - 1) {\r\n                return String(elem) + \" | \";\r\n            }\r\n            else {\r\n                return String(elem);\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <IconButton style={{ zIndex: \"1\" }}\r\n                onMouseEnter={() => setIsShown(true)}\r\n                onMouseLeave={() => setIsShown(false)}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width={props.size}\r\n                    class=\"bi bi-hexagon-fill\"\r\n                    viewBox=\"0 0 16 16\">\r\n                    <path fill={color} fill-rule=\"evenodd\"\r\n                        d=\"M8.5.134a1 1 0 0 0-1 0l-6 3.577a1 1 0 0 0-.5.866v6.846a1 1 0 0 0 .5.866l6 3.577a1 1 0 0 0 1 0l6-3.577a1 1 0 0 0 .5-.866V4.577a1 1 0 0 0-.5-.866L8.5.134z\"\r\n                    />\r\n                    {centre}\r\n                </svg>\r\n            </IconButton>\r\n\r\n            <Col>\r\n                {isShown && (\r\n                    <Card style={{ backgroundColor: \"white\", zIndex: \"2\", width: \"27vw\", height: \"auto\" }}>\r\n                        <CardBody>\r\n                            {props.label && (<div><strong>Codebook Label: </strong>{props.label}</div>)}\r\n                            <br />\r\n                            <div><strong>Average distance: </strong></div>\r\n                            <div>{props.averageDistance}</div>\r\n                            <div>-------------------------------------------</div>\r\n                            <div><strong>Codebook vector: </strong></div>\r\n                            {vector(props.hexagon.vector)}<br />\r\n                        </CardBody>\r\n                    </Card>\r\n                )}\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default HexagonVector;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\somJS\\SOM.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Modal\\AllBindedDataset.js",["517","518","519","520","521","522","523","524","525","526","527","528","529"],{"ruleId":"530","severity":1,"message":"531","line":3,"column":8,"nodeType":"532","messageId":"533","endLine":3,"endColumn":13},{"ruleId":"534","replacedBy":"535"},{"ruleId":"536","replacedBy":"537"},{"ruleId":"530","severity":1,"message":"538","line":3,"column":39,"nodeType":"532","messageId":"533","endLine":3,"endColumn":47},{"ruleId":"530","severity":1,"message":"539","line":8,"column":8,"nodeType":"532","messageId":"533","endLine":8,"endColumn":16},{"ruleId":"530","severity":1,"message":"540","line":9,"column":8,"nodeType":"532","messageId":"533","endLine":9,"endColumn":16},{"ruleId":"530","severity":1,"message":"541","line":10,"column":8,"nodeType":"532","messageId":"533","endLine":10,"endColumn":21},{"ruleId":"530","severity":1,"message":"542","line":12,"column":8,"nodeType":"532","messageId":"533","endLine":12,"endColumn":14},{"ruleId":"530","severity":1,"message":"543","line":13,"column":9,"nodeType":"532","messageId":"533","endLine":13,"endColumn":12},{"ruleId":"530","severity":1,"message":"544","line":1,"column":17,"nodeType":"532","messageId":"533","endLine":1,"endColumn":30},{"ruleId":"530","severity":1,"message":"545","line":1,"column":43,"nodeType":"532","messageId":"533","endLine":1,"endColumn":54},{"ruleId":"530","severity":1,"message":"546","line":4,"column":10,"nodeType":"532","messageId":"533","endLine":4,"endColumn":19},{"ruleId":"530","severity":1,"message":"547","line":5,"column":10,"nodeType":"532","messageId":"533","endLine":5,"endColumn":17},{"ruleId":"548","severity":1,"message":"549","line":147,"column":33,"nodeType":"550","messageId":"551","endLine":147,"endColumn":35},{"ruleId":"530","severity":1,"message":"552","line":193,"column":17,"nodeType":"532","messageId":"533","endLine":193,"endColumn":32},{"ruleId":"548","severity":1,"message":"549","line":193,"column":140,"nodeType":"550","messageId":"551","endLine":193,"endColumn":142},{"ruleId":"548","severity":1,"message":"549","line":213,"column":136,"nodeType":"550","messageId":"551","endLine":213,"endColumn":138},{"ruleId":"548","severity":1,"message":"549","line":235,"column":124,"nodeType":"550","messageId":"551","endLine":235,"endColumn":126},{"ruleId":"553","severity":1,"message":"554","line":245,"column":21,"nodeType":"555","messageId":"556","endLine":245,"endColumn":73},{"ruleId":"548","severity":1,"message":"549","line":255,"column":124,"nodeType":"550","messageId":"551","endLine":255,"endColumn":126},{"ruleId":"553","severity":1,"message":"554","line":266,"column":21,"nodeType":"555","messageId":"556","endLine":266,"endColumn":73},{"ruleId":"548","severity":1,"message":"549","line":277,"column":131,"nodeType":"550","messageId":"551","endLine":277,"endColumn":133},{"ruleId":"530","severity":1,"message":"557","line":2,"column":10,"nodeType":"532","messageId":"533","endLine":2,"endColumn":14},{"ruleId":"530","severity":1,"message":"558","line":2,"column":16,"nodeType":"532","messageId":"533","endLine":2,"endColumn":24},{"ruleId":"530","severity":1,"message":"559","line":5,"column":22,"nodeType":"532","messageId":"533","endLine":5,"endColumn":27},{"ruleId":"530","severity":1,"message":"560","line":5,"column":29,"nodeType":"532","messageId":"533","endLine":5,"endColumn":37},{"ruleId":"530","severity":1,"message":"561","line":6,"column":8,"nodeType":"532","messageId":"533","endLine":6,"endColumn":18},{"ruleId":"530","severity":1,"message":"562","line":12,"column":8,"nodeType":"532","messageId":"533","endLine":12,"endColumn":21},{"ruleId":"530","severity":1,"message":"563","line":17,"column":8,"nodeType":"532","messageId":"533","endLine":17,"endColumn":20},{"ruleId":"530","severity":1,"message":"564","line":25,"column":10,"nodeType":"532","messageId":"533","endLine":25,"endColumn":16},{"ruleId":"530","severity":1,"message":"565","line":1,"column":16,"nodeType":"532","messageId":"533","endLine":1,"endColumn":25},{"ruleId":"530","severity":1,"message":"566","line":3,"column":22,"nodeType":"532","messageId":"533","endLine":3,"endColumn":32},{"ruleId":"530","severity":1,"message":"567","line":17,"column":32,"nodeType":"532","messageId":"533","endLine":17,"endColumn":43},{"ruleId":"530","severity":1,"message":"565","line":1,"column":35,"nodeType":"532","messageId":"533","endLine":1,"endColumn":44},{"ruleId":"530","severity":1,"message":"568","line":2,"column":39,"nodeType":"532","messageId":"533","endLine":2,"endColumn":44},{"ruleId":"530","severity":1,"message":"569","line":3,"column":10,"nodeType":"532","messageId":"533","endLine":3,"endColumn":20},{"ruleId":"530","severity":1,"message":"570","line":3,"column":22,"nodeType":"532","messageId":"533","endLine":3,"endColumn":37},{"ruleId":"530","severity":1,"message":"571","line":3,"column":39,"nodeType":"532","messageId":"533","endLine":3,"endColumn":44},{"ruleId":"530","severity":1,"message":"557","line":4,"column":10,"nodeType":"532","messageId":"533","endLine":4,"endColumn":14},{"ruleId":"530","severity":1,"message":"572","line":4,"column":16,"nodeType":"532","messageId":"533","endLine":4,"endColumn":24},{"ruleId":"530","severity":1,"message":"558","line":4,"column":26,"nodeType":"532","messageId":"533","endLine":4,"endColumn":34},{"ruleId":"530","severity":1,"message":"573","line":4,"column":36,"nodeType":"532","messageId":"533","endLine":4,"endColumn":44},{"ruleId":"530","severity":1,"message":"574","line":4,"column":46,"nodeType":"532","messageId":"533","endLine":4,"endColumn":55},{"ruleId":"530","severity":1,"message":"575","line":4,"column":57,"nodeType":"532","messageId":"533","endLine":4,"endColumn":69},{"ruleId":"530","severity":1,"message":"576","line":5,"column":30,"nodeType":"532","messageId":"533","endLine":5,"endColumn":34},{"ruleId":"530","severity":1,"message":"577","line":5,"column":36,"nodeType":"532","messageId":"533","endLine":5,"endColumn":42},{"ruleId":"530","severity":1,"message":"547","line":5,"column":44,"nodeType":"532","messageId":"533","endLine":5,"endColumn":51},{"ruleId":"530","severity":1,"message":"578","line":7,"column":8,"nodeType":"532","messageId":"533","endLine":7,"endColumn":15},{"ruleId":"530","severity":1,"message":"579","line":8,"column":10,"nodeType":"532","messageId":"533","endLine":8,"endColumn":16},{"ruleId":"530","severity":1,"message":"580","line":12,"column":8,"nodeType":"532","messageId":"533","endLine":12,"endColumn":22},{"ruleId":"530","severity":1,"message":"559","line":19,"column":30,"nodeType":"532","messageId":"533","endLine":19,"endColumn":35},{"ruleId":"530","severity":1,"message":"581","line":48,"column":11,"nodeType":"532","messageId":"533","endLine":48,"endColumn":13},{"ruleId":"582","severity":1,"message":"583","line":114,"column":33,"nodeType":"584","messageId":"585","endLine":116,"endColumn":62},{"ruleId":"530","severity":1,"message":"586","line":2,"column":10,"nodeType":"532","messageId":"533","endLine":2,"endColumn":21},{"ruleId":"530","severity":1,"message":"587","line":2,"column":22,"nodeType":"532","messageId":"533","endLine":2,"endColumn":28},{"ruleId":"530","severity":1,"message":"588","line":6,"column":8,"nodeType":"532","messageId":"533","endLine":6,"endColumn":12},{"ruleId":"530","severity":1,"message":"589","line":9,"column":9,"nodeType":"532","messageId":"533","endLine":9,"endColumn":19},{"ruleId":"530","severity":1,"message":"590","line":15,"column":11,"nodeType":"532","messageId":"533","endLine":15,"endColumn":21},{"ruleId":"530","severity":1,"message":"567","line":19,"column":32,"nodeType":"532","messageId":"533","endLine":19,"endColumn":43},{"ruleId":"530","severity":1,"message":"569","line":2,"column":10,"nodeType":"532","messageId":"533","endLine":2,"endColumn":20},{"ruleId":"530","severity":1,"message":"559","line":2,"column":22,"nodeType":"532","messageId":"533","endLine":2,"endColumn":27},{"ruleId":"530","severity":1,"message":"567","line":2,"column":29,"nodeType":"532","messageId":"533","endLine":2,"endColumn":40},{"ruleId":"530","severity":1,"message":"591","line":2,"column":42,"nodeType":"532","messageId":"533","endLine":2,"endColumn":51},{"ruleId":"530","severity":1,"message":"570","line":2,"column":53,"nodeType":"532","messageId":"533","endLine":2,"endColumn":68},{"ruleId":"530","severity":1,"message":"571","line":2,"column":70,"nodeType":"532","messageId":"533","endLine":2,"endColumn":75},{"ruleId":"530","severity":1,"message":"592","line":4,"column":10,"nodeType":"532","messageId":"533","endLine":4,"endColumn":16},{"ruleId":"530","severity":1,"message":"561","line":7,"column":8,"nodeType":"532","messageId":"533","endLine":7,"endColumn":18},{"ruleId":"530","severity":1,"message":"593","line":8,"column":8,"nodeType":"532","messageId":"533","endLine":8,"endColumn":18},{"ruleId":"530","severity":1,"message":"594","line":11,"column":8,"nodeType":"532","messageId":"533","endLine":11,"endColumn":28},{"ruleId":"530","severity":1,"message":"564","line":23,"column":10,"nodeType":"532","messageId":"533","endLine":23,"endColumn":16},{"ruleId":"530","severity":1,"message":"595","line":1,"column":16,"nodeType":"532","messageId":"533","endLine":1,"endColumn":25},{"ruleId":"530","severity":1,"message":"557","line":2,"column":10,"nodeType":"532","messageId":"533","endLine":2,"endColumn":14},{"ruleId":"530","severity":1,"message":"596","line":2,"column":16,"nodeType":"532","messageId":"533","endLine":2,"endColumn":23},{"ruleId":"530","severity":1,"message":"546","line":3,"column":10,"nodeType":"532","messageId":"533","endLine":3,"endColumn":19},{"ruleId":"530","severity":1,"message":"588","line":6,"column":10,"nodeType":"532","messageId":"533","endLine":6,"endColumn":14},{"ruleId":"597","severity":1,"message":"598","line":18,"column":7,"nodeType":"599","endLine":18,"endColumn":9,"suggestions":"600"},{"ruleId":"530","severity":1,"message":"601","line":1,"column":17,"nodeType":"532","messageId":"533","endLine":1,"endColumn":23},{"ruleId":"530","severity":1,"message":"602","line":1,"column":46,"nodeType":"532","messageId":"533","endLine":1,"endColumn":61},{"ruleId":"530","severity":1,"message":"576","line":3,"column":30,"nodeType":"532","messageId":"533","endLine":3,"endColumn":34},{"ruleId":"530","severity":1,"message":"577","line":3,"column":36,"nodeType":"532","messageId":"533","endLine":3,"endColumn":42},{"ruleId":"530","severity":1,"message":"588","line":7,"column":10,"nodeType":"532","messageId":"533","endLine":7,"endColumn":14},{"ruleId":"530","severity":1,"message":"559","line":8,"column":30,"nodeType":"532","messageId":"533","endLine":8,"endColumn":35},{"ruleId":"530","severity":1,"message":"603","line":23,"column":8,"nodeType":"532","messageId":"533","endLine":23,"endColumn":23},{"ruleId":"604","severity":1,"message":"605","line":59,"column":93,"nodeType":"532","messageId":"606","endLine":59,"endColumn":97},{"ruleId":"530","severity":1,"message":"607","line":92,"column":11,"nodeType":"532","messageId":"533","endLine":92,"endColumn":20},{"ruleId":"548","severity":1,"message":"549","line":111,"column":48,"nodeType":"550","messageId":"551","endLine":111,"endColumn":50},{"ruleId":"548","severity":1,"message":"549","line":112,"column":55,"nodeType":"550","messageId":"551","endLine":112,"endColumn":57},{"ruleId":"582","severity":1,"message":"608","line":121,"column":25,"nodeType":"584","messageId":"585","endLine":121,"endColumn":169},{"ruleId":"582","severity":1,"message":"608","line":126,"column":25,"nodeType":"584","messageId":"585","endLine":126,"endColumn":190},{"ruleId":"582","severity":1,"message":"608","line":148,"column":25,"nodeType":"584","messageId":"585","endLine":148,"endColumn":169},{"ruleId":"582","severity":1,"message":"608","line":153,"column":25,"nodeType":"584","messageId":"585","endLine":153,"endColumn":190},{"ruleId":"530","severity":1,"message":"609","line":174,"column":13,"nodeType":"532","messageId":"533","endLine":174,"endColumn":22},{"ruleId":"582","severity":1,"message":"608","line":277,"column":37,"nodeType":"584","messageId":"585","endLine":279,"endColumn":68},{"ruleId":"582","severity":1,"message":"610","line":287,"column":33,"nodeType":"584","messageId":"585","endLine":288,"endColumn":98},{"ruleId":"582","severity":1,"message":"608","line":296,"column":37,"nodeType":"584","messageId":"585","endLine":298,"endColumn":68},{"ruleId":"530","severity":1,"message":"595","line":1,"column":17,"nodeType":"532","messageId":"533","endLine":1,"endColumn":26},{"ruleId":"530","severity":1,"message":"601","line":1,"column":39,"nodeType":"532","messageId":"533","endLine":1,"endColumn":45},{"ruleId":"530","severity":1,"message":"611","line":1,"column":47,"nodeType":"532","messageId":"533","endLine":1,"endColumn":55},{"ruleId":"530","severity":1,"message":"565","line":1,"column":27,"nodeType":"532","messageId":"533","endLine":1,"endColumn":36},{"ruleId":"530","severity":1,"message":"612","line":2,"column":86,"nodeType":"532","messageId":"533","endLine":2,"endColumn":97},{"ruleId":"530","severity":1,"message":"613","line":5,"column":8,"nodeType":"532","messageId":"533","endLine":5,"endColumn":19},{"ruleId":"530","severity":1,"message":"614","line":6,"column":8,"nodeType":"532","messageId":"533","endLine":6,"endColumn":21},{"ruleId":"530","severity":1,"message":"615","line":18,"column":12,"nodeType":"532","messageId":"533","endLine":18,"endColumn":20},{"ruleId":"530","severity":1,"message":"616","line":18,"column":22,"nodeType":"532","messageId":"533","endLine":18,"endColumn":34},{"ruleId":"617","severity":1,"message":"618","line":87,"column":36,"nodeType":"619","messageId":"620","endLine":135,"endColumn":18},{"ruleId":"548","severity":1,"message":"549","line":92,"column":76,"nodeType":"550","messageId":"551","endLine":92,"endColumn":78},{"ruleId":"617","severity":1,"message":"621","line":137,"column":34,"nodeType":"619","messageId":"620","endLine":141,"endColumn":18},{"ruleId":"548","severity":1,"message":"549","line":207,"column":27,"nodeType":"550","messageId":"551","endLine":207,"endColumn":29},{"ruleId":"530","severity":1,"message":"622","line":220,"column":11,"nodeType":"532","messageId":"533","endLine":220,"endColumn":23},{"ruleId":"530","severity":1,"message":"601","line":2,"column":17,"nodeType":"532","messageId":"533","endLine":2,"endColumn":23},{"ruleId":"530","severity":1,"message":"565","line":2,"column":35,"nodeType":"532","messageId":"533","endLine":2,"endColumn":44},{"ruleId":"530","severity":1,"message":"602","line":2,"column":46,"nodeType":"532","messageId":"533","endLine":2,"endColumn":61},{"ruleId":"530","severity":1,"message":"560","line":3,"column":22,"nodeType":"532","messageId":"533","endLine":3,"endColumn":30},{"ruleId":"530","severity":1,"message":"559","line":4,"column":22,"nodeType":"532","messageId":"533","endLine":4,"endColumn":27},{"ruleId":"530","severity":1,"message":"560","line":4,"column":29,"nodeType":"532","messageId":"533","endLine":4,"endColumn":37},{"ruleId":"623","severity":1,"message":"624","line":13,"column":3,"nodeType":"625","messageId":"626","endLine":15,"endColumn":4},{"ruleId":"530","severity":1,"message":"627","line":4,"column":8,"nodeType":"532","messageId":"533","endLine":4,"endColumn":15},{"ruleId":"530","severity":1,"message":"628","line":2,"column":10,"nodeType":"532","messageId":"533","endLine":2,"endColumn":20},{"ruleId":"530","severity":1,"message":"559","line":2,"column":22,"nodeType":"532","messageId":"533","endLine":2,"endColumn":27},{"ruleId":"530","severity":1,"message":"613","line":3,"column":8,"nodeType":"532","messageId":"533","endLine":3,"endColumn":19},{"ruleId":"617","severity":1,"message":"618","line":30,"column":36,"nodeType":"619","messageId":"620","endLine":78,"endColumn":18},{"ruleId":"548","severity":1,"message":"549","line":35,"column":76,"nodeType":"550","messageId":"551","endLine":35,"endColumn":78},{"ruleId":"617","severity":1,"message":"621","line":80,"column":34,"nodeType":"619","messageId":"620","endLine":84,"endColumn":18},{"ruleId":"530","severity":1,"message":"629","line":2,"column":22,"nodeType":"532","messageId":"533","endLine":2,"endColumn":36},{"ruleId":"530","severity":1,"message":"546","line":3,"column":10,"nodeType":"532","messageId":"533","endLine":3,"endColumn":19},{"ruleId":"530","severity":1,"message":"630","line":3,"column":21,"nodeType":"532","messageId":"533","endLine":3,"endColumn":24},{"ruleId":"631","severity":1,"message":"632","line":53,"column":17,"nodeType":"532","messageId":"633","endLine":53,"endColumn":28},{"ruleId":"631","severity":1,"message":"634","line":48,"column":19,"nodeType":"532","messageId":"633","endLine":48,"endColumn":28},{"ruleId":"530","severity":1,"message":"589","line":4,"column":10,"nodeType":"532","messageId":"533","endLine":4,"endColumn":20},{"ruleId":"530","severity":1,"message":"635","line":36,"column":7,"nodeType":"532","messageId":"533","endLine":36,"endColumn":11},{"ruleId":"530","severity":1,"message":"636","line":59,"column":10,"nodeType":"532","messageId":"533","endLine":59,"endColumn":14},{"ruleId":"548","severity":1,"message":"637","line":85,"column":52,"nodeType":"550","messageId":"551","endLine":85,"endColumn":54},{"ruleId":"597","severity":1,"message":"638","line":99,"column":6,"nodeType":"599","endLine":99,"endColumn":27,"suggestions":"639"},{"ruleId":"530","severity":1,"message":"640","line":16,"column":17,"nodeType":"532","messageId":"533","endLine":16,"endColumn":22},{"ruleId":"530","severity":1,"message":"565","line":2,"column":35,"nodeType":"532","messageId":"533","endLine":2,"endColumn":44},{"ruleId":"530","severity":1,"message":"602","line":2,"column":46,"nodeType":"532","messageId":"533","endLine":2,"endColumn":61},{"ruleId":"530","severity":1,"message":"560","line":3,"column":22,"nodeType":"532","messageId":"533","endLine":3,"endColumn":30},{"ruleId":"530","severity":1,"message":"629","line":2,"column":22,"nodeType":"532","messageId":"533","endLine":2,"endColumn":36},{"ruleId":"530","severity":1,"message":"546","line":3,"column":10,"nodeType":"532","messageId":"533","endLine":3,"endColumn":19},{"ruleId":"530","severity":1,"message":"630","line":3,"column":21,"nodeType":"532","messageId":"533","endLine":3,"endColumn":24},{"ruleId":"530","severity":1,"message":"601","line":2,"column":17,"nodeType":"532","messageId":"533","endLine":2,"endColumn":23},{"ruleId":"530","severity":1,"message":"565","line":2,"column":35,"nodeType":"532","messageId":"533","endLine":2,"endColumn":44},{"ruleId":"530","severity":1,"message":"602","line":2,"column":46,"nodeType":"532","messageId":"533","endLine":2,"endColumn":61},{"ruleId":"530","severity":1,"message":"560","line":3,"column":22,"nodeType":"532","messageId":"533","endLine":3,"endColumn":30},{"ruleId":"530","severity":1,"message":"565","line":1,"column":35,"nodeType":"532","messageId":"533","endLine":1,"endColumn":44},{"ruleId":"530","severity":1,"message":"641","line":2,"column":8,"nodeType":"532","messageId":"533","endLine":2,"endColumn":13},{"ruleId":"530","severity":1,"message":"559","line":3,"column":22,"nodeType":"532","messageId":"533","endLine":3,"endColumn":27},{"ruleId":"530","severity":1,"message":"543","line":5,"column":15,"nodeType":"532","messageId":"533","endLine":5,"endColumn":18},{"ruleId":"530","severity":1,"message":"642","line":8,"column":12,"nodeType":"532","messageId":"533","endLine":8,"endColumn":17},{"ruleId":"530","severity":1,"message":"643","line":9,"column":12,"nodeType":"532","messageId":"533","endLine":9,"endColumn":25},{"ruleId":"530","severity":1,"message":"644","line":9,"column":27,"nodeType":"532","messageId":"533","endLine":9,"endColumn":43},{"ruleId":"530","severity":1,"message":"592","line":1,"column":41,"nodeType":"532","messageId":"533","endLine":1,"endColumn":47},{"ruleId":"530","severity":1,"message":"630","line":1,"column":49,"nodeType":"532","messageId":"533","endLine":1,"endColumn":52},{"ruleId":"530","severity":1,"message":"543","line":1,"column":54,"nodeType":"532","messageId":"533","endLine":1,"endColumn":57},{"ruleId":"530","severity":1,"message":"601","line":2,"column":17,"nodeType":"532","messageId":"533","endLine":2,"endColumn":23},{"ruleId":"530","severity":1,"message":"565","line":2,"column":35,"nodeType":"532","messageId":"533","endLine":2,"endColumn":44},{"ruleId":"530","severity":1,"message":"602","line":2,"column":46,"nodeType":"532","messageId":"533","endLine":2,"endColumn":61},{"ruleId":"530","severity":1,"message":"560","line":3,"column":22,"nodeType":"532","messageId":"533","endLine":3,"endColumn":30},{"ruleId":"530","severity":1,"message":"622","line":20,"column":11,"nodeType":"532","messageId":"533","endLine":20,"endColumn":23},{"ruleId":"530","severity":1,"message":"592","line":1,"column":41,"nodeType":"532","messageId":"533","endLine":1,"endColumn":47},{"ruleId":"530","severity":1,"message":"630","line":1,"column":49,"nodeType":"532","messageId":"533","endLine":1,"endColumn":52},{"ruleId":"530","severity":1,"message":"543","line":1,"column":54,"nodeType":"532","messageId":"533","endLine":1,"endColumn":57},{"ruleId":"530","severity":1,"message":"601","line":2,"column":17,"nodeType":"532","messageId":"533","endLine":2,"endColumn":23},{"ruleId":"530","severity":1,"message":"565","line":2,"column":35,"nodeType":"532","messageId":"533","endLine":2,"endColumn":44},{"ruleId":"530","severity":1,"message":"602","line":2,"column":46,"nodeType":"532","messageId":"533","endLine":2,"endColumn":61},{"ruleId":"530","severity":1,"message":"560","line":3,"column":22,"nodeType":"532","messageId":"533","endLine":3,"endColumn":30},{"ruleId":"530","severity":1,"message":"622","line":21,"column":11,"nodeType":"532","messageId":"533","endLine":21,"endColumn":23},{"ruleId":"530","severity":1,"message":"571","line":1,"column":66,"nodeType":"532","messageId":"533","endLine":1,"endColumn":71},{"ruleId":"530","severity":1,"message":"601","line":2,"column":17,"nodeType":"532","messageId":"533","endLine":2,"endColumn":23},{"ruleId":"530","severity":1,"message":"565","line":2,"column":35,"nodeType":"532","messageId":"533","endLine":2,"endColumn":44},{"ruleId":"530","severity":1,"message":"602","line":2,"column":46,"nodeType":"532","messageId":"533","endLine":2,"endColumn":61},{"ruleId":"530","severity":1,"message":"560","line":3,"column":22,"nodeType":"532","messageId":"533","endLine":3,"endColumn":30},{"ruleId":"530","severity":1,"message":"561","line":4,"column":8,"nodeType":"532","messageId":"533","endLine":4,"endColumn":18},{"ruleId":"530","severity":1,"message":"576","line":6,"column":30,"nodeType":"532","messageId":"533","endLine":6,"endColumn":34},{"ruleId":"530","severity":1,"message":"577","line":6,"column":36,"nodeType":"532","messageId":"533","endLine":6,"endColumn":42},{"ruleId":"530","severity":1,"message":"547","line":6,"column":44,"nodeType":"532","messageId":"533","endLine":6,"endColumn":51},{"ruleId":"548","severity":1,"message":"549","line":38,"column":117,"nodeType":"550","messageId":"551","endLine":38,"endColumn":119},{"ruleId":"582","severity":1,"message":"583","line":43,"column":37,"nodeType":"584","messageId":"585","endLine":44,"endColumn":66},{"ruleId":"530","severity":1,"message":"601","line":2,"column":17,"nodeType":"532","messageId":"533","endLine":2,"endColumn":23},{"ruleId":"530","severity":1,"message":"565","line":2,"column":35,"nodeType":"532","messageId":"533","endLine":2,"endColumn":44},{"ruleId":"530","severity":1,"message":"602","line":2,"column":46,"nodeType":"532","messageId":"533","endLine":2,"endColumn":61},{"ruleId":"530","severity":1,"message":"628","line":3,"column":10,"nodeType":"532","messageId":"533","endLine":3,"endColumn":20},{"ruleId":"530","severity":1,"message":"560","line":3,"column":22,"nodeType":"532","messageId":"533","endLine":3,"endColumn":30},{"ruleId":"530","severity":1,"message":"561","line":4,"column":8,"nodeType":"532","messageId":"533","endLine":4,"endColumn":18},{"ruleId":"530","severity":1,"message":"559","line":1,"column":10,"nodeType":"532","messageId":"533","endLine":1,"endColumn":15},{"ruleId":"530","severity":1,"message":"567","line":1,"column":17,"nodeType":"532","messageId":"533","endLine":1,"endColumn":28},{"ruleId":"530","severity":1,"message":"591","line":1,"column":30,"nodeType":"532","messageId":"533","endLine":1,"endColumn":39},{"ruleId":"530","severity":1,"message":"592","line":1,"column":41,"nodeType":"532","messageId":"533","endLine":1,"endColumn":47},{"ruleId":"530","severity":1,"message":"543","line":1,"column":54,"nodeType":"532","messageId":"533","endLine":1,"endColumn":57},{"ruleId":"530","severity":1,"message":"601","line":2,"column":17,"nodeType":"532","messageId":"533","endLine":2,"endColumn":23},{"ruleId":"530","severity":1,"message":"602","line":2,"column":46,"nodeType":"532","messageId":"533","endLine":2,"endColumn":61},{"ruleId":"530","severity":1,"message":"560","line":3,"column":22,"nodeType":"532","messageId":"533","endLine":3,"endColumn":30},{"ruleId":"548","severity":1,"message":"549","line":12,"column":57,"nodeType":"550","messageId":"551","endLine":12,"endColumn":59},{"ruleId":"530","severity":1,"message":"645","line":17,"column":11,"nodeType":"532","messageId":"533","endLine":17,"endColumn":22},{"ruleId":"530","severity":1,"message":"622","line":22,"column":11,"nodeType":"532","messageId":"533","endLine":22,"endColumn":23},{"ruleId":"597","severity":1,"message":"646","line":114,"column":8,"nodeType":"599","endLine":114,"endColumn":30,"suggestions":"647"},{"ruleId":"530","severity":1,"message":"559","line":2,"column":10,"nodeType":"532","messageId":"533","endLine":2,"endColumn":15},{"ruleId":"530","severity":1,"message":"567","line":2,"column":17,"nodeType":"532","messageId":"533","endLine":2,"endColumn":28},{"ruleId":"530","severity":1,"message":"591","line":2,"column":30,"nodeType":"532","messageId":"533","endLine":2,"endColumn":39},{"ruleId":"530","severity":1,"message":"592","line":2,"column":41,"nodeType":"532","messageId":"533","endLine":2,"endColumn":47},{"ruleId":"530","severity":1,"message":"630","line":2,"column":49,"nodeType":"532","messageId":"533","endLine":2,"endColumn":52},{"ruleId":"530","severity":1,"message":"543","line":2,"column":54,"nodeType":"532","messageId":"533","endLine":2,"endColumn":57},{"ruleId":"530","severity":1,"message":"568","line":2,"column":59,"nodeType":"532","messageId":"533","endLine":2,"endColumn":64},{"ruleId":"530","severity":1,"message":"571","line":2,"column":66,"nodeType":"532","messageId":"533","endLine":2,"endColumn":71},{"ruleId":"530","severity":1,"message":"565","line":3,"column":35,"nodeType":"532","messageId":"533","endLine":3,"endColumn":44},{"ruleId":"530","severity":1,"message":"602","line":3,"column":46,"nodeType":"532","messageId":"533","endLine":3,"endColumn":61},{"ruleId":"530","severity":1,"message":"560","line":4,"column":22,"nodeType":"532","messageId":"533","endLine":4,"endColumn":30},{"ruleId":"530","severity":1,"message":"561","line":5,"column":8,"nodeType":"532","messageId":"533","endLine":5,"endColumn":18},{"ruleId":"530","severity":1,"message":"648","line":6,"column":8,"nodeType":"532","messageId":"533","endLine":6,"endColumn":28},{"ruleId":"530","severity":1,"message":"649","line":7,"column":10,"nodeType":"532","messageId":"533","endLine":7,"endColumn":17},{"ruleId":"530","severity":1,"message":"650","line":7,"column":19,"nodeType":"532","messageId":"533","endLine":7,"endColumn":28},{"ruleId":"530","severity":1,"message":"576","line":7,"column":30,"nodeType":"532","messageId":"533","endLine":7,"endColumn":34},{"ruleId":"530","severity":1,"message":"577","line":7,"column":36,"nodeType":"532","messageId":"533","endLine":7,"endColumn":42},{"ruleId":"530","severity":1,"message":"547","line":7,"column":44,"nodeType":"532","messageId":"533","endLine":7,"endColumn":51},{"ruleId":"530","severity":1,"message":"651","line":8,"column":10,"nodeType":"532","messageId":"533","endLine":8,"endColumn":24},{"ruleId":"530","severity":1,"message":"652","line":8,"column":26,"nodeType":"532","messageId":"533","endLine":8,"endColumn":40},{"ruleId":"530","severity":1,"message":"653","line":8,"column":42,"nodeType":"532","messageId":"533","endLine":8,"endColumn":54},{"ruleId":"530","severity":1,"message":"654","line":8,"column":56,"nodeType":"532","messageId":"533","endLine":8,"endColumn":68},{"ruleId":"530","severity":1,"message":"655","line":9,"column":8,"nodeType":"532","messageId":"533","endLine":9,"endColumn":19},{"ruleId":"530","severity":1,"message":"656","line":10,"column":8,"nodeType":"532","messageId":"533","endLine":10,"endColumn":25},{"ruleId":"530","severity":1,"message":"657","line":55,"column":11,"nodeType":"532","messageId":"533","endLine":55,"endColumn":25},{"ruleId":"530","severity":1,"message":"601","line":2,"column":17,"nodeType":"532","messageId":"533","endLine":2,"endColumn":23},{"ruleId":"530","severity":1,"message":"565","line":2,"column":35,"nodeType":"532","messageId":"533","endLine":2,"endColumn":44},{"ruleId":"530","severity":1,"message":"602","line":2,"column":46,"nodeType":"532","messageId":"533","endLine":2,"endColumn":61},{"ruleId":"530","severity":1,"message":"560","line":3,"column":22,"nodeType":"532","messageId":"533","endLine":3,"endColumn":30},{"ruleId":"530","severity":1,"message":"629","line":2,"column":22,"nodeType":"532","messageId":"533","endLine":2,"endColumn":36},{"ruleId":"530","severity":1,"message":"546","line":3,"column":10,"nodeType":"532","messageId":"533","endLine":3,"endColumn":19},{"ruleId":"530","severity":1,"message":"630","line":3,"column":21,"nodeType":"532","messageId":"533","endLine":3,"endColumn":24},{"ruleId":"530","severity":1,"message":"569","line":2,"column":10,"nodeType":"532","messageId":"533","endLine":2,"endColumn":20},{"ruleId":"530","severity":1,"message":"559","line":2,"column":22,"nodeType":"532","messageId":"533","endLine":2,"endColumn":27},{"ruleId":"530","severity":1,"message":"567","line":2,"column":29,"nodeType":"532","messageId":"533","endLine":2,"endColumn":40},{"ruleId":"530","severity":1,"message":"591","line":2,"column":42,"nodeType":"532","messageId":"533","endLine":2,"endColumn":51},{"ruleId":"530","severity":1,"message":"570","line":2,"column":53,"nodeType":"532","messageId":"533","endLine":2,"endColumn":68},{"ruleId":"530","severity":1,"message":"571","line":2,"column":70,"nodeType":"532","messageId":"533","endLine":2,"endColumn":75},{"ruleId":"623","severity":1,"message":"624","line":13,"column":3,"nodeType":"625","messageId":"626","endLine":15,"endColumn":4},{"ruleId":"530","severity":1,"message":"629","line":2,"column":22,"nodeType":"532","messageId":"533","endLine":2,"endColumn":36},{"ruleId":"530","severity":1,"message":"546","line":3,"column":10,"nodeType":"532","messageId":"533","endLine":3,"endColumn":19},{"ruleId":"530","severity":1,"message":"630","line":3,"column":21,"nodeType":"532","messageId":"533","endLine":3,"endColumn":24},{"ruleId":"530","severity":1,"message":"568","line":2,"column":39,"nodeType":"532","messageId":"533","endLine":2,"endColumn":44},{"ruleId":"530","severity":1,"message":"569","line":3,"column":10,"nodeType":"532","messageId":"533","endLine":3,"endColumn":20},{"ruleId":"530","severity":1,"message":"570","line":3,"column":22,"nodeType":"532","messageId":"533","endLine":3,"endColumn":37},{"ruleId":"530","severity":1,"message":"571","line":3,"column":39,"nodeType":"532","messageId":"533","endLine":3,"endColumn":44},{"ruleId":"530","severity":1,"message":"573","line":4,"column":36,"nodeType":"532","messageId":"533","endLine":4,"endColumn":44},{"ruleId":"530","severity":1,"message":"575","line":4,"column":57,"nodeType":"532","messageId":"533","endLine":4,"endColumn":69},{"ruleId":"530","severity":1,"message":"576","line":5,"column":30,"nodeType":"532","messageId":"533","endLine":5,"endColumn":34},{"ruleId":"530","severity":1,"message":"577","line":5,"column":36,"nodeType":"532","messageId":"533","endLine":5,"endColumn":42},{"ruleId":"530","severity":1,"message":"547","line":5,"column":44,"nodeType":"532","messageId":"533","endLine":5,"endColumn":51},{"ruleId":"530","severity":1,"message":"580","line":11,"column":8,"nodeType":"532","messageId":"533","endLine":11,"endColumn":22},{"ruleId":"530","severity":1,"message":"559","line":18,"column":30,"nodeType":"532","messageId":"533","endLine":18,"endColumn":35},{"ruleId":"530","severity":1,"message":"581","line":47,"column":11,"nodeType":"532","messageId":"533","endLine":47,"endColumn":13},{"ruleId":"530","severity":1,"message":"658","line":59,"column":11,"nodeType":"532","messageId":"533","endLine":59,"endColumn":22},{"ruleId":"582","severity":1,"message":"583","line":145,"column":33,"nodeType":"584","messageId":"585","endLine":147,"endColumn":62},{"ruleId":"530","severity":1,"message":"659","line":5,"column":8,"nodeType":"532","messageId":"533","endLine":5,"endColumn":13},{"ruleId":"530","severity":1,"message":"546","line":6,"column":10,"nodeType":"532","messageId":"533","endLine":6,"endColumn":19},{"ruleId":"530","severity":1,"message":"543","line":6,"column":26,"nodeType":"532","messageId":"533","endLine":6,"endColumn":29},{"ruleId":"530","severity":1,"message":"660","line":13,"column":8,"nodeType":"532","messageId":"533","endLine":13,"endColumn":21},{"ruleId":"530","severity":1,"message":"661","line":14,"column":8,"nodeType":"532","messageId":"533","endLine":14,"endColumn":24},{"ruleId":"530","severity":1,"message":"574","line":2,"column":16,"nodeType":"532","messageId":"533","endLine":2,"endColumn":25},{"ruleId":"530","severity":1,"message":"574","line":2,"column":16,"nodeType":"532","messageId":"533","endLine":2,"endColumn":25},{"ruleId":"530","severity":1,"message":"559","line":1,"column":10,"nodeType":"532","messageId":"533","endLine":1,"endColumn":15},{"ruleId":"530","severity":1,"message":"567","line":1,"column":17,"nodeType":"532","messageId":"533","endLine":1,"endColumn":28},{"ruleId":"530","severity":1,"message":"591","line":1,"column":30,"nodeType":"532","messageId":"533","endLine":1,"endColumn":39},{"ruleId":"530","severity":1,"message":"592","line":1,"column":41,"nodeType":"532","messageId":"533","endLine":1,"endColumn":47},{"ruleId":"530","severity":1,"message":"543","line":1,"column":54,"nodeType":"532","messageId":"533","endLine":1,"endColumn":57},{"ruleId":"530","severity":1,"message":"601","line":2,"column":17,"nodeType":"532","messageId":"533","endLine":2,"endColumn":23},{"ruleId":"530","severity":1,"message":"602","line":2,"column":46,"nodeType":"532","messageId":"533","endLine":2,"endColumn":61},{"ruleId":"530","severity":1,"message":"560","line":3,"column":22,"nodeType":"532","messageId":"533","endLine":3,"endColumn":30},{"ruleId":"530","severity":1,"message":"662","line":4,"column":8,"nodeType":"532","messageId":"533","endLine":4,"endColumn":24},{"ruleId":"530","severity":1,"message":"663","line":8,"column":8,"nodeType":"532","messageId":"533","endLine":8,"endColumn":22},{"ruleId":"530","severity":1,"message":"645","line":23,"column":11,"nodeType":"532","messageId":"533","endLine":23,"endColumn":22},{"ruleId":"530","severity":1,"message":"622","line":28,"column":11,"nodeType":"532","messageId":"533","endLine":28,"endColumn":23},{"ruleId":"597","severity":1,"message":"664","line":117,"column":8,"nodeType":"599","endLine":117,"endColumn":30,"suggestions":"665"},"no-unused-vars","'Popup' is defined but never used.","Identifier","unusedVar","no-native-reassign",["666"],"no-negated-in-lhs",["667"],"'Redirect' is defined but never used.","'Database' is defined but never used.","'SOMModel' is defined but never used.","'Visualisation' is defined but never used.","'Signup' is defined but never used.","'Col' is defined but never used.","'PureComponent' is defined but never used.","'useCallback' is defined but never used.","'Container' is defined but never used.","'actions' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'selectedDataset' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'Card' is defined but never used.","'CardBody' is defined but never used.","'Modal' is defined but never used.","'TableRow' is defined but never used.","'DeleteIcon' is defined but never used.","'DatasetUpload' is defined but never used.","'MetadataForm' is defined but never used.","'purple' is defined but never used.","'useEffect' is defined but never used.","'Typography' is defined but never used.","'ModalHeader' is defined but never used.","'Label' is defined but never used.","'InputGroup' is defined but never used.","'InputGroupAddon' is defined but never used.","'Input' is defined but never used.","'CardText' is defined but never used.","'CardLink' is defined but never used.","'CardTitle' is defined but never used.","'CardSubtitle' is defined but never used.","'Form' is defined but never used.","'Errors' is defined but never used.","'UMatrix' is defined but never used.","'getSOM' is defined but never used.","'TableChartIcon' is defined but never used.","'el' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","'createForms' is defined but never used.","'Avatar' is defined but never used.","'Link' is defined but never used.","'makeStyles' is defined but never used.","'updateUser' is defined but never used.","'ModalBody' is defined but never used.","'Button' is defined but never used.","'CreateIcon' is defined but never used.","'ModelUploadComponent' is defined but never used.","'Component' is defined but never used.","'CardImg' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'props.username'. Either include them or remove the dependency array.","ArrayExpression",["668"],"'useRef' is defined but never used.","'useLayoutEffect' is defined but never used.","'DetailedDataset' is defined but never used.","no-use-before-define","'attr' was used before it was defined.","usedBeforeDefined","'TagInputs' is assigned a value but never used.","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","'attrArray' is assigned a value but never used.","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'useState' is defined but never used.","'CardColumns' is defined but never used.","'PublishIcon' is defined but never used.","'NeedUploading' is defined but never used.","'fileInfo' is assigned a value but never used.","'setFileInfos' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'datasetMessage', 'datasetMessage', 'datasetMessage', 'datasetMessage', 'datasetMessage', 'datasetMessage', 'datasetMessage', 'datasetMessage', 'datasetMessage', 'datasetMessage'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'datasetMessage', 'datasetMessage'.","'handlenNoBtn' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'baseUrl' is defined but never used.","'IconButton' is defined but never used.","'InputGroupText' is defined but never used.","'Row' is defined but never used.","no-redeclare","'datasetName' is already defined.","redeclared","'modelName' is already defined.","'root' is assigned a value but never used.","'user' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'isModalOpen' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["669"],"'files' is assigned a value but never used.","'axios' is defined but never used.","'dfile' is assigned a value but never used.","'selectedFiles' is assigned a value but never used.","'setSelectedFiles' is assigned a value but never used.","'toggleModal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ModelName' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["670"],"'SettingsEthernetIcon' is defined but never used.","'Control' is defined but never used.","'LocalForm' is defined but never used.","'ButtonDropdown' is defined but never used.","'DropdownToggle' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'ButtonGroup' is defined but never used.","'ArrowDropDownIcon' is defined but never used.","'handleDownload' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'Color' is defined but never used.","'ArrowBackIcon' is defined but never used.","'ArrowForwardIcon' is defined but never used.","'DeleteOneDataset' is defined but never used.","'ModelBriefInfo' is defined but never used.","React Hook useEffect has missing dependencies: 'modelName', 'props', and 'query.userName'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["671"],"no-global-assign","no-unsafe-negation",{"desc":"672","fix":"673"},{"desc":"674","fix":"675"},{"desc":"676","fix":"677"},{"desc":"678","fix":"679"},"Update the dependencies array to be: [history, props.username]",{"range":"680","text":"681"},"Update the dependencies array to be: [isModalOpen, props, props.user.userInfo]",{"range":"682","text":"683"},"Update the dependencies array to be: [ModelName, props, props.bindedDatasets]",{"range":"684","text":"685"},"Update the dependencies array to be: [modelName, props, props.bindedDatasets, query.userName]",{"range":"686","text":"687"},[585,587],"[history, props.username]",[2918,2939],"[isModalOpen, props, props.user.userInfo]",[4924,4946],"[ModelName, props, props.bindedDatasets]",[4984,5006],"[modelName, props, props.bindedDatasets, query.userName]"]