[{"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\index.js":"1","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\App.js":"2","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\reportWebVitals.js":"3","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\LoginComponent.js":"4","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\MainComponent.js":"5","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\VisualisationComponent.js":"6","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DatabaseComponent.js":"7","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ModelComponent.js":"8","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\configureStore.js":"9","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Signup.js":"10","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\SidebarComponent.js":"11","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\login.js":"12","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\LoadingComponent.js":"13","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DatasetUploadComponent.js":"14","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DeleteOneDataset.js":"15","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ModelBriefInfo.js":"16","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\searchFileComponent.js":"17","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DeleteOneModel.js":"18","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ModelUploadComponent.js":"19","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\detailedData.js":"20","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\metadata.js":"21","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\datasetFiles.js":"22","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\user.js":"23","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\modelFiles.js":"24","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DetailedDatasetComponent.js":"25","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\ActionCreators.js":"26","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\MetadataForm.js":"27","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\others\\compareProps.js":"28","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\ActionTypes.js":"29","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\metadataEmpty.js":"30","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\server\\baseUrl.js":"31","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\server\\backendUrl.js":"32","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\database\\datasetFiles.js":"33","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\database\\modelFiles.js":"34","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ConnectionUploading.js":"35","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\connectionResult.js":"36"},{"size":727,"mtime":1618988544899,"results":"37","hashOfConfig":"38"},{"size":1026,"mtime":1618988544873,"results":"39","hashOfConfig":"38"},{"size":375,"mtime":1618988544910,"results":"40","hashOfConfig":"38"},{"size":1603,"mtime":1618988544882,"results":"41","hashOfConfig":"38"},{"size":8795,"mtime":1619070472002,"results":"42","hashOfConfig":"38"},{"size":274,"mtime":1618988544891,"results":"43","hashOfConfig":"38"},{"size":5017,"mtime":1618988544876,"results":"44","hashOfConfig":"38"},{"size":3503,"mtime":1618988544887,"results":"45","hashOfConfig":"38"},{"size":996,"mtime":1619068962902,"results":"46","hashOfConfig":"38"},{"size":5453,"mtime":1618988544890,"results":"47","hashOfConfig":"38"},{"size":2754,"mtime":1619056844310,"results":"48","hashOfConfig":"38"},{"size":5166,"mtime":1618988544893,"results":"49","hashOfConfig":"38"},{"size":462,"mtime":1618988544882,"results":"50","hashOfConfig":"38"},{"size":2765,"mtime":1619099889136,"results":"51","hashOfConfig":"38"},{"size":1826,"mtime":1618988544878,"results":"52","hashOfConfig":"38"},{"size":1997,"mtime":1618988544886,"results":"53","hashOfConfig":"38"},{"size":1214,"mtime":1618988544894,"results":"54","hashOfConfig":"38"},{"size":1802,"mtime":1618988544880,"results":"55","hashOfConfig":"38"},{"size":2783,"mtime":1619099902437,"results":"56","hashOfConfig":"38"},{"size":656,"mtime":1618988544905,"results":"57","hashOfConfig":"38"},{"size":698,"mtime":1618988544906,"results":"58","hashOfConfig":"38"},{"size":2070,"mtime":1618988544905,"results":"59","hashOfConfig":"38"},{"size":429,"mtime":1618988544909,"results":"60","hashOfConfig":"38"},{"size":2306,"mtime":1618988544908,"results":"61","hashOfConfig":"38"},{"size":5725,"mtime":1618988544881,"results":"62","hashOfConfig":"38"},{"size":9762,"mtime":1619068251273,"results":"63","hashOfConfig":"38"},{"size":14188,"mtime":1619005885186,"results":"64","hashOfConfig":"38"},{"size":4405,"mtime":1619099145916,"results":"65","hashOfConfig":"38"},{"size":1818,"mtime":1619067848241,"results":"66","hashOfConfig":"38"},{"size":513,"mtime":1618988544907,"results":"67","hashOfConfig":"38"},{"size":160,"mtime":1618988544911,"results":"68","hashOfConfig":"38"},{"size":51,"mtime":1618988544911,"results":"69","hashOfConfig":"38"},{"size":508,"mtime":1618988544896,"results":"70","hashOfConfig":"38"},{"size":514,"mtime":1618988544897,"results":"71","hashOfConfig":"38"},{"size":5863,"mtime":1619102881270,"results":"72","hashOfConfig":"38"},{"size":795,"mtime":1619070025555,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},"1tt525n",{"filePath":"78","messages":"79","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"77"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"77"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"77"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"77"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"77"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"77"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"77"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"77"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"77"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"77"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"77"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"77"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"77"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"77"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"77"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"77"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"77"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":1,"source":"147","usedDeprecatedRules":"77"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"77"},"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\index.js",["167"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Popup from 'react-popup';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'fontsource-roboto';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'font-awesome/css/font-awesome.css';\r\nimport \"@pathofdev/react-tag-input/build/index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["168","169"],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\App.js",["170","171","172","173","174","175"],"import './App.css';\r\nimport React, {Component} from 'react';\r\nimport {BrowserRouter, Route, Switch, Redirect} from 'react-router-dom';\r\nimport Main from './components/MainComponent';\r\n\r\nimport {Provider} from 'react-redux';\r\nimport {ConfigureStore} from './redux/configureStore';\r\nimport Database from \"./components/DatabaseComponent\";\r\nimport SOMModel from \"./components/ModelComponent\";\r\nimport Visualisation from \"./components/VisualisationComponent\";\r\nimport Login from \"./components/LoginComponent\";\r\nimport Signup from \"./components/Signup\";\r\nimport {Col} from \"reactstrap\";\r\n\r\nconst store = ConfigureStore();\r\n\r\nclass App extends Component{\r\n  \r\n  render(){\r\n    return (\r\n      <Provider store={store}>\r\n        <BrowserRouter>\r\n        <Switch>\r\n            <Route path=\"/login\" component={Login}/>\r\n            <Route path=\"/\" component={()=><div className=\"APP\">\r\n              <Main/>\r\n            </div>}/>\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\reportWebVitals.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\LoginComponent.js",["176"],"import React, {useEffect, useState} from \"react\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Signup from \"./Signup\";\r\nimport Login from './login'\r\n\r\nconst paperStyle = {width: 340, margin: \"20px auto\",textAlign:'center',boxSizing:'content-box'}\r\nconst SignInOutContainer = () => {\r\n  const [value, setValue] = useState(0);\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  function TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`simple-tabpanel-${index}`}\r\n        aria-labelledby={`simple-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box>\r\n            <Typography>{children}</Typography>\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  return (\r\n\r\n    <Paper style={paperStyle}>\r\n      <Tabs\r\n        value={value}\r\n        indicatorColor=\"primary\"\r\n        textColor=\"primary\"\r\n        onChange={handleChange}\r\n        aria-label=\"disabled tabs example\">\r\n        <Tab label=\"Sign In\"/>\r\n        <Tab label=\"Sign Up\"/>\r\n      </Tabs>\r\n      <TabPanel value={value} index={0}>\r\n        <Login handleChange={handleChange}/>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <Signup/>\r\n      </TabPanel>\r\n\r\n    </Paper>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default SignInOutContainer;\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\MainComponent.js",["177","178","179","180","181","182"],"import React, { PureComponent, Component, useCallback } from 'react';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { actions } from 'react-redux-form';\r\nimport Sidebar from './SidebarComponent';\r\nimport Database from './DatabaseComponent';\r\nimport Visualisation from './VisualisationComponent';\r\nimport SOMModel from './ModelComponent';\r\nimport DetailedDataset from './DetailedDatasetComponent';\r\nimport MetadataForm from './MetadataForm';\r\nimport ConnectionUploading from './ConnectionUploading';\r\n\r\nimport compareProps from '../others/compareProps';\r\n\r\nimport {\r\n    fetchDatasetFiles, uploadDataset, fetchUploadedDataset, submitMetadata, deleteOneDataset, queryDatasets,\r\n    fetchModelFiles, uploadModel, fetchUploadedModel, deleteOneModel, editModelDescription,\r\n    sendNameForDetailedData, connectUploading\r\n} from '../redux/ActionCreators';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.user,\r\n        metadata: state.metadata,\r\n        datasetFiles: state.datasetFiles,\r\n        modelFiles: state.modelFiles,\r\n        detailedData: state.detailedData,\r\n        connectionFiles: state.connectionFiles\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    connectUploading: (files, onUploadProgress) => dispatch(connectUploading(files, onUploadProgress)),\r\n\r\n    fetchDatasetFiles: (userName) => { dispatch(fetchDatasetFiles(userName)) },\r\n    uploadDataset: (dataset, onUploadProgress) => dispatch(uploadDataset(dataset, onUploadProgress)),\r\n    fetchUploadedDataset: () => { dispatch(fetchUploadedDataset()) },\r\n    deleteDataset: (datasetName, userName) => { dispatch(deleteOneDataset(datasetName, userName)) },\r\n    queryDatasets: (inputValue, userName) => { dispatch(queryDatasets(inputValue, userName)) },\r\n\r\n    fetchModelFiles: (userName) => { dispatch(fetchModelFiles(userName)) },\r\n    uploadModel: (model, onUploadProgress) => dispatch(uploadModel(model, onUploadProgress)),\r\n    fetchUploadedModel: () => { dispatch(fetchUploadedModel()) },\r\n    deleteModel: (name, userName) => { dispatch(deleteOneModel(name, userName)) },\r\n    editModelDescription: (name, description, username) => { dispatch(editModelDescription(name, description, username)) },\r\n\r\n    submitMetadata: (metadata) => { dispatch(submitMetadata(metadata)) },\r\n    sendNameForDetailedData: (datasetName, userName) => { dispatch(sendNameForDetailedData(datasetName, userName)) }\r\n});\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedDataset: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchDatasetFiles(sessionStorage.getItem('verifiedUsername'));\r\n        this.props.fetchModelFiles(sessionStorage.getItem('verifiedUsername'));\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        console.log(\"start should\");\r\n        // if the metadata itself needs to be updated, return true\r\n        //console.log(\"compareMetadata: \", this.props.metadata.metadata);\r\n        //console.log(\"nextMetadata: \", nextProps.metadata.metadata);\r\n        if (compareProps(this.props.metadata.metadata[0], nextProps.metadata.metadata[0], this.props.modelFiles.modelFiles, nextProps.modelFiles.modelFiles)) {\r\n            console.log(\"because of metadata\");\r\n            return true\r\n        }\r\n        else {\r\n            if (this.props.datasetFiles.datasetFiles !== nextProps.datasetFiles.datasetFiles) {\r\n                console.log(\"because of dataset files\");\r\n                return true;\r\n            }\r\n            else if (this.props.connectionFiles.connectionFiles.length !== nextProps.connectionFiles.connectionFiles.length){\r\n                console.log(\"because of connection files\");\r\n                return true\r\n            }\r\n            else {\r\n                console.log(\"not update\");\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const DatasetWithName = ({ match }) => {\r\n            let selectedDataset = this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0] == undefined ? localStorage.getItem('datasetname-detaileddata') :\r\n                this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0].FileName;\r\n            localStorage.setItem('datasetname-detaileddata', selectedDataset);\r\n            console.log(\"detaileddata for name: \", selectedDataset);\r\n\r\n            return (\r\n                <DetailedDataset\r\n                    selectedDataset={this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0]}\r\n                    sendNameForDetailedData={this.props.sendNameForDetailedData}\r\n                    detailedData={this.props.detailedData.detailedData}\r\n                    isLoading_detailedData={this.props.detailedData.isLoading}\r\n                    errMess_detailedData={this.props.detailedData.errMess}\r\n\r\n                    metadata={this.props.metadata.metadata[0]}\r\n                    isLoading_metadata={this.props.metadata.isLoading}\r\n                    errMess_metadata={this.props.metadata.errMess} />\r\n            );\r\n        };\r\n\r\n        const DatasetSelect = ({ match }) => {\r\n            let datasetName = this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0] == undefined ? localStorage.getItem('datasetname-metadata') :\r\n                this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0].FileName;\r\n            console.log(\"dataset name: \", datasetName);\r\n            localStorage.setItem('datasetname-metadata', datasetName);\r\n\r\n            return (\r\n                <MetadataForm dataset={this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0]}\r\n                    submitMetadata={this.props.submitMetadata}\r\n                    fetchDatasetFiles={this.props.fetchDatasetFiles}\r\n                    sendNameForDetailedData={this.props.sendNameForDetailedData}\r\n                    metadata={this.props.metadata.metadata[0]}\r\n                />\r\n            );\r\n        };\r\n\r\n        return (\r\n            <Row>\r\n                <Col className=\"sidebar\" md=\"3\"><Sidebar username={this.props.user.userInfo} /></Col>\r\n                <Col className=\"main-page\">\r\n                    <Switch>\r\n                        <Route path=\"/uploading\" component={() => \r\n                            <ConnectionUploading connectUploading={this.props.connectUploading}\r\n                                connectionFiles = {this.props.connectionFiles.connectionFiles}\r\n                            />}/>\r\n\r\n                        <Route exact path=\"/mydatabase\" component={() =>\r\n                            <Database datasetFiles={this.props.datasetFiles.datasetFiles}\r\n                                isLoading={this.props.datasetFiles.isLoading}\r\n                                errMess={this.props.datasetFiles.errMess}\r\n                                uploadDataset={this.props.uploadDataset}\r\n                                fetchUploadedDataset={this.props.fetchUploadedDataset}\r\n                                deleteDataset={this.props.deleteDataset}\r\n                                fetchDatasetFiles={this.props.fetchDatasetFiles}\r\n                                queryDatasets={this.props.queryDatasets}\r\n                            />} />\r\n                        <Route path='/mydatabase/:datasetName' component={DatasetWithName} />\r\n                        <Route path=\"/metadata-form/:datasetName\" component={DatasetSelect} />\r\n                        <Route path=\"/mymodels\" component={() => <SOMModel\r\n                            modelFiles={this.props.modelFiles.modelFiles}\r\n                            isLoading={this.props.modelFiles.isLoading}\r\n                            errMess={this.props.modelFiles.errMess}\r\n                            uploadModel={this.props.uploadModel}\r\n                            fetchUploadedModel={this.props.fetchUploadedModel}\r\n                            deleteModel={this.props.deleteModel}\r\n                            editModelDescription={this.props.editModelDescription}\r\n                            fetchModelFiles={this.props.fetchModelFiles}\r\n                        />} />\r\n                        <Route path=\"/visualisation\" component={Visualisation} />\r\n                        <Redirect to=\"/mydatabase\" />\r\n                    </Switch>\r\n                </Col>\r\n            </Row>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\VisualisationComponent.js",["183"],"import React, { Component } from 'react';\r\n\r\nclass Visualisation extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <p>This is for Visualisation</p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Visualisation;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DatabaseComponent.js",["184","185","186","187","188","189","190","191","192","193"],"import React, { Component } from 'react';\r\nimport { InputGroup, InputGroupText, InputGroupAddon, Input } from 'reactstrap';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\nimport { Table } from 'reactstrap';\r\nimport { IconButton, Modal, TableRow } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport TableChartIcon from '@material-ui/icons/TableChart';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport DatasetUpload from './DatasetUploadComponent';\r\nimport DeleteOneDataset from './DeleteOneDataset';\r\nimport { Loading } from './LoadingComponent';\r\nimport MetadataForm from './MetadataForm';\r\nimport SearchFile from './searchFileComponent';\r\n\r\nclass Database extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidUpdate (){\r\n        this.props.fetchDatasetFiles(sessionStorage.getItem('verifiedUsername'));\r\n    }\r\n\r\n    // to create a flexible table head, where the number of columns depends on the attributes in the datafile.\r\n    // dataset: array. JSON data stored inside.\r\n    tableHead(datasets) {\r\n        if (datasets !== undefined) {\r\n            return (\r\n                <thead>\r\n                    <tr>\r\n                        <th>File name</th>\r\n                        <th>Description</th>\r\n                        <th>Size</th>\r\n                        <th>Operation</th>\r\n                    </tr>\r\n                </thead>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>The table for storing uploaded datasets does not exist</div>\r\n        );\r\n    }\r\n\r\n    //TODO: may change if the design of the database is changed\r\n    tableBody(datasets) {\r\n        // when there is no uploaded dataset in the database\r\n        console.log(`dataset length: ${datasets.length}, dataset is ${datasets}`)\r\n        if (datasets.length === 0) {\r\n            return (\r\n                <tbody />\r\n            );\r\n        }\r\n        else { // where are dataset stored in the database\r\n            return (\r\n                <tbody>\r\n                    {datasets.map((eachDataset, index) =>\r\n                        <tr key={index}>\r\n                            {Object.values(eachDataset).slice(1, 4).map(eachValue => <td key={Object.values(eachValue)[0]}>{eachValue}</td>)}\r\n                            <td key={\"operateEachDataset\"}>{this.operateDataset(true, eachDataset.FileName)}</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    //showOperate: bool. the delete button and the create button will be disable\r\n    operateDataset(showOperate, fileName) {\r\n        /** \r\n        if (icons === \"add only\") {\r\n            return (\r\n                <Container>\r\n                    <Row>\r\n                        <DatasetUpload addDataset={this.props.datasetfile} />\r\n                    </Row>\r\n                </Container>\r\n            );\r\n        }*/\r\n        if (showOperate) {\r\n            return (\r\n                <Container>\r\n                    <Row>\r\n                        <DeleteOneDataset deleteDataset={this.props.deleteDataset}\r\n                            deletedFileName={fileName} />\r\n\r\n                        <Link to={`/metadata-form/${fileName}`}>\r\n                            <IconButton aria-label=\"create matadata\" component=\"span\">\r\n                                <CreateIcon />\r\n                            </IconButton>\r\n                        </Link>\r\n\r\n                        <Link to={`/mydatabase/${fileName}`}>\r\n                            <IconButton aria-label=\"detailed data\" component=\"span\">\r\n                                <TableChartIcon />\r\n                            </IconButton>\r\n                        </Link>\r\n                    </Row>\r\n                </Container>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderDatasetTable(datasets, isLoading, errMess) {\r\n        if (isLoading) {\r\n            return (\r\n                <Loading />\r\n            );\r\n        }\r\n        else if (errMess) {\r\n            return (\r\n                <h4>{errMess}</h4>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Table hover>\r\n                    {this.tableHead(datasets)}\r\n                    {this.tableBody(datasets)}\r\n                </Table>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Col className=\"search-box\" >\r\n                    <SearchFile queryDatasets={this.props.queryDatasets}/>\r\n                </Col>\r\n\r\n                <Col>\r\n                    <DatasetUpload uploadDataset={this.props.uploadDataset}/>\r\n                </Col>\r\n\r\n                <Col className=\"database\">\r\n                    {this.renderDatasetTable(this.props.datasetFiles, this.props.isLoading, this.props.errMess)}\r\n                </Col>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Database;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ModelComponent.js",["194","195","196","197","198","199"],"import React, { Component } from 'react';\r\nimport { InputGroup, Modal, ModalHeader, ModalBody, InputGroupAddon, Input } from 'reactstrap';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\nimport { Table } from 'reactstrap';\r\nimport { IconButton } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport InsertChart from '@material-ui/icons/InsertChart';\r\nimport { Link } from 'react-router-dom';\r\nimport ModelUploadComponent from './ModelUploadComponent';\r\nimport DeleteOneModel from './DeleteOneModel';\r\nimport ModelBriefInfo from './ModelBriefInfo';\r\nimport { Loading } from './LoadingComponent';\r\n\r\n\r\nclass SOMModel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.props.fetchModelFiles(sessionStorage.getItem('verifiedUsername'));\r\n  }\r\n\r\n  tableHead() {\r\n    return (\r\n      <thead>\r\n        <tr>\r\n          <th>Model name</th>\r\n          <th>Description</th>\r\n          <th>Size(KB)</th>\r\n          <th>Operation</th>\r\n        </tr>\r\n      </thead>\r\n    );\r\n  }\r\n\r\n  tableBody(models) {\r\n    if (models.length === 0) {\r\n      return (\r\n        <tbody />\r\n      );\r\n    }\r\n    else {\r\n      return (\r\n        <tbody>\r\n          {models.map((model, index) =>\r\n            <tr key={index}>\r\n              <td style={{ verticalAlign: 'middle' }}>{model.FileName}</td>\r\n              <td style={{ verticalAlign: 'middle' }}>{model.BriefInfo}</td>\r\n              <td style={{ verticalAlign: 'middle' }}>{model.Size}</td>\r\n              <td key={\"operateEachModel\"}>\r\n                <Container>\r\n                  <Row>\r\n                    <DeleteOneModel deleteModel={this.props.deleteModel}\r\n                      deletedFileName={model.FileName} />\r\n\r\n                    <ModelBriefInfo editModelDescription={this.props.editModelDescription}\r\n                      modelName={model.FileName}\r\n                      fetchModelFiles={this.props.fetchModelFiles} />\r\n\r\n                    <Link to={`/visualisation/${model.FileName}`}>\r\n                      <IconButton aria-label=\"visualisation\" component=\"span\">\r\n                        <InsertChart />\r\n                      </IconButton>\r\n                    </Link>\r\n                  </Row>\r\n                </Container>\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderModelTable(models = [], isLoading) {\r\n    if (isLoading) {\r\n      return (\r\n        <Loading />\r\n      );\r\n    } else {\r\n      return (\r\n        <Table hover>\r\n          {this.tableHead()}\r\n          {this.tableBody(models)}\r\n        </Table>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Col className=\"search-box\">\r\n          <Col md={{ size: 7 }}>\r\n            <InputGroup style={{ width: '6' }}>\r\n              <Input placeholder=\"Search similar models here\" />\r\n              <InputGroupAddon addonType=\"append\">\r\n                <Button style={{ backgroundColor: '#378CC6' }}>Search</Button>\r\n              </InputGroupAddon>\r\n            </InputGroup>\r\n          </Col>\r\n        </Col>\r\n\r\n        <Col>\r\n          <ModelUploadComponent uploadModel={this.props.uploadModel} />\r\n        </Col>\r\n\r\n        <Col className=\"database\">\r\n          {this.renderModelTable(this.props.modelFiles, this.props.isLoading)}\r\n        </Col>\r\n\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SOMModel;\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\configureStore.js",["200"],"import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport { createForms } from 'react-redux-form';\r\nimport { DatasetFiles } from './datasetFiles';\r\nimport { ModelFiles } from './modelFiles';\r\nimport { DetailedData } from './detailedData';\r\nimport { Metadata } from './metadata';\r\nimport { User } from './user';\r\nimport { ConnectionFiles } from './connectionResult';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        combineReducers({\r\n            user: User,\r\n            datasetFiles: DatasetFiles,\r\n            modelFiles: ModelFiles,\r\n            detailedData: DetailedData,\r\n            metadata: Metadata,\r\n            connectionFiles: ConnectionFiles\r\n        }),\r\n        // applyMiddleware can return store enhancer\r\n        // after this, thunk and logger are available within the application\r\n        applyMiddleware(thunk, logger)\r\n    );\r\n\r\n    return store;\r\n}\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\Signup.js",["201","202","203","204"],"import React, {useState} from 'react'\r\nimport { Grid, Paper,Avatar,Typography } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Link from '@material-ui/core/Link';\r\nimport {Formik,Field,Form,ErrorMessage} from 'formik';\r\nimport * as Yup from 'yup'\r\n\r\n\r\nimport {\r\n  signUp, updateUser\r\n} from '../redux/ActionCreators';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {Col, Modal, ModalBody, ModalHeader, Row} from \"reactstrap\";\r\nconst mapDispatchToProps = dispatch => ({\r\n  signUp: (data,cb) => { dispatch(signUp(data,cb)) },\r\n});\r\nconst Signup=(props)=>{\r\n    const paperStyle = {padding :20,height:'90vh',margin:\"20px auto\"}\r\n    let myStyle={\r\n        color:'#6495ED',\r\n        fontSize:'48px',\r\n        fontWeight:'bold',\r\n        fontStyle:'italic'\r\n    }\r\n    let username={\r\n        margin:'10px'\r\n    }\r\n    let password={\r\n        margin:'10px'\r\n    }\r\n    let confirmpassword={\r\n        margin:'10px'\r\n    }\r\n    let button={\r\n        margin:'20px',\r\n        fontSize:'24px',\r\n    }\r\nconst initialValues={\r\n    name:'',\r\n    password:'',\r\n    confirmpassword:'',\r\n    email:'',\r\n   \r\n}\r\nconst validationSchema=Yup.object().shape({\r\n    name:Yup.string().required(\"*Required!\"),\r\n    email:Yup.string().email(\"Enter vaild email!\").required(\"*Required!\"),\r\n    password:Yup.string().min(8,\"The password length should be at least 8 digits \").required(\"*Required!\"),\r\n    confirmpassword:Yup.string().oneOf([Yup.ref('password')],\"Password not matched\").required(\"*Required!\")\r\n   \r\n})\r\n\r\n  const [isModalOpen, setModal] = useState(false);\r\n  const [modalContent, setModalContent] = useState('');\r\n\r\n  const handlenNoBtn = () => {\r\n    setModal(!isModalOpen);\r\n  };\r\n\r\n\r\n  const onSubmit=(values)=>{\r\n    console.log(values)\r\n  props.signUp(values,res=>{\r\n    setModal(true)\r\n    console.log(res);\r\n    setModalContent(res.toString())\r\n  })\r\n}\r\n    return(\r\n        \r\n            <Paper elevation={10} style={paperStyle}>\r\n            <Grid >\r\n            <div style={myStyle}> SOM </div>\r\n            <h3>Sign Up</h3>\r\n            <Typography variant='caption'>Please register your own account</Typography>\r\n            </Grid>\r\n            \r\n            <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n                {(props)=>(\r\n                    <Form>\r\n                        <div style={username}>\r\n                        <Field as={TextField}\r\n                            id=\"outlined-search\" \r\n                            name=\"name\"\r\n                            label=\"username\" \r\n                            type=\"search\" \r\n                            placeholder=\"Enter your name\"\r\n                            helperText={\r\n                                <ErrorMessage name=\"name\"/>\r\n                            }\r\n                            variant=\"outlined\" />\r\n                        </div>\r\n                        <div style={password}>\r\n                        <Field as={TextField}\r\n                            id=\"outlined-password-input\"\r\n                            name=\"password\"\r\n                            label=\"password\"\r\n                            type=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            helperText={\r\n                                <ErrorMessage name=\"password\"/>\r\n                            }\r\n                            variant=\"outlined\"/>\r\n                        </div>\r\n                        <div style={confirmpassword}>\r\n                        <Field as={TextField}\r\n                            id=\"outlined-confirmpassword-input\"\r\n                            name=\"confirmpassword\"\r\n                            label=\"confirm password\"\r\n                            type=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            helperText={\r\n                                <ErrorMessage name=\"confirmpassword\"/>\r\n                            }\r\n                            variant=\"outlined\"/>\r\n                        </div>\r\n                        <Field as={TextField}\r\n                            id=\"outlined-email-input\"\r\n                            name=\"email\"\r\n                            label=\"email\"\r\n                            type=\"search\"\r\n                            autoComplete=\"current-password\"\r\n                            helperText={\r\n                                <ErrorMessage name=\"email\"/>\r\n                            }\r\n                            variant=\"outlined\"/>\r\n\r\n                        <div style={button}>\r\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\r\n                        Sign Up\r\n                        </Button>\r\n                        </div> \r\n    \r\n                    </Form>\r\n                )}\r\n\r\n\r\n\r\n\r\n            </Formik>\r\n              <Modal isOpen={isModalOpen} centered={true}>\r\n                <ModalBody>\r\n                  <p>{modalContent}</p>\r\n                  <Row>\r\n                    <Col>\r\n                      <Button onClick={handlenNoBtn}>Ok</Button>\r\n                    </Col>\r\n                  </Row>\r\n                </ModalBody>\r\n              </Modal>\r\n            </Paper>\r\n\r\n\r\n       \r\n    )\r\n}\r\nexport default withRouter(connect(null, mapDispatchToProps)(Signup));\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\SidebarComponent.js",["205","206","207","208","209","210"],"import React, {Component, useEffect} from 'react';\r\nimport { Card, CardImg, Media } from 'reactstrap';\r\nimport { Container } from 'reactstrap';\r\nimport { ListGroup, ListGroupItem } from 'reactstrap';\r\nimport {useHistory} from 'react-router-dom'\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport {useDispatch} from 'react-redux'\r\nimport {updateUser} from '../redux/ActionCreators'\r\n\r\n\r\nfunction Sidebar(props){\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n    useEffect(()=>{\r\n      if(!props.username){\r\n        history.replace('/login')\r\n      }\r\n    },[])\r\n    return (\r\n        <div className=\"col col-md\">\r\n          <div style={{textAlign:'center', fontSize:13, color: 'grey'}}>{props.username}<span onClick={()=>{\r\n            dispatch(updateUser(null));\r\n            localStorage.removeItem(\"username\");\r\n            localStorage.removeItem(\"password\");\r\n            localStorage.removeItem(\"verifiedUsername\");\r\n            history.replace('/login');\r\n          }} style={{marginLeft:24,paddingLeft:24, fontSize:13, borderLeft:'1px solid',color:'#378CC6',cursor:'pointer'}}>sign out</span></div>\r\n            <div className=\"side-group\">\r\n                <ListGroup className=\"side-items\" flush>\r\n                    <Media className=\"logo\" src={'/assets/logo.png'} alt={'som log'}/>\r\n\r\n                    <ListGroupItem action>\r\n                        <NavLink className=\"nav-link\" to=\"/uploading\">\r\n                            <span className=\"slide-icon fa fa-database\"></span>\r\n                            &nbsp;Uploading\r\n                        </NavLink>\r\n                    </ListGroupItem>\r\n\r\n                    <ListGroupItem action>\r\n                        <NavLink className=\"nav-link\" to=\"/mydatabase\">\r\n                            <span className=\"slide-icon fa fa-database\"></span>\r\n                            &nbsp;My database\r\n                        </NavLink>\r\n                    </ListGroupItem>\r\n\r\n                    <ListGroupItem action>\r\n                        <NavLink className=\"nav-link\" to=\"/mymodels\">\r\n                            <span className=\"slide-icon fa fa-cubes\"></span>\r\n                            My models\r\n                        </NavLink>\r\n                    </ListGroupItem>\r\n                      \r\n                    <ListGroupItem action>\r\n                        <NavLink className=\"nav-link\" to=\"/visualisation\">\r\n                            <span className=\"slide-icon fa fa-area-chart\"></span>\r\n                            Visualisation\r\n                            </NavLink>\r\n                    </ListGroupItem>\r\n                           \r\n                </ListGroup>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Sidebar;\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\login.js",["211","212","213","214","215"],"import React, { useEffect, useState } from 'react';\r\nimport { Grid, Paper, Typography } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Link from '@material-ui/core/Link';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Modal, ModalHeader, ModalBody, Row, Col } from 'reactstrap';\r\n\r\nimport {\r\n  login, updateUser\r\n} from '../redux/ActionCreators';\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.user,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  login: (data) => { dispatch(login(data)) },\r\n  updateUser: (data) => { dispatch(updateUser(data)) },\r\n});\r\n\r\nconst Login = ({ handleChange, ...props }) => {\r\n  const paperStyle = { padding: 20, height: '70vh auto', margin: \"20px auto\" }\r\n  let myStyle = {\r\n    color: '#6495ED',\r\n    fontSize: '48px',\r\n    fontWeight: 'bold',\r\n    fontStyle: 'italic'\r\n  }\r\n  let root = {\r\n    '& .MuiTextField-root': {\r\n      margin: '20ch',\r\n      width: '25ch',\r\n    }\r\n  }\r\n  let username = {\r\n    margin: '30px'\r\n  }\r\n  let button = {\r\n    margin: '30px',\r\n    fontSize: '24px',\r\n  }\r\n  const initialValues = {\r\n    username: '',\r\n    password: ''\r\n\r\n  }\r\n  const validationSchema = Yup.object().shape({\r\n    username: Yup.string().required(\"*Required!\"),\r\n    password: Yup.string().required(\"*Required!\")\r\n\r\n  })\r\n  const [user, setUser] = useState('')\r\n  const onSubmit = (values) => {\r\n    console.log(\"check username and password\", values)\r\n    // save into the local session\r\n    console.log(values.username)\r\n    sessionStorage.setItem('username', values.username);\r\n    sessionStorage.setItem('password', values.password)\r\n    const loginInfo = { username: sessionStorage.getItem('username'), password: sessionStorage.getItem('password') };\r\n    console.log(\"userInfo \", loginInfo);\r\n    setUser(loginInfo.username);\r\n    props.login(loginInfo);\r\n  }\r\n\r\n  const [isModalOpen, setModal] = useState(false);\r\n\r\n  const handlenNoBtn = () => {\r\n    setModal(!isModalOpen);\r\n    //location.reload()\r\n    props.updateUser(null)\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    console.log(\"helllloo\");\r\n    console.log(123, sessionStorage.getItem('verifiedUsername'));\r\n    if (sessionStorage.getItem('verifiedUsername') != undefined || sessionStorage.getItem('verifiedUsername') !== null){\r\n      props.updateUser(sessionStorage.getItem('verifiedUsername'));\r\n    }\r\n    \r\n    if (props.user.userInfo) {\r\n      console.log(props.user.userInfo);\r\n      if (sessionStorage.getItem('verifiedUsername') === sessionStorage.getItem('username')) {\r\n        props.history.replace('/');\r\n      } else {\r\n        setModal(!isModalOpen);\r\n      }\r\n      //弹出一个警示，告诉用户登陆失败\r\n\r\n    }\r\n  }, [props.user.userInfo])\r\n\r\n  return (\r\n    <Grid>\r\n      <Paper elevation={10} style={paperStyle}>\r\n        <div style={myStyle}> SOM </div>\r\n        <h3>Sign In</h3>\r\n        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n          {(props) => (\r\n            <Form>\r\n              <div>\r\n                <div style={username}>\r\n                  <Field as={TextField}\r\n                    id=\"outlined-search\"\r\n                    label=\"username\"\r\n                    name=\"username\"\r\n                    type=\"search\"\r\n                    helperText={\r\n                      <ErrorMessage name=\"username\" />\r\n                    }\r\n                    variant=\"outlined\" />\r\n                </div>\r\n\r\n                <div>\r\n                  <Field as={TextField}\r\n                    id=\"outlined-password-input\"\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    autoComplete=\"current-password\"\r\n                    helperText={\r\n                      <ErrorMessage name=\"password\" />\r\n                    }\r\n                    variant=\"outlined\" />\r\n                </div>\r\n\r\n              </div>\r\n              <div style={button}>\r\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\r\n                  Sign In\r\n                      </Button>\r\n              </div>\r\n            </Form>\r\n          )}\r\n\r\n\r\n        </Formik>\r\n\r\n        <div style={button}>\r\n\r\n\r\n          <Typography> don't have an account yet?\r\n                <Link href=\"#\" onClick={() => handleChange(\"event\", 1)}>\r\n              Sign up\r\n                </Link>\r\n          </Typography>\r\n        </div>\r\n\r\n      </Paper>\r\n      <Modal isOpen={isModalOpen} centered={true}>\r\n        <ModalHeader>warning!</ModalHeader>\r\n        <ModalBody>\r\n          <p>Username and password do not match</p>\r\n          <Row>\r\n            <Col>\r\n              <Button onClick={handlenNoBtn}>Ok</Button>\r\n            </Col>\r\n          </Row>\r\n        </ModalBody>\r\n      </Modal>\r\n\r\n    </Grid>\r\n\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\LoadingComponent.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DatasetUploadComponent.js",["216","217","218","219","220","221","222"],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DeleteOneDataset.js",["223","224","225","226"],"import { Modal, ModalHeader, ModalBody, Button, Row, Col} from 'reactstrap';\r\nimport React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\r\nimport { IconButton, TableRow } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nfunction DeleteOneDataset(props) {\r\n    const [isModalOpen, setModal] = useState(false);\r\n\r\n    const toggleModal = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    // while a user chooses not to delete a dataset\r\n    const handlenNoBtn = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    //while a user chooses to delete a dataset\r\n    const handleYesBtn= () => {\r\n        console.log(\"filename is \" + props.deletedFileName);\r\n        console.log(typeof(props.deleteDataset));\r\n        props.deleteDataset(props.deletedFileName, sessionStorage.getItem('verifiedUsername'));\r\n        setModal(!isModalOpen);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <IconButton aria-label=\"delete a dataset\" component=\"span\">\r\n                <DeleteIcon onClick={toggleModal} />\r\n            </IconButton>\r\n\r\n            <Modal isOpen={isModalOpen} toggle={toggleModal} centered={true}>\r\n                <ModalHeader toggle={toggleModal}>Dataset Delete</ModalHeader>\r\n                <ModalBody>\r\n                    <p>Do you want to delete this dataset?</p>\r\n                    <Row>\r\n                        <Col>\r\n                            <Button onClick={handleYesBtn} style={{backgroundColor: '#378CC6'}}>Yes</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={handlenNoBtn}>No</Button>\r\n                        </Col>          \r\n                    </Row>\r\n                </ModalBody>\r\n            </Modal>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default DeleteOneDataset;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ModelBriefInfo.js",["227","228","229"],"import { Modal, ModalHeader, ModalBody, Button, Row, Col, Input } from 'reactstrap';\r\nimport React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\r\nimport { IconButton, TableRow } from '@material-ui/core';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\n\r\nfunction ModelBriefInfo(props) {\r\n    const [isModalOpen, setModal] = useState(false);\r\n    const [briefInfo, setBriefInfo] = useState('');\r\n    const el = useRef(); // accesing input element\r\n\r\n    const toggleModal = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    // while a user chooses not to delete a model\r\n    const handlenNoBtn = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    //while a user chooses to delete a model\r\n    const handleYesBtn = () => {\r\n        console.log(\"filename is \" + props.modelName);\r\n        console.log(props.modelName);\r\n        props.editModelDescription(props.modelName, briefInfo, sessionStorage.getItem('verifiedUsername'));\r\n        setModal(!isModalOpen);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <IconButton aria-label=\"delete a model\" component=\"span\">\r\n                <CreateIcon onClick={toggleModal} />\r\n            </IconButton>\r\n\r\n            <Modal isOpen={isModalOpen} toggle={toggleModal} centered={true}>\r\n                <ModalHeader toggle={toggleModal}>Model Delete</ModalHeader>\r\n                <ModalBody>\r\n                    <Input placeholder={'Model description'} ref={el} value={briefInfo} onChange={event => setBriefInfo(event.target.value)} />\r\n                    <Row>\r\n                        <Col>\r\n                            <Button onClick={handleYesBtn} style={{ backgroundColor: '#378CC6' }}>Yes</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={handlenNoBtn}>No</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </ModalBody>\r\n            </Modal>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ModelBriefInfo;\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\searchFileComponent.js",["230","231","232"],"import React, { useState, useRef } from 'react';\r\nimport { InputGroup, InputGroupText, InputGroupAddon, Input } from 'reactstrap';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\n\r\nfunction SearchFile(props) {\r\n    const [inputValue, setInput] = useState('');\r\n    const el = useRef(); // accesing input element\r\n\r\n    const handleChange = (event) => {\r\n        const userInput = event.target.value;\r\n        console.log(\"the user input: \", userInput);\r\n        setInput(event.target.value);\r\n    };\r\n\r\n    const handleClick = () => {\r\n        console.log(\"the current input value: \", inputValue);\r\n        props.queryDatasets(inputValue, sessionStorage.getItem('verifiedUsername'));\r\n    };\r\n\r\n    return (\r\n        <Col md={{ size: 7 }}>\r\n            <InputGroup style={{ width: '6' }} >\r\n                <Input ref={el} onChange={handleChange} placeholder=\"Search similar datasets here\" />\r\n                <InputGroupAddon addonType=\"append\">\r\n                    <Button onClick={handleClick} style={{ backgroundColor: '#378CC6' }}>Search</Button>\r\n                </InputGroupAddon>\r\n            </InputGroup>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default SearchFile;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DeleteOneModel.js",["233","234","235","236"],"import { Modal, ModalHeader, ModalBody, Button, Row, Col} from 'reactstrap';\r\nimport React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\r\nimport { IconButton, TableRow } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nfunction DeleteOneModel(props) {\r\n    const [isModalOpen, setModal] = useState(false);\r\n\r\n    const toggleModal = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    // while a user chooses not to delete a model\r\n    const handlenNoBtn = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    //while a user chooses to delete a model\r\n    const handleYesBtn= () => {\r\n        console.log(\"filename is \" + props.deletedFileName);\r\n        console.log(typeof(props.deleteModel));\r\n        props.deleteModel([props.deletedFileName, sessionStorage.getItem('verifiedUsername')]);\r\n        setModal(!isModalOpen);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <IconButton aria-label=\"delete a model\" component=\"span\">\r\n                <DeleteIcon onClick={toggleModal} />\r\n            </IconButton>\r\n\r\n            <Modal isOpen={isModalOpen} toggle={toggleModal} centered={true}>\r\n                <ModalHeader toggle={toggleModal}>Model Delete</ModalHeader>\r\n                <ModalBody>\r\n                    <p>Do you want to delete this model?</p>\r\n                    <Row>\r\n                        <Col>\r\n                            <Button onClick={handleYesBtn} style={{backgroundColor: '#378CC6'}}>Yes</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={handlenNoBtn}>No</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </ModalBody>\r\n            </Modal>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default DeleteOneModel;\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ModelUploadComponent.js",["237","238","239","240","241","242","243"],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\detailedData.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\metadata.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\datasetFiles.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\user.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\modelFiles.js",["244"],"import * as ActionTypes from './ActionTypes';\r\n\r\nexport const ModelFiles = (state = {\r\n    isLoading: true,\r\n    errMess: null,\r\n    modelFiles: []\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_MODELFILES:\r\n            console.log(\"I wanna check model file\");\r\n            return { ...state, isLoading: false, errMess: null, modelFiles: action.payload };\r\n\r\n        case ActionTypes.MODELFILES_LOADING:\r\n            return { ...state, isLoading: true, errMess: null, modelFiles: [] }\r\n\r\n        case ActionTypes.MODELFILES_FAILED:\r\n            return { ...state, isLoading: false, errMess: action.payload };\r\n\r\n        case ActionTypes.UPLOAD_MODEL:\r\n            var model = action.payload; // get the uploaded model\r\n            return { ...state, modelFiles: [...state.modelFiles,...model] };\r\n\r\n        case ActionTypes.REMOVE_MODEL:\r\n            console.log(\"start delete\");\r\n            var modelName = action.payload; // to get the filename of the selected model\r\n            let deletedIndex = 0; // to find the corresponding index based on filename\r\n            console.log(\"get model is \" + modelName);\r\n            for (let [index, eachModel] of Object.entries(state.modelFiles)) {\r\n                if (eachModel.FileName === modelName) {\r\n                    deletedIndex = parseInt(index, 10);\r\n                }\r\n            }\r\n\r\n            console.log(\"deletedIndex is \" + deletedIndex);\r\n\r\n            const newModel = [\r\n                ...state.modelFiles.slice(0, deletedIndex),\r\n                ...state.modelFiles.slice(deletedIndex + 1, state.modelFiles.length)];\r\n\r\n            return { ...state, modelFiles: newModel };\r\n            \r\n        case ActionTypes.EDIT_MODEL_DESCRIPTION:\r\n            console.log(\"start edit\");\r\n            var {modelName,description} = action.payload;\r\n            console.log(\"my modelname:\", modelName);\r\n            console.log(\"my description:\", description)\r\n            state.modelFiles.forEach(item=>{\r\n              if(item.FileName===modelName){\r\n                item.BriefInfo=description\r\n              }\r\n            })\r\n            console.log(\"new modelFile: \", state.modelFiles)\r\n            return { ...state, modelFiles: [...state.modelFiles] };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\DetailedDatasetComponent.js",["245","246","247","248"],"import React, { Component, useEffect, useRef, useState } from 'react';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { Table } from 'reactstrap';\r\nimport { Loading } from './LoadingComponent';\r\nimport {emptyMetadata} from '../redux/metadataEmpty';\r\n\r\nconst RenderDetailedData = React.memo(({ detailedData, isLoading, errMess }) => {\r\n    // pass the datasetName to the backend server\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <Loading />\r\n        );\r\n    }\r\n    else if (errMess) {\r\n        return (\r\n            <h4>{errMess}</h4>\r\n        );\r\n    }\r\n    else {\r\n        console.log(\"detailed data is:\");\r\n        console.log(detailedData);\r\n        const colName = Object.keys(detailedData[Object.keys(detailedData)[0]]);\r\n        console.log(\"colname is \" + colName);\r\n        return (\r\n            <Table striped>\r\n                <thead>\r\n                    <tr key=\"tbhead\">\r\n                        {colName.map(col =>\r\n                            <th key={col}>{col}</th>\r\n                        )}\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {Object.keys(detailedData).map(row => // [row1, row2, row3, row4, row5]\r\n                        <tr>\r\n                            {Object.values(detailedData[row]).map(value =>\r\n                                <td>{value}</td>\r\n                            )}\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n\r\n            </Table>\r\n        );\r\n    }\r\n}, true);\r\n\r\nconst RenderMetadata = React.memo(({ metadata, isLoading, errMess, fileName }) => {\r\n    console.log(\"check metadata\");\r\n    console.log(JSON.stringify(metadata));\r\n    if (isLoading) {\r\n        return (\r\n            <Loading />\r\n        );\r\n    }\r\n    else if (errMess) {\r\n        return (\r\n            <h4>{errMess}</h4>\r\n        );\r\n    }\r\n    else{\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Table size=\"sm\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>Metadata: {fileName}</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n    \r\n                        <tbody>\r\n                            <tr>\r\n                                <th scope=\"row\">1</th>\r\n                                <td>Dataset description:</td>\r\n                                <td>{metadata.Description}</td>\r\n                            </tr>\r\n    \r\n                            <tr>\r\n                                <th scope=\"row\">2</th>\r\n                                <td>Source:</td>\r\n                                <td>{metadata.Source}</td>\r\n                            </tr>\r\n    \r\n                            <tr>\r\n                                <th scope=\"row\">3</th>\r\n                                <td>Number of instances</td>\r\n                                <td>{metadata.Number_of_Instance}</td>\r\n                            </tr>\r\n    \r\n                            <tr>\r\n                                <th scope=\"row\">4</th>\r\n                                <td>Number of attributes:</td>\r\n                                <td>{metadata.Number_of_Attribute}</td>\r\n                            </tr>\r\n    \r\n                            <tr>\r\n                                <th scope=\"row\">5</th>\r\n                                <td>Whether the dataset contains labels:</td>\r\n                                <td>{metadata.Label}</td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th scope=\"row\">6</th>\r\n                                <td>Keywords:</td>\r\n                                <td>{JSON.stringify(metadata.Keywords)}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </Table>\r\n                </Row>\r\n    \r\n                <Row>\r\n                    <Table size=\"sm\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Attributes</th>\r\n                                <th>Description</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {metadata.AttrInfo.map((eachAttr, index) =>\r\n                                <tr key={index}>\r\n                                    {Object.values(eachAttr).map(eachValue => <td key={eachValue}>{eachValue}</td>)}\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </Table>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}, true);\r\n   \r\n\r\nconst DetailedDataset = React.memo((props) => {\r\n    const FileName = localStorage.getItem('datasetname-detaileddata');\r\n    console.log(\"local get file name: \", FileName);\r\n    \r\n    useEffect(() => {\r\n        props.sendNameForDetailedData(FileName, sessionStorage.getItem('verifiedUsername'));\r\n    });\r\n    \r\n    return (\r\n        <Container>\r\n            <Col className=\"detailed-metadata\" >\r\n                <Col md={{ size: 7 }}>\r\n                    <RenderMetadata metadata={props.metadata} isLoading={props.isLoading_metadata} errMess={props.errMess_metadata}\r\n                        fileName={FileName} />\r\n                </Col>\r\n            </Col>\r\n\r\n            <Col className=\"detailed-database\">\r\n                <RenderDetailedData detailedData={props.detailedData} isLoading={props.isLoading_detailedData} errMess={props.errMess_detailedData} />\r\n            </Col>\r\n        </Container>\r\n    );\r\n}, true);\r\n\r\nexport default DetailedDataset;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\ActionCreators.js",["249","250","251"],"import * as ActionTypes from './ActionTypes';\r\nimport { DATASETFILES } from '../database/datasetFiles';\r\nimport { MODELFILES } from '../database/modelFiles';\r\nimport { backendUrl } from '../server/backendUrl';\r\nimport http from \"../server/baseUrl\";\r\nimport baseUrl from '../server/baseUrl';\r\n/**\r\n * User\r\n */\r\nexport const login = (data) => (dispatch) => {\r\n  return http.post('/login', JSON.stringify(data), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }})\r\n    .then(res => {\r\n      //console.log(data.username); \r\n      if(res.data === data.username){\r\n        sessionStorage.setItem('verifiedUsername', res.data);\r\n        dispatch(updateUser(res.data));// success\r\n      }\r\n      else{\r\n        dispatch(updateUser(res));\r\n      }\r\n      \r\n    })\r\n    .catch((err) => console.log(err));\r\n\r\n}\r\nexport const signUp = (data,cb) => (dispatch) => {\r\n\r\n  return http.post('/sign-up', JSON.stringify(data), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }}).then(res => {\r\n      cb(res.data)\r\n\r\n  })\r\n    .catch((err) => console.log(err));\r\n}\r\nexport const updateUser = (userInfo) => ({\r\n  type: ActionTypes.LOGIN,\r\n  payload: userInfo\r\n});\r\n\r\n/**\r\n * Connect datasets and a model\r\n */\r\n// uploading a new model file\r\nexport const connectUploading = (files, onUploadProgress) => (dispatch) => {\r\n  console.log(\"connect start\");\r\n  // post the uploaded model to the backend server\r\n  return http.post('/connect-upload', files, {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    },\r\n    onUploadProgress,\r\n  })\r\n  .then(res => {\r\n    console.log(\"this is response for connection uploading\");\r\n    console.log(res);\r\n    dispatch(addConnections(res.data));\r\n  });\r\n};\r\n\r\nexport const addConnections = (filename) => ({\r\n  type: ActionTypes.ADD_CONNECTIONS,\r\n  payload: filename\r\n});\r\n\r\n\r\n/**\r\n * Dataset\r\n */\r\n// fetch datasets from the backend server\r\nexport const fetchDatasetFiles = (userName) => (dispatch) => {\r\n\r\n  dispatch(datasetFilesLoading(true));\r\n\r\n  return http.post('/datasetFiles', JSON.stringify(userName), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }}) // backend address: Localhost: 5000/datasetFiles\r\n      .then(res => dispatch(addDatasetFiles(res.data))) // when the datasetFiles is obtained, we dispatch it into addDatasetFiles()\r\n      .catch((err) => console.log(err));\r\n}\r\n\r\nexport const datasetFilesLoading = () => ({\r\n  type: ActionTypes.DATASETFILES_LOADING\r\n});\r\n\r\nexport const datasetFilesFailed = (errmess) => ({\r\n  type: ActionTypes.DATASETFILES_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const addDatasetFiles = (datasetFiles) => ({\r\n  type: ActionTypes.ADD_DATASETFILES,\r\n  payload: datasetFiles\r\n});\r\n\r\nexport const addDataset = (dataset) => ({\r\n  type: ActionTypes.UPLOAD_DATASET,\r\n  payload: dataset\r\n});\r\n\r\n\r\n// uploading a new dataset file\r\nexport const uploadDataset = (dataset, onUploadProgress) => (dispatch) => {\r\n  // post the uploaded dataset to the backend server\r\n  return http.post('/upload', dataset, {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n      onUploadProgress,\r\n    })\r\n      .then(res => {\r\n          console.log(\"this is response for uploading dataset\");\r\n          console.log(res);\r\n      })\r\n      .then(res => {\r\n          dispatch(fetchUploadedDataset());\r\n      })\r\n};\r\n\r\n// get the uploded dataset info when the uploading is done in the backend\r\nexport const fetchUploadedDataset = () => (dispatch) => {\r\n  return fetch(backendUrl + 'newDataset')\r\n      .then(response => response.json())\r\n      .then(dataset => dispatch(addDataset(dataset)))\r\n      .then(data => {\r\n          console.log(\"this is data\");\r\n          console.log(data);\r\n      });\r\n};\r\n\r\nexport const removeOneDataset = (datasetName) => ({\r\n  type: ActionTypes.REMOVE_DATASET,\r\n  payload: datasetName\r\n});\r\n\r\n// pass the filename to the backend server and tell it to delete corresponding dataset\r\nexport const deleteOneDataset = (datasetName, userName) => (dispatch) => {\r\n  return http.post('/delete-dataset', JSON.stringify([datasetName, userName]), {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      }})\r\n      .then(res => {\r\n          console.log(\"this is response for delete dataset\");\r\n          console.log(res);\r\n          dispatch(removeOneDataset(res.data));\r\n      })\r\n      .catch((err) => console.log(err));\r\n};\r\n\r\n//query datasets\r\nexport const queryDatasets = (inputValue, userName) => (dispatch) => {\r\n  return http.post('/query-datasets', JSON.stringify([inputValue, userName]), {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      }})\r\n      .then(res => {\r\n          console.log(\"this is response for querying datasets\");\r\n          console.log(res.data);\r\n          dispatch(addDatasetFiles(res.data))\r\n      })\r\n      .catch((err) => console.log(err));\r\n};\r\n\r\n\r\n/**\r\n * Models\r\n */\r\n// fetch models from the backend server\r\nexport const fetchModelFiles = (userName) => (dispatch) => {\r\n  // test\r\n  // return dispatch(addModelFiles(MODELFILES))\r\n\r\n  dispatch(modelFilesLoading(true));\r\n\r\n  return http.post('/modelFiles', JSON.stringify(userName), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }}) // backend address: Localhost: 5000/modelFiles\r\n    .then(res => {\r\n      console.log(res)\r\n      dispatch(addModelFiles(res.data))\r\n    }) // when the modelFiles is obtained, we dispatch it into addModelFiles()\r\n    .catch((err) => console.log(err));\r\n}\r\n\r\nexport const modelFilesLoading = () => ({\r\n  type: ActionTypes.MODELFILES_LOADING\r\n});\r\n\r\nexport const modelFilesFailed = (errmess) => ({\r\n  type: ActionTypes.MODELFILES_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const addModelFiles = (modelFiles) => ({\r\n  type: ActionTypes.ADD_MODELFILES,\r\n  payload: modelFiles\r\n});\r\n\r\nexport const addModel = (model) => ({\r\n  type: ActionTypes.UPLOAD_MODEL,\r\n  payload: model\r\n});\r\n\r\n// uploading a new model file\r\nexport const uploadModel = (model, onUploadProgress) => (dispatch) => {\r\n  // post the uploaded model to the backend server\r\n  return http.post('/upload-model', model, {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    },\r\n    onUploadProgress,\r\n  })\r\n    .then(res => {\r\n      console.log(\"this is response model\");\r\n      console.log(res);\r\n    })\r\n    .then(res => {\r\n      dispatch(fetchUploadedModel());\r\n    })\r\n};\r\n\r\n// get the uploded model info when the uploading is done in the backend\r\nexport const fetchUploadedModel = () => (dispatch) => {\r\n  return fetch(backendUrl + 'newModel')\r\n    .then(response => response.json())\r\n    .then(model => dispatch(addModel(model)))\r\n    .then(data => {\r\n      console.log(\"this is data\");\r\n      console.log(data);\r\n    });\r\n};\r\n\r\nexport const removeOneModel = (modelName) => ({\r\n  type: ActionTypes.REMOVE_MODEL,\r\n  payload: modelName\r\n});\r\n\r\nexport const editOneModelDescription = (modelName,description) => ({\r\n  type: ActionTypes.EDIT_MODEL_DESCRIPTION,\r\n  payload: {modelName,description}\r\n});\r\n\r\n// pass the filename to the backend server and tell it to delete corresponding model\r\nexport const deleteOneModel = (modelName, userName) => (dispatch) => {\r\n  return http.post('/delete-model', JSON.stringify([modelName, userName]), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }})\r\n    .then(res => {\r\n      console.log(\"this is response for delete model\");\r\n      console.log(res);\r\n      dispatch(removeOneModel(res.data));\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\nexport const editModelDescription = (modelName, description, userName) => (dispatch) => {\r\n  console.log(\"edit user name: \", userName)\r\n  return http.post('/edit-model-desc', JSON.stringify({modelName, description, userName}), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }})\r\n    .then(res => {\r\n      console.log(\"this is response for delete model\");\r\n      console.log(res);\r\n      dispatch(editOneModelDescription(modelName,description));\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\n\r\n/**\r\n * Metadata\r\n */\r\n// submit metadata of a dataset\r\nexport const submitMetadata = (metadata) => (dispatch) => {\r\n  return http.post('/submit-metadata', JSON.stringify(metadata), {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      }})\r\n      .then(res => {\r\n          console.log(\"this is response for metadata\");\r\n          console.log(res);\r\n          dispatch(addMetadata(res.data));\r\n      })\r\n      .catch((err) => console.log(err));\r\n};\r\n\r\nexport const addMetadata = (metadata) => ({\r\n  type: ActionTypes.ADD_METADATA,\r\n  payload: metadata\r\n});\r\n\r\nexport const metadataFailed = (errmess) => ({\r\n  type: ActionTypes.METADATA_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const metadataLoading = () => ({\r\n  type: ActionTypes.METADATA_LOADING\r\n});\r\n\r\n/**\r\n * Detailed data\r\n */\r\n export const sendNameForDetailedData = (datasetName, userName) => (dispatch) => {\r\n  console.log(\"start detailed loading\");\r\n\r\n  return http.post('/detailedData-name', JSON.stringify([datasetName, userName]), {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      }})\r\n      .then(res => {\r\n          console.log(\"this is response for detailed data\");\r\n          console.log(res.data);\r\n          dispatch(addDetailedData(res.data[0]));\r\n          dispatch(addMetadata(res.data[1]));\r\n      })\r\n      .catch((err) => console.log(err));\r\n}\r\n\r\nexport const addDetailedData = (detaileddata) => ({\r\n  type: ActionTypes.ADD_DETAILEDDATA,\r\n  payload: detaileddata\r\n});\r\n\r\nexport const detailedDataFailed = (errmess) => ({\r\n  type: ActionTypes.DETAILEDDATA_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const detailedDataLoading = () => ({\r\n  type: ActionTypes.DETAILEDDATA_LOADING\r\n});\r\n\r\n\r\n\r\n\r\n","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\MetadataForm.js",["252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270"],"import React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\r\nimport { Button, Row, Col, Label, Container } from 'reactstrap';\r\nimport { Control, LocalForm, Form, Errors, actions } from 'react-redux-form';\r\nimport ReactTagInput from \"@pathofdev/react-tag-input\";\r\nimport { Link } from 'react-router-dom';\r\nimport { IconButton, Modal } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport \"@pathofdev/react-tag-input/build/index.css\";\r\n\r\nfunction MetadataForm(props) {\r\n\r\n    const FileName = localStorage.getItem('datasetname-metadata');\r\n    console.log(\"local get file name: \", FileName);\r\n\r\n    const BriefInfo = props.metadata.BriefInfo !== \"\" ? props.metadata.BriefInfo : \"Please input a brief description for the dataset\";\r\n    const Description = props.metadata.Description !== \"\" ? props.metadata.Description : \"Please input a detailed description for the dataset\";\r\n    const Source = props.metadata.Source !== \"\" ? props.metadata.Source : \"Please input the source\";\r\n    const Keywords = props.metadata.Keywords.length !== 0 ? String(props.metadata.Keywords) : \"Type and press Enter\";\r\n    const AttrLen = props.metadata.AttrInfo.length !== 0 ? props.metadata.AttrInfo.length : attr;\r\n    const AttrInfo = props.metadata.AttrInfo.map(eachAttr => eachAttr);\r\n    console.log(\"Attr Info check\", AttrInfo);\r\n\r\n    const [tags, setTags] = useState([]);\r\n    const [attr, setAttr] = useState(AttrLen);\r\n\r\n\r\n    const handleSubmit = (values) => {\r\n        const attrInfo = integrateAttrInfo(attr, values);\r\n        const fixedValue = fixEmptyForm(values, tags, attrInfo);\r\n        console.log('Current State is: ' + JSON.stringify(fixedValue));\r\n\r\n        // 'props.submitMetadata' is from Redux actionCreators, which is used to post the metadata to the backend server\r\n        props.submitMetadata(fixedValue);\r\n        alert(`Current State is:  ${JSON.stringify(fixedValue)}`);\r\n        //props.resetMetadata();\r\n        props.fetchDatasetFiles();\r\n    };\r\n\r\n    const TagInputs = (tags) => {\r\n        const { model, dispatch } = props;\r\n        return <ReactTagInput tags={tags} onChange={(newTags) => setTags(newTags)} onCustomChange={e => dispatch(actions.change(model, e))} />\r\n    };\r\n\r\n    const handleAddClick = () => {\r\n        setAttr(attr + 1);\r\n    };\r\n\r\n    const handleRemoveClick = () => {\r\n        if (attr > 1) {\r\n            setAttr(attr - 1);\r\n        } else {\r\n            setAttr(1);\r\n        }\r\n    };\r\n\r\n    const AttrRow = (attrNum, showButtons) => {\r\n\r\n        const AttrName = AttrInfo[attrNum-1] == undefined || AttrInfo[attrNum-1].attrName === \"\"  ?  \"attribute name\" : AttrInfo[attrNum-1].attrName;\r\n        const AttrDescription = AttrInfo[attrNum-1] == undefined || AttrInfo[attrNum-1].attrDescription === \"\" ? \"attribute description\" : AttrInfo[attrNum-1].attrDescription;\r\n        \r\n\r\n        if (showButtons) {\r\n            return (\r\n                <Row>\r\n                    <Label md={2} className=\"attribute\" htmlFor=\"attrInfo\">{`Attribute${attrNum}: `}</Label>\r\n                    <Label className=\"attribute\" htmlFor=\"attrName\"></Label>\r\n                    <Col className=\"align-item-center\">\r\n                        <Control.text md={1} model={`.attrName${attrNum}`} id={`.attrName${attrNum}`} name=\"attrName\" placeholder={AttrName} className=\"form-control\" />\r\n                    </Col>\r\n\r\n                    <Label className=\"attribute\" htmlFor=\"attrDescription\"></Label>\r\n                    <Col className=\"align-item-center\">\r\n                        <Control.text md={1} model={`.attrDescription${attrNum}`} id={`.attrDescription${attrNum}`} name=\"attrInfo\" placeholder={AttrDescription} className=\"form-control\" />\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <Row>\r\n                            <IconButton onClick={handleAddClick} aria-label=\"add an attribute\" component=\"span\">\r\n                                <AddIcon />\r\n                            </IconButton>\r\n                            <IconButton onClick={handleRemoveClick} aria-label=\"remove an attribute\" component=\"span\">\r\n                                <RemoveIcon />\r\n                            </IconButton>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Row>\r\n                    <Label md={2} className=\"attribute\" htmlFor=\"attrInfo\">{`Attribute${attrNum}: `}</Label>\r\n                    <Label className=\"attribute\" htmlFor=\"attrName\"></Label>\r\n                    <Col className=\"align-item-center\">\r\n                        <Control.text md={1} model={`.attrName${attrNum}`} id={`.attrName${attrNum}`} name=\"attrName\" placeholder={AttrName} className=\"form-control\" />\r\n                    </Col>\r\n\r\n                    <Label className=\"attribute\" htmlFor=\"attrDescription\"></Label>\r\n                    <Col className=\"align-item-center\">\r\n                        <Control.text md={1} model={`.attrDescription${attrNum}`} id={`.attrDescription${attrNum}`} name=\"attrInfo\" placeholder={AttrDescription} className=\"form-control\" />\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <Row>\r\n                            <IconButton className=\"nodisplay\" aria-label=\"add an attribute\" component=\"span\">\r\n                                <AddIcon />\r\n                            </IconButton>\r\n                            <IconButton className=\"nodisplay\" aria-label=\"remove an attribute\" component=\"span\">\r\n                                <RemoveIcon />\r\n                            </IconButton>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            );\r\n        }\r\n\r\n    };\r\n\r\n    const AttrForm = (num) => {\r\n        let arr = [];\r\n        let attrArray = [];\r\n        for (let i = 0; i < num; i++) {\r\n            arr.push(AttrRow(i + 1, false));\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    // this function is for integrate all attribution infos into an array\r\n    // so that it can be send into the backend server as a whole\r\n    const integrateAttrInfo = (attrNum, values) => {\r\n        let attrInfo = [];\r\n\r\n        for (let i = 0; i < attrNum; i++) {\r\n            let attrIndex = `Attribute${i + 1}`;\r\n\r\n            attrIndex = {\r\n                // to identify if the attrName exists in the values (meaning if a user input words into it)\r\n                // if not, then adding \"\" to attrName; if the user inputted, then keep the inputted value\r\n                attrName: values[`attrName${i + 1}`] == null ? AttrInfo[i].attrName : values[`attrName${i + 1}`],\r\n                attrDescription: values[`attrDescription${i + 1}`] == null ? AttrInfo[i].attrDescription : values[`attrDescription${i + 1}`]\r\n            };\r\n\r\n            attrInfo.push(attrIndex);\r\n        }\r\n        return attrInfo;\r\n    };\r\n\r\n    // this function is to fill up \"\" while a user input nothing in a form filed.\r\n    const fixEmptyForm = (values, tags, attrInfo) => {\r\n        let inputForm = [\"FileName\", \"UserName\", \"BriefInfo\", \"Description\", \"Source\", \"Keywords\", \"AttrInfo\"]\r\n        let fixedForm = [];\r\n        let fixedValue = {};\r\n        console.log(\"attr len: \", attrInfo.length);\r\n        console.log(\"attr info: \", attrInfo);\r\n\r\n        const compareAttr = (attrInfo) => {\r\n            const result = attrInfo.map((eachAttr, index) => {\r\n                return eachAttr[\"attrName\"] ===\"\" && eachAttr[\"attrDescription\"] === \"\" ? \"null\" : \"not-null\"\r\n            })\r\n            console.log(\"attr compare: \", result);\r\n            return result.includes(\"not-null\");\r\n        }\r\n\r\n        for (let eachForm of inputForm) {\r\n            switch (eachForm) {\r\n                case \"FileName\":\r\n                    fixedValue[eachForm] = props.dataset.FileName;\r\n                    break;\r\n                case \"UserName\":\r\n                    fixedValue[eachForm] = props.dataset.UserName;\r\n                    break;\r\n                case \"Keywords\":\r\n                    fixedValue[eachForm] = tags.length === 0 ? props.metadata.Keywords : tags\r\n                    break;\r\n                case \"AttrInfo\":\r\n                    fixedValue[eachForm] = compareAttr(attrInfo) ? attrInfo : props.metadata.AttrInfo;\r\n                    console.log(\"fixed Attr: \", fixedValue[eachForm]);\r\n                    break;\r\n                /**\r\n                case \"Label\":\r\n                    fixedValue[eachForm] = values[eachForm] == null ? \"Unknown\" : values[eachForm];\r\n                    break;\r\n                 */\r\n                default:\r\n                    fixedValue[eachForm] = values[eachForm] == null ? props. metadata[eachForm] : values[eachForm];\r\n            }\r\n        }\r\n        fixedForm.push(fixedValue);\r\n\r\n        return fixedForm;\r\n    };\r\n\r\n    useEffect(() => {\r\n        // fetch the existing metadata first\r\n        console.log(\"start refreshing metadata form\")\r\n        props.sendNameForDetailedData(FileName, sessionStorage.getItem('verifiedUsername'));\r\n    });\r\n\r\n    return (\r\n        <Container>\r\n            <Col className=\"metadata-info\">\r\n                <Row className=\"metadata-title\">\r\n                    <div className=\"title col-md-8\">\r\n                        <h4>Data Description - {FileName}</h4>\r\n                    </div>\r\n                </Row>\r\n                <Row>\r\n\r\n                </Row>\r\n\r\n\r\n                <LocalForm onSubmit={(values) => handleSubmit(values)}>\r\n                    <Col className=\"form-group\">\r\n                        <Row>\r\n                            <Label htmlFor=\"BriefInfo\" md=\"2\">Brief descripton:</Label>\r\n                            <Col>\r\n                                <Control.text model=\".BriefInfo\" id=\"BriefInfo\" name=\"BriefInfo\"\r\n                                    placeholder={BriefInfo}\r\n                                    className=\"form-control\" />\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n\r\n                    <Col className=\"form-group\">\r\n                        <Label htmlFor=\"Description\">Dataset description:</Label>\r\n                        <Col md={10}>\r\n                            <Control.textarea model=\".Description\" id=\"Description\" name=\"Description\"\r\n                                row=\"6\" className=\"form-control\" placeholder={Description}/>\r\n                        </Col>\r\n                    </Col>\r\n\r\n                    <Col className=\"form-group\">\r\n                        <Row>\r\n                            <Label htmlFor=\"Source\" md={1}>Source:</Label>\r\n                            <Col>\r\n                                <Control.text model=\".Source\" id=\"Source\" name=\"Source\"\r\n                                    placeholder={Source}\r\n                                    className=\"form-control\" />\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n\r\n                    {/** \r\n                    <Row className=\"form-group\">\r\n                        <Col md={5}>\r\n                            <Label htmlFor=\"Number_of_Instance\" md={10}>Number of instances:</Label>\r\n                            <Col md={4}>\r\n                                <Control.input model=\".Number_of_Instance\" id=\"Number_of_Instance\" name=\"Number_of_Instance\"\r\n                                    className=\"form-control\"\r\n                                    min=\"0\" type=\"number\" step=\"1\" />\r\n                            </Col>\r\n                        </Col>\r\n\r\n                        <Col md={5}>\r\n                            <Label htmlFor=\"Number_of_Attribute\" md={10}>Number of attributes:</Label>\r\n                            <Col md={4}>\r\n                                <Control.input model=\".Number_of_Attribute\" id=\"Number_of_Attribute\" name=\"Number_of_Attribute\"\r\n                                    className=\"form-control\"\r\n                                    min=\"0\" type=\"number\" step=\"1\" />\r\n                            </Col>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Col className=\"form-group\">\r\n                        <Row>\r\n                            <Label md={4}>Whether the dataset containes labels:</Label>\r\n                            <Col md={2}>\r\n                                <Control.select model=\".Label\" id=\"Label\" name=\"Label\"\r\n                                    className=\"form-control\">\r\n                                    <option>Unknown</option>\r\n                                    <option>Yes</option>\r\n                                    <option>No</option>\r\n                                </Control.select>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    */}\r\n\r\n                    <Col className=\"form-group\">\r\n                        <Row>\r\n                            <Label htmlFor=\"keywords\" md={2}>Key words:</Label>\r\n                            <Col>\r\n                                <ReactTagInput tags={tags} onChange={(newTags) => setTags(newTags)} placeholder={Keywords}/>\r\n                                <Control model=\".keywords\" id=\"keywords\" name=\"keywords\"\r\n                                    value=\"test\" className=\"form-control nodisplay\" />\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n\r\n                    <Col className=\"form-group\"> {/**for loop */}\r\n                        <Label style={{ backgroundColor: \"aliceblue\", width: \"100%\" }}>Attribute Information:</Label>\r\n                        <Col>\r\n                            {AttrForm(attr - 1)}\r\n                            {AttrRow(attr, true)}\r\n                        </Col>\r\n                    </Col>\r\n\r\n                    <div className=\"submit-button col-md-4 align-items-center\">\r\n                        <Button type=\"submit\" style={{ backgroundColor: \"#378CC6\" }}>Submit</Button>\r\n                    </div>\r\n\r\n                </LocalForm>\r\n\r\n\r\n            </Col>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default MetadataForm;","C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\others\\compareProps.js",["271"],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\ActionTypes.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\metadataEmpty.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\server\\baseUrl.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\server\\backendUrl.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\database\\datasetFiles.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\database\\modelFiles.js",[],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\components\\ConnectionUploading.js",["272","273","274","275"],"C:\\Frontend Demo\\Capstone-Proejct-cs20\\som\\src\\redux\\connectionResult.js",["276"],"import * as ActionTypes from './ActionTypes';\r\n\r\nexport const ConnectionFiles = (state = {\r\n    isLoading: true,\r\n    errMess: null,\r\n    connectionFiles: []\r\n}, action) => {\r\n    switch (action.type) {\r\n        // when a user upload a dataset, we will first send the dataset to the server,\r\n        // if the dataset is successfully added on the server site, and the server sends back a success of the posting of the dataset\r\n        // only then we will add it to the redux store.\r\n        case ActionTypes.ADD_CONNECTIONS:\r\n            var files = action.payload; // get the uploaded dataset\r\n            console.log(\"did i get the connected files? \", action.payload)\r\n            return { ...state, connectionFiles: action.payload };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};",{"ruleId":"277","severity":1,"message":"278","line":3,"column":8,"nodeType":"279","messageId":"280","endLine":3,"endColumn":13},{"ruleId":"281","replacedBy":"282"},{"ruleId":"283","replacedBy":"284"},{"ruleId":"277","severity":1,"message":"285","line":3,"column":39,"nodeType":"279","messageId":"280","endLine":3,"endColumn":47},{"ruleId":"277","severity":1,"message":"286","line":8,"column":8,"nodeType":"279","messageId":"280","endLine":8,"endColumn":16},{"ruleId":"277","severity":1,"message":"287","line":9,"column":8,"nodeType":"279","messageId":"280","endLine":9,"endColumn":16},{"ruleId":"277","severity":1,"message":"288","line":10,"column":8,"nodeType":"279","messageId":"280","endLine":10,"endColumn":21},{"ruleId":"277","severity":1,"message":"289","line":12,"column":8,"nodeType":"279","messageId":"280","endLine":12,"endColumn":14},{"ruleId":"277","severity":1,"message":"290","line":13,"column":9,"nodeType":"279","messageId":"280","endLine":13,"endColumn":12},{"ruleId":"277","severity":1,"message":"291","line":1,"column":16,"nodeType":"279","messageId":"280","endLine":1,"endColumn":25},{"ruleId":"277","severity":1,"message":"292","line":1,"column":17,"nodeType":"279","messageId":"280","endLine":1,"endColumn":30},{"ruleId":"277","severity":1,"message":"293","line":1,"column":43,"nodeType":"279","messageId":"280","endLine":1,"endColumn":54},{"ruleId":"277","severity":1,"message":"294","line":4,"column":10,"nodeType":"279","messageId":"280","endLine":4,"endColumn":19},{"ruleId":"277","severity":1,"message":"295","line":5,"column":10,"nodeType":"279","messageId":"280","endLine":5,"endColumn":17},{"ruleId":"296","severity":1,"message":"297","line":92,"column":140,"nodeType":"298","messageId":"299","endLine":92,"endColumn":142},{"ruleId":"296","severity":1,"message":"297","line":112,"column":136,"nodeType":"298","messageId":"299","endLine":112,"endColumn":138},{"ruleId":"300","severity":1,"message":"301","line":4,"column":5,"nodeType":"302","messageId":"303","endLine":6,"endColumn":6},{"ruleId":"277","severity":1,"message":"304","line":2,"column":10,"nodeType":"279","messageId":"280","endLine":2,"endColumn":20},{"ruleId":"277","severity":1,"message":"305","line":2,"column":22,"nodeType":"279","messageId":"280","endLine":2,"endColumn":36},{"ruleId":"277","severity":1,"message":"306","line":2,"column":38,"nodeType":"279","messageId":"280","endLine":2,"endColumn":53},{"ruleId":"277","severity":1,"message":"307","line":2,"column":55,"nodeType":"279","messageId":"280","endLine":2,"endColumn":60},{"ruleId":"277","severity":1,"message":"308","line":4,"column":10,"nodeType":"279","messageId":"280","endLine":4,"endColumn":16},{"ruleId":"277","severity":1,"message":"309","line":6,"column":22,"nodeType":"279","messageId":"280","endLine":6,"endColumn":27},{"ruleId":"277","severity":1,"message":"310","line":6,"column":29,"nodeType":"279","messageId":"280","endLine":6,"endColumn":37},{"ruleId":"277","severity":1,"message":"311","line":7,"column":8,"nodeType":"279","messageId":"280","endLine":7,"endColumn":18},{"ruleId":"277","severity":1,"message":"312","line":15,"column":8,"nodeType":"279","messageId":"280","endLine":15,"endColumn":20},{"ruleId":"300","severity":1,"message":"301","line":19,"column":5,"nodeType":"302","messageId":"303","endLine":21,"endColumn":6},{"ruleId":"277","severity":1,"message":"309","line":2,"column":22,"nodeType":"279","messageId":"280","endLine":2,"endColumn":27},{"ruleId":"277","severity":1,"message":"313","line":2,"column":29,"nodeType":"279","messageId":"280","endLine":2,"endColumn":40},{"ruleId":"277","severity":1,"message":"314","line":2,"column":42,"nodeType":"279","messageId":"280","endLine":2,"endColumn":51},{"ruleId":"277","severity":1,"message":"311","line":7,"column":8,"nodeType":"279","messageId":"280","endLine":7,"endColumn":18},{"ruleId":"277","severity":1,"message":"315","line":8,"column":8,"nodeType":"279","messageId":"280","endLine":8,"endColumn":18},{"ruleId":"300","severity":1,"message":"301","line":18,"column":3,"nodeType":"302","messageId":"303","endLine":20,"endColumn":4},{"ruleId":"277","severity":1,"message":"316","line":2,"column":10,"nodeType":"279","messageId":"280","endLine":2,"endColumn":21},{"ruleId":"277","severity":1,"message":"317","line":2,"column":22,"nodeType":"279","messageId":"280","endLine":2,"endColumn":28},{"ruleId":"277","severity":1,"message":"318","line":5,"column":8,"nodeType":"279","messageId":"280","endLine":5,"endColumn":12},{"ruleId":"277","severity":1,"message":"319","line":11,"column":11,"nodeType":"279","messageId":"280","endLine":11,"endColumn":21},{"ruleId":"277","severity":1,"message":"313","line":15,"column":32,"nodeType":"279","messageId":"280","endLine":15,"endColumn":43},{"ruleId":"277","severity":1,"message":"320","line":1,"column":16,"nodeType":"279","messageId":"280","endLine":1,"endColumn":25},{"ruleId":"277","severity":1,"message":"321","line":2,"column":10,"nodeType":"279","messageId":"280","endLine":2,"endColumn":14},{"ruleId":"277","severity":1,"message":"322","line":2,"column":16,"nodeType":"279","messageId":"280","endLine":2,"endColumn":23},{"ruleId":"277","severity":1,"message":"294","line":3,"column":10,"nodeType":"279","messageId":"280","endLine":3,"endColumn":19},{"ruleId":"277","severity":1,"message":"318","line":6,"column":10,"nodeType":"279","messageId":"280","endLine":6,"endColumn":14},{"ruleId":"323","severity":1,"message":"324","line":18,"column":7,"nodeType":"325","endLine":18,"endColumn":9,"suggestions":"326"},{"ruleId":"277","severity":1,"message":"327","line":4,"column":10,"nodeType":"279","messageId":"280","endLine":4,"endColumn":20},{"ruleId":"277","severity":1,"message":"328","line":36,"column":7,"nodeType":"279","messageId":"280","endLine":36,"endColumn":11},{"ruleId":"277","severity":1,"message":"329","line":59,"column":10,"nodeType":"279","messageId":"280","endLine":59,"endColumn":14},{"ruleId":"296","severity":1,"message":"330","line":85,"column":52,"nodeType":"298","messageId":"299","endLine":85,"endColumn":54},{"ruleId":"323","severity":1,"message":"331","line":99,"column":6,"nodeType":"325","endLine":99,"endColumn":27,"suggestions":"332"},{"ruleId":"277","severity":1,"message":"291","line":1,"column":35,"nodeType":"279","messageId":"280","endLine":1,"endColumn":44},{"ruleId":"277","severity":1,"message":"333","line":2,"column":8,"nodeType":"279","messageId":"280","endLine":2,"endColumn":13},{"ruleId":"277","severity":1,"message":"309","line":3,"column":22,"nodeType":"279","messageId":"280","endLine":3,"endColumn":27},{"ruleId":"277","severity":1,"message":"290","line":5,"column":15,"nodeType":"279","messageId":"280","endLine":5,"endColumn":18},{"ruleId":"277","severity":1,"message":"334","line":8,"column":12,"nodeType":"279","messageId":"280","endLine":8,"endColumn":17},{"ruleId":"277","severity":1,"message":"335","line":9,"column":12,"nodeType":"279","messageId":"280","endLine":9,"endColumn":25},{"ruleId":"277","severity":1,"message":"336","line":9,"column":27,"nodeType":"279","messageId":"280","endLine":9,"endColumn":43},{"ruleId":"277","severity":1,"message":"337","line":2,"column":17,"nodeType":"279","messageId":"280","endLine":2,"endColumn":23},{"ruleId":"277","severity":1,"message":"291","line":2,"column":35,"nodeType":"279","messageId":"280","endLine":2,"endColumn":44},{"ruleId":"277","severity":1,"message":"338","line":2,"column":46,"nodeType":"279","messageId":"280","endLine":2,"endColumn":61},{"ruleId":"277","severity":1,"message":"310","line":3,"column":22,"nodeType":"279","messageId":"280","endLine":3,"endColumn":30},{"ruleId":"277","severity":1,"message":"291","line":2,"column":35,"nodeType":"279","messageId":"280","endLine":2,"endColumn":44},{"ruleId":"277","severity":1,"message":"338","line":2,"column":46,"nodeType":"279","messageId":"280","endLine":2,"endColumn":61},{"ruleId":"277","severity":1,"message":"310","line":3,"column":22,"nodeType":"279","messageId":"280","endLine":3,"endColumn":30},{"ruleId":"277","severity":1,"message":"305","line":2,"column":22,"nodeType":"279","messageId":"280","endLine":2,"endColumn":36},{"ruleId":"277","severity":1,"message":"294","line":3,"column":10,"nodeType":"279","messageId":"280","endLine":3,"endColumn":19},{"ruleId":"277","severity":1,"message":"339","line":3,"column":21,"nodeType":"279","messageId":"280","endLine":3,"endColumn":24},{"ruleId":"277","severity":1,"message":"337","line":2,"column":17,"nodeType":"279","messageId":"280","endLine":2,"endColumn":23},{"ruleId":"277","severity":1,"message":"291","line":2,"column":35,"nodeType":"279","messageId":"280","endLine":2,"endColumn":44},{"ruleId":"277","severity":1,"message":"338","line":2,"column":46,"nodeType":"279","messageId":"280","endLine":2,"endColumn":61},{"ruleId":"277","severity":1,"message":"310","line":3,"column":22,"nodeType":"279","messageId":"280","endLine":3,"endColumn":30},{"ruleId":"277","severity":1,"message":"291","line":1,"column":35,"nodeType":"279","messageId":"280","endLine":1,"endColumn":44},{"ruleId":"277","severity":1,"message":"333","line":2,"column":8,"nodeType":"279","messageId":"280","endLine":2,"endColumn":13},{"ruleId":"277","severity":1,"message":"309","line":3,"column":22,"nodeType":"279","messageId":"280","endLine":3,"endColumn":27},{"ruleId":"277","severity":1,"message":"290","line":5,"column":15,"nodeType":"279","messageId":"280","endLine":5,"endColumn":18},{"ruleId":"277","severity":1,"message":"334","line":8,"column":12,"nodeType":"279","messageId":"280","endLine":8,"endColumn":17},{"ruleId":"277","severity":1,"message":"335","line":9,"column":12,"nodeType":"279","messageId":"280","endLine":9,"endColumn":25},{"ruleId":"277","severity":1,"message":"336","line":9,"column":27,"nodeType":"279","messageId":"280","endLine":9,"endColumn":43},{"ruleId":"340","severity":1,"message":"341","line":44,"column":18,"nodeType":"279","messageId":"342","endLine":44,"endColumn":27},{"ruleId":"277","severity":1,"message":"320","line":1,"column":17,"nodeType":"279","messageId":"280","endLine":1,"endColumn":26},{"ruleId":"277","severity":1,"message":"337","line":1,"column":39,"nodeType":"279","messageId":"280","endLine":1,"endColumn":45},{"ruleId":"277","severity":1,"message":"343","line":1,"column":47,"nodeType":"279","messageId":"280","endLine":1,"endColumn":55},{"ruleId":"277","severity":1,"message":"344","line":5,"column":9,"nodeType":"279","messageId":"280","endLine":5,"endColumn":22},{"ruleId":"277","severity":1,"message":"345","line":2,"column":10,"nodeType":"279","messageId":"280","endLine":2,"endColumn":22},{"ruleId":"277","severity":1,"message":"346","line":3,"column":10,"nodeType":"279","messageId":"280","endLine":3,"endColumn":20},{"ruleId":"277","severity":1,"message":"347","line":6,"column":8,"nodeType":"279","messageId":"280","endLine":6,"endColumn":15},{"ruleId":"277","severity":1,"message":"337","line":1,"column":17,"nodeType":"279","messageId":"280","endLine":1,"endColumn":23},{"ruleId":"277","severity":1,"message":"338","line":1,"column":46,"nodeType":"279","messageId":"280","endLine":1,"endColumn":61},{"ruleId":"277","severity":1,"message":"348","line":3,"column":30,"nodeType":"279","messageId":"280","endLine":3,"endColumn":34},{"ruleId":"277","severity":1,"message":"349","line":3,"column":36,"nodeType":"279","messageId":"280","endLine":3,"endColumn":42},{"ruleId":"277","severity":1,"message":"318","line":5,"column":10,"nodeType":"279","messageId":"280","endLine":5,"endColumn":14},{"ruleId":"277","severity":1,"message":"309","line":6,"column":22,"nodeType":"279","messageId":"280","endLine":6,"endColumn":27},{"ruleId":"350","severity":1,"message":"351","line":20,"column":93,"nodeType":"279","messageId":"352","endLine":20,"endColumn":97},{"ruleId":"277","severity":1,"message":"353","line":40,"column":11,"nodeType":"279","messageId":"280","endLine":40,"endColumn":20},{"ruleId":"296","severity":1,"message":"297","line":59,"column":46,"nodeType":"298","messageId":"299","endLine":59,"endColumn":48},{"ruleId":"296","severity":1,"message":"297","line":60,"column":53,"nodeType":"298","messageId":"299","endLine":60,"endColumn":55},{"ruleId":"354","severity":1,"message":"355","line":69,"column":25,"nodeType":"356","messageId":"357","endLine":69,"endColumn":169},{"ruleId":"354","severity":1,"message":"355","line":74,"column":25,"nodeType":"356","messageId":"357","endLine":74,"endColumn":190},{"ruleId":"354","severity":1,"message":"355","line":96,"column":25,"nodeType":"356","messageId":"357","endLine":96,"endColumn":169},{"ruleId":"354","severity":1,"message":"355","line":101,"column":25,"nodeType":"356","messageId":"357","endLine":101,"endColumn":190},{"ruleId":"277","severity":1,"message":"358","line":122,"column":13,"nodeType":"279","messageId":"280","endLine":122,"endColumn":22},{"ruleId":"359","severity":1,"message":"360","line":186,"column":71,"nodeType":"361","messageId":"362","endLine":186,"endColumn":86,"fix":"363"},{"ruleId":"354","severity":1,"message":"355","line":218,"column":33,"nodeType":"356","messageId":"357","endLine":220,"endColumn":64},{"ruleId":"354","severity":1,"message":"364","line":228,"column":29,"nodeType":"356","messageId":"357","endLine":229,"endColumn":93},{"ruleId":"354","severity":1,"message":"355","line":237,"column":33,"nodeType":"356","messageId":"357","endLine":239,"endColumn":64},{"ruleId":"277","severity":1,"message":"365","line":48,"column":11,"nodeType":"279","messageId":"280","endLine":48,"endColumn":28},{"ruleId":"277","severity":1,"message":"291","line":1,"column":27,"nodeType":"279","messageId":"280","endLine":1,"endColumn":36},{"ruleId":"277","severity":1,"message":"308","line":2,"column":78,"nodeType":"279","messageId":"280","endLine":2,"endColumn":84},{"ruleId":"277","severity":1,"message":"366","line":2,"column":86,"nodeType":"279","messageId":"280","endLine":2,"endColumn":97},{"ruleId":"277","severity":1,"message":"309","line":4,"column":22,"nodeType":"279","messageId":"280","endLine":4,"endColumn":27},{"ruleId":"277","severity":1,"message":"367","line":13,"column":17,"nodeType":"279","messageId":"280","endLine":13,"endColumn":22},"no-unused-vars","'Popup' is defined but never used.","Identifier","unusedVar","no-native-reassign",["368"],"no-negated-in-lhs",["369"],"'Redirect' is defined but never used.","'Database' is defined but never used.","'SOMModel' is defined but never used.","'Visualisation' is defined but never used.","'Signup' is defined but never used.","'Col' is defined but never used.","'useEffect' is defined but never used.","'PureComponent' is defined but never used.","'useCallback' is defined but never used.","'Container' is defined but never used.","'actions' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'InputGroup' is defined but never used.","'InputGroupText' is defined but never used.","'InputGroupAddon' is defined but never used.","'Input' is defined but never used.","'Button' is defined but never used.","'Modal' is defined but never used.","'TableRow' is defined but never used.","'DeleteIcon' is defined but never used.","'MetadataForm' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'CreateIcon' is defined but never used.","'createForms' is defined but never used.","'Avatar' is defined but never used.","'Link' is defined but never used.","'updateUser' is defined but never used.","'Component' is defined but never used.","'Card' is defined but never used.","'CardImg' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'props.username'. Either include them or remove the dependency array.","ArrayExpression",["370"],"'makeStyles' is defined but never used.","'root' is assigned a value but never used.","'user' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'isModalOpen' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["371"],"'axios' is defined but never used.","'dfile' is assigned a value but never used.","'selectedFiles' is assigned a value but never used.","'setSelectedFiles' is assigned a value but never used.","'useRef' is defined but never used.","'useLayoutEffect' is defined but never used.","'Row' is defined but never used.","no-redeclare","'modelName' is already defined.","redeclared","'useState' is defined but never used.","'emptyMetadata' is defined but never used.","'DATASETFILES' is defined but never used.","'MODELFILES' is defined but never used.","'baseUrl' is defined but never used.","'Form' is defined but never used.","'Errors' is defined but never used.","no-use-before-define","'attr' was used before it was defined.","usedBeforeDefined","'TagInputs' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","'attrArray' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property metadata.","MemberExpression","unexpectedWhitespace",{"range":"372","text":"373"},"Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'compareModelFiles' is assigned a value but never used.","'CardColumns' is defined but never used.","'files' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"374","fix":"375"},{"desc":"376","fix":"377"},[8773,8775],".","Update the dependencies array to be: [history, props.username]",{"range":"378","text":"379"},"Update the dependencies array to be: [isModalOpen, props, props.user.userInfo]",{"range":"380","text":"381"},[585,587],"[history, props.username]",[2918,2939],"[isModalOpen, props, props.user.userInfo]"]