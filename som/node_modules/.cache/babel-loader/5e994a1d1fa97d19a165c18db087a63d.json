{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { DATASETFILES } from '../database/datasetFiles';\nimport { backendUrl } from '../server/backendUrl';\nimport http from \"../server/baseUrl\";\nimport baseUrl from '../server/baseUrl';\n/**\n * Dataset\n */\n// fetch datasets from the backend server\n\nexport const fetchDatasetFiles = () => dispatch => {\n  dispatch(datasetFilesLoading(true));\n  return fetch(backendUrl + 'datasetFiles') // backend address: Localhost: 5000/datasetFiles\n  .then(response => response.json()) // when the promise resolved, we convert the incoming response into JSON by calling response.json\n  .then(datasetFiles => dispatch(addDatasetFiles(datasetFiles))) // when the datasetFiles is obtained, we dispatch it into addDatasetFiles()\n  .then(data => console.log(data));\n};\nexport const datasetFilesLoading = () => ({\n  type: ActionTypes.DATASETFILES_LOADING\n});\nexport const datasetFilesFailed = errmess => ({\n  type: ActionTypes.DATASETFILES_FAILED,\n  payload: errmess\n});\nexport const addDatasetFiles = datasetFiles => ({\n  type: ActionTypes.ADD_DATASETFILES,\n  payload: datasetFiles\n});\nexport const addDataset = dataset => ({\n  type: ActionTypes.UPLOAD_DATASET,\n  payload: dataset\n}); // uploading a new dataset file\n\nexport const uploadDataset = (dataset, onUploadProgress) => dispatch => {\n  // post the uploaded dataset to the backend server\n  return http.post('/upload', dataset, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    },\n    onUploadProgress\n  }).then(res => {\n    console.log(\"this is response\");\n    console.log(res);\n  }).then(res => {\n    dispatch(fetchUploadedDataset());\n  });\n}; // get the uploded dataset info when the uploading is done in the backend\n\nexport const fetchUploadedDataset = () => dispatch => {\n  return fetch(backendUrl + 'newDataset').then(response => response.json()).then(dataset => dispatch(addDataset(dataset))).then(data => {\n    console.log(\"this is data\");\n    console.log(data);\n  });\n};\nexport const removeOneDataset = datasetName => ({\n  type: ActionTypes.REMOVE_DATASET,\n  payload: datasetName\n}); // pass the filename to the backend server and tell it to delete corresponding dataset\n\nexport const deleteOneDataset = datasetName => dispatch => {\n  return http.post('/delete-dataset', JSON.stringify(datasetName), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for delete dataset\");\n    console.log(res);\n    dispatch(removeOneDataset(res.data));\n  }).catch(err => console.log(err));\n};\n/**\n * Metadata\n */\n// submit metadata of a dataset\n\nexport const submitMetadata = metadata => dispatch => {\n  return http.post('/submit-metadata', JSON.stringify(metadata), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for metadata\");\n    console.log(res);\n  }).catch(err => console.log(err));\n};\nexport const addMetadata = metadata => ({\n  type: ActionTypes.ADD_METADATA,\n  payload: metadata\n});\nexport const metadataFailed = errmess => ({\n  type: ActionTypes.METADATA_FAILED,\n  payload: errmess\n});\nexport const metadataLoading = () => ({\n  type: ActionTypes.METADATA_LOADING\n});\n/**\n * Detailed data\n */\n\nexport const sendNameForDetailedData = datasetName => dispatch => {\n  console.log(\"start detailed loading\");\n  return http.post('/detailedData-name', JSON.stringify(datasetName), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for detailed data\");\n    console.log(res.data);\n    dispatch(addDetailedData(res.data[0]));\n    dispatch(addMetadata(res.data[1]));\n  }).catch(err => console.log(err));\n};\nexport const addDetailedData = detaileddata => ({\n  type: ActionTypes.ADD_DETAILEDDATA,\n  payload: detaileddata\n});\nexport const detailedDataFailed = errmess => ({\n  type: ActionTypes.DETAILEDDATA_FAILED,\n  payload: errmess\n});\nexport const detailedDataLoading = () => ({\n  type: ActionTypes.DETAILEDDATA_LOADING\n});","map":{"version":3,"sources":["D:/Pythoncodes/New/som/src/redux/ActionCreators.js"],"names":["ActionTypes","DATASETFILES","backendUrl","http","baseUrl","fetchDatasetFiles","dispatch","datasetFilesLoading","fetch","then","response","json","datasetFiles","addDatasetFiles","data","console","log","type","DATASETFILES_LOADING","datasetFilesFailed","errmess","DATASETFILES_FAILED","payload","ADD_DATASETFILES","addDataset","dataset","UPLOAD_DATASET","uploadDataset","onUploadProgress","post","headers","res","fetchUploadedDataset","removeOneDataset","datasetName","REMOVE_DATASET","deleteOneDataset","JSON","stringify","catch","err","submitMetadata","metadata","addMetadata","ADD_METADATA","metadataFailed","METADATA_FAILED","metadataLoading","METADATA_LOADING","sendNameForDetailedData","addDetailedData","detaileddata","ADD_DETAILEDDATA","detailedDataFailed","DETAILEDDATA_FAILED","detailedDataLoading","DETAILEDDATA_LOADING"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport { DATASETFILES } from '../database/datasetFiles';\nimport { backendUrl } from '../server/backendUrl';\nimport http from \"../server/baseUrl\";\nimport baseUrl from '../server/baseUrl';\n\n/**\n * Dataset\n */\n// fetch datasets from the backend server\nexport const fetchDatasetFiles = () => (dispatch) => {\n\n    dispatch(datasetFilesLoading(true));\n\n    return fetch(backendUrl + 'datasetFiles') // backend address: Localhost: 5000/datasetFiles\n        .then(response => response.json()) // when the promise resolved, we convert the incoming response into JSON by calling response.json\n        .then(datasetFiles => dispatch(addDatasetFiles(datasetFiles))) // when the datasetFiles is obtained, we dispatch it into addDatasetFiles()\n        .then(data => console.log(data));\n}\n\nexport const datasetFilesLoading = () => ({\n    type: ActionTypes.DATASETFILES_LOADING\n});\n\nexport const datasetFilesFailed = (errmess) => ({\n    type: ActionTypes.DATASETFILES_FAILED,\n    payload: errmess\n});\n\nexport const addDatasetFiles = (datasetFiles) => ({\n    type: ActionTypes.ADD_DATASETFILES,\n    payload: datasetFiles\n});\n\nexport const addDataset = (dataset) => ({\n    type: ActionTypes.UPLOAD_DATASET,\n    payload: dataset\n});\n\n// uploading a new dataset file\nexport const uploadDataset = (dataset, onUploadProgress) => (dispatch) => {\n    // post the uploaded dataset to the backend server\n    return http.post('/upload', dataset, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n        onUploadProgress,\n      })\n        .then(res => {\n            console.log(\"this is response\");\n            console.log(res);\n        })\n        .then(res => {\n            dispatch(fetchUploadedDataset());\n        })\n};\n\n// get the uploded dataset info when the uploading is done in the backend\nexport const fetchUploadedDataset = () => (dispatch) => {\n    return fetch(backendUrl + 'newDataset')\n        .then(response => response.json())\n        .then(dataset => dispatch(addDataset(dataset)))\n        .then(data => {\n            console.log(\"this is data\");\n            console.log(data);\n        });\n};\n\nexport const removeOneDataset = (datasetName) => ({\n    type: ActionTypes.REMOVE_DATASET,\n    payload: datasetName\n});\n\n// pass the filename to the backend server and tell it to delete corresponding dataset\nexport const deleteOneDataset = (datasetName) => (dispatch) => {\n    return http.post('/delete-dataset', JSON.stringify(datasetName), {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        }})\n        .then(res => {\n            console.log(\"this is response for delete dataset\");\n            console.log(res);\n            dispatch(removeOneDataset(res.data));\n        })\n        .catch((err) => console.log(err));\n};\n\n/**\n * Metadata\n */\n// submit metadata of a dataset\nexport const submitMetadata = (metadata) => (dispatch) => {\n    return http.post('/submit-metadata', JSON.stringify(metadata), {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        }})\n        .then(res => {\n            console.log(\"this is response for metadata\");\n            console.log(res);\n        })\n        .catch((err) => console.log(err));\n};\n\nexport const addMetadata = (metadata) => ({\n    type: ActionTypes.ADD_METADATA,\n    payload: metadata\n});\n\nexport const metadataFailed = (errmess) => ({\n    type: ActionTypes.METADATA_FAILED,\n    payload: errmess\n});\n\nexport const metadataLoading = () => ({\n    type: ActionTypes.METADATA_LOADING\n});\n\n/**\n * Detailed data\n */\nexport const sendNameForDetailedData = (datasetName) => (dispatch) => {\n    console.log(\"start detailed loading\")\n\n    return http.post('/detailedData-name', JSON.stringify(datasetName), {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        }})\n        .then(res => {\n            console.log(\"this is response for detailed data\");\n            console.log(res.data);\n            dispatch(addDetailedData(res.data[0]));\n            dispatch(addMetadata(res.data[1]));\n        })\n        .catch((err) => console.log(err));\n}\n\n\n\nexport const addDetailedData = (detaileddata) => ({\n    type: ActionTypes.ADD_DETAILEDDATA,\n    payload: detaileddata\n});\n\nexport const detailedDataFailed = (errmess) => ({\n    type: ActionTypes.DETAILEDDATA_FAILED,\n    payload: errmess\n});\n\nexport const detailedDataLoading = () => ({\n    type: ActionTypes.DETAILEDDATA_LOADING\n});\n\n\n"]},"metadata":{},"sourceType":"module"}