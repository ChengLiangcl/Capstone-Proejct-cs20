{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pythoncodes\\\\New3\\\\som\\\\src\\\\components\\\\DatasetUploadComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { IconButton, Modal } from '@material-ui/core';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport { Row, Col, Container, Progress } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DatasetUpload(props) {\n  _s();\n\n  const [dfile, setFile] = useState(''); // storing the uploaded file\n\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\n  const [currentFile, setCurrentFile] = useState(undefined);\n  const [progress, setProgress] = useState(0); // tracking the status of uploading\n\n  const [message, setMessage] = useState(\"Please upload your dataset\");\n  const el = useRef(); // accesing input element\n  // It is for get the uploaded file you selected\n\n  const handleChange = event => {\n    const file = event.target.files[0]; // accessing file\n\n    console.log(file);\n    setFile(file); // storing file\n\n    uploadFile(file);\n  };\n\n  const uploadFile = file => {\n    setProgress(0);\n    const formData = new FormData();\n    formData.append('file', file); // appending file\n\n    setCurrentFile(file); // 'props.uploadDataset' is from Redux actionCreators, which is used to post the uploaded dataset to the backend server\n\n    props.uploadDataset(formData, event => {\n      setProgress(Math.round(1000 * event.loaded / event.total));\n    }).then(response => {\n      setMessage(\"Uploaded successfully\");\n    }).catch(() => {\n      setProgress(0);\n      setMessage(\"Could not upload the file!\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"file-upload\",\n          ref: el,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"file-upload\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"upload a dataset\",\n            component: \"span\",\n            children: /*#__PURE__*/_jsxDEV(PublishIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-light\",\n          role: \"alert\",\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentFile && /*#__PURE__*/_jsxDEV(Progress, {\n        animated: true,\n        value: progress,\n        max: \"100\",\n        children: [progress, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 34\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DatasetUpload, \"uEvUEUiskNF1eW8j2DYkapcQVq8=\");\n\n_c = DatasetUpload;\nexport default DatasetUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"DatasetUpload\");","map":{"version":3,"sources":["D:/Pythoncodes/New3/som/src/components/DatasetUploadComponent.js"],"names":["React","useRef","useState","useEffect","axios","IconButton","Modal","PublishIcon","Row","Col","Container","Progress","DatasetUpload","props","dfile","setFile","selectedFiles","setSelectedFiles","undefined","currentFile","setCurrentFile","progress","setProgress","message","setMessage","el","handleChange","event","file","target","files","console","log","uploadFile","formData","FormData","append","uploadDataset","Math","round","loaded","total","then","response","catch"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { IconButton, Modal } from '@material-ui/core';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport { Row, Col, Container, Progress } from 'reactstrap';\n\nfunction DatasetUpload(props) {\n    const [dfile, setFile] = useState(''); // storing the uploaded file\n    const [selectedFiles, setSelectedFiles] = useState(undefined);\n    const [currentFile, setCurrentFile] = useState(undefined);\n    const [progress, setProgress] = useState(0); // tracking the status of uploading\n    const [message, setMessage] = useState(\"Please upload your dataset\");\n    const el = useRef(); // accesing input element\n\n    // It is for get the uploaded file you selected\n    const handleChange = (event) => {\n        const file = event.target.files[0]; // accessing file\n        console.log(file);\n        setFile(file); // storing file\n        uploadFile(file);\n    }\n\n    const uploadFile = (file) => {\n        setProgress(0);\n\n        const formData = new FormData();\n        formData.append('file', file); // appending file\n\n        setCurrentFile(file);\n\n        // 'props.uploadDataset' is from Redux actionCreators, which is used to post the uploaded dataset to the backend server\n        props.uploadDataset(formData, (event) => {\n            setProgress(Math.round((1000 * event.loaded) / event.total));\n        })\n        .then((response) => {\n            setMessage(\"Uploaded successfully\");\n        })\n        .catch(() => {\n            setProgress(0);\n            setMessage(\"Could not upload the file!\");\n        });\n    };\n\n    return (\n        <Container>\n            <Row>\n                <div className=\"md-2\">\n                    {/*TODO: users may only be allowed to upload .dat => <input> needs to add accept=\".dat* ref={el} */}\n                    <input type=\"file\" id=\"file-upload\" ref={el} onChange={handleChange} />\n                    <label htmlFor=\"file-upload\">\n                        <IconButton aria-label=\"upload a dataset\" component=\"span\">\n                            <PublishIcon />\n                        </IconButton>\n                    </label>\n                </div>\n\n                <div>\n                    <div className=\"alert alert-light\" role=\"alert\">\n                        {message}\n                    </div>\n                </div>\n            </Row>\n\n\n            <div>\n                {currentFile && (<Progress animated value={progress} max=\"100\">{progress}%</Progress>)}     \n            </div>\n        </Container>\n    );\n}\n\nexport default DatasetUpload;\n\n"]},"metadata":{},"sourceType":"module"}