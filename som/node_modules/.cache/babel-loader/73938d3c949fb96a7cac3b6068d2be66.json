{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pythoncodes\\\\New3\\\\som\\\\src\\\\components\\\\DetailedDatasetComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useRef, useState } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport { Table } from 'reactstrap';\nimport { Loading } from './LoadingComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RenderDetailedData = /*#__PURE__*/React.memo(_c = ({\n  detailedData,\n  isLoading,\n  errMess\n}) => {\n  // pass the datasetName to the backend server\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this);\n  } else if (errMess) {\n    return /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: errMess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this);\n  } else {\n    console.log(\"detailed data is:\");\n    console.log(detailedData);\n    const colName = Object.keys(detailedData[Object.keys(detailedData)[0]]);\n    console.log(\"colname is \" + colName);\n    return /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: colName.map(col => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: col\n          }, col, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 29\n          }, this))\n        }, \"tbhead\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: Object.keys(detailedData).map(row =>\n        /*#__PURE__*/\n        // [row1, row2, row3, row4, row5]\n        _jsxDEV(\"tr\", {\n          children: Object.values(detailedData[row]).map(value => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  }\n}, true);\n_c2 = RenderDetailedData;\nconst RenderMetadata = /*#__PURE__*/React.memo(_c3 = ({\n  metadata,\n  isLoading,\n  errMess\n}) => {\n  console.log(\"check metadata\");\n  console.log(JSON.stringify(metadata));\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  } else if (errMess) {\n    return /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: errMess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          size: \"sm\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"#\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Metadata\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"row\",\n                children: \"1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Dataset description:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: metadata[0].Description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"row\",\n                children: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Source:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: metadata[0].Source\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"row\",\n                children: \"3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Number of instances\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: metadata[0].Number_of_Instance\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"row\",\n                children: \"4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Number of attributes:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: metadata[0].Number_of_Attribute\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"row\",\n                children: \"5\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Whether the dataset contains labels:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: metadata[0].Label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          size: \"sm\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Attributes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: metadata[0].AttrInfo.map((eachAttr, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: Object.values(eachAttr).map(eachValue => /*#__PURE__*/_jsxDEV(\"td\", {\n                children: eachValue\n              }, eachValue, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 79\n              }, this))\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this);\n  }\n}, true);\n_c4 = RenderMetadata;\nconst DetailedDataset = /*#__PURE__*/React.memo(_c5 = _s(props => {\n  _s();\n\n  useEffect(() => props.sendNameForDetailedData(props.selectedDataset.FileName));\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      className: \"detailed-metadata\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        md: {\n          size: 7\n        },\n        children: /*#__PURE__*/_jsxDEV(RenderMetadata, {\n          metadata: props.metadata,\n          isLoading: props.isLoading_metadata,\n          errMess: props.errMess_metadata\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      className: \"detailed-database\",\n      children: /*#__PURE__*/_jsxDEV(RenderDetailedData, {\n        detailedData: props.detailedData,\n        isLoading: props.isLoading_detailedData,\n        errMess: props.errMess_detailedData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"), true);\n_c6 = DetailedDataset;\nexport default DetailedDataset;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"RenderDetailedData$React.memo\");\n$RefreshReg$(_c2, \"RenderDetailedData\");\n$RefreshReg$(_c3, \"RenderMetadata$React.memo\");\n$RefreshReg$(_c4, \"RenderMetadata\");\n$RefreshReg$(_c5, \"DetailedDataset$React.memo\");\n$RefreshReg$(_c6, \"DetailedDataset\");","map":{"version":3,"sources":["D:/Pythoncodes/New3/som/src/components/DetailedDatasetComponent.js"],"names":["React","Component","useEffect","useRef","useState","Container","Row","Col","Table","Loading","RenderDetailedData","memo","detailedData","isLoading","errMess","console","log","colName","Object","keys","map","col","row","values","value","RenderMetadata","metadata","JSON","stringify","Description","Source","Number_of_Instance","Number_of_Attribute","Label","AttrInfo","eachAttr","index","eachValue","DetailedDataset","props","sendNameForDetailedData","selectedDataset","FileName","size","isLoading_metadata","errMess_metadata","isLoading_detailedData","errMess_detailedData"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useRef, useState } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport { Table } from 'reactstrap';\nimport { Loading } from './LoadingComponent';\n\nconst RenderDetailedData = React.memo(({ detailedData, isLoading, errMess }) => {\n    // pass the datasetName to the backend server\n\n    if (isLoading) {\n        return (\n            <Loading />\n        );\n    }\n    else if (errMess) {\n        return (\n            <h4>{errMess}</h4>\n        );\n    }\n    else {\n        console.log(\"detailed data is:\");\n        console.log(detailedData);\n        const colName = Object.keys(detailedData[Object.keys(detailedData)[0]]);\n        console.log(\"colname is \" + colName);\n        return (\n            <Table striped>\n                <thead>\n                    <tr key=\"tbhead\">\n                        {colName.map(col =>\n                            <th key={col}>{col}</th>\n                        )}\n                    </tr>\n                </thead>\n\n                <tbody>\n                    {Object.keys(detailedData).map(row => // [row1, row2, row3, row4, row5]\n                        <tr>\n                            {Object.values(detailedData[row]).map(value =>\n                                <td>{value}</td>\n                            )}\n                        </tr>\n                    )}\n                </tbody>\n\n            </Table>\n        );\n    }\n}, true);\n\nconst RenderMetadata = React.memo(({ metadata, isLoading, errMess }) => {\n    console.log(\"check metadata\");\n    console.log(JSON.stringify(metadata));\n    if (isLoading) {\n        return (\n            <Loading />\n        );\n    }\n    else if (errMess) {\n        return (\n            <h4>{errMess}</h4>\n        );\n    }\n    else{\n        return (\n            <Container>\n                <Row>\n                    <Table size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Metadata</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n    \n                        <tbody>\n                            <tr>\n                                <th scope=\"row\">1</th>\n                                <td>Dataset description:</td>\n                                <td>{metadata[0].Description}</td>\n                            </tr>\n    \n                            <tr>\n                                <th scope=\"row\">2</th>\n                                <td>Source:</td>\n                                <td>{metadata[0].Source}</td>\n                            </tr>\n    \n                            <tr>\n                                <th scope=\"row\">3</th>\n                                <td>Number of instances</td>\n                                <td>{metadata[0].Number_of_Instance}</td>\n                            </tr>\n    \n                            <tr>\n                                <th scope=\"row\">4</th>\n                                <td>Number of attributes:</td>\n                                <td>{metadata[0].Number_of_Attribute}</td>\n                            </tr>\n    \n                            <tr>\n                                <th scope=\"row\">5</th>\n                                <td>Whether the dataset contains labels:</td>\n                                <td>{metadata[0].Label}</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </Row>\n    \n                <Row>\n                    <Table size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Attributes</th>\n                                <th>Description</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {metadata[0].AttrInfo.map((eachAttr, index) =>\n                                <tr key={index}>\n                                    {Object.values(eachAttr).map(eachValue => <td key={eachValue}>{eachValue}</td>)}\n                                </tr>\n                            )}\n                        </tbody>\n                    </Table>\n                </Row>\n            </Container>\n        );\n    }\n}, true);\n   \n\nconst DetailedDataset = React.memo((props) => {\n    \n    useEffect(() => props.sendNameForDetailedData(props.selectedDataset.FileName));\n    \n    return (\n        <Container>\n            <Col className=\"detailed-metadata\" >\n                <Col md={{ size: 7 }}>\n                    <RenderMetadata metadata={props.metadata} isLoading={props.isLoading_metadata} errMess={props.errMess_metadata} />\n                </Col>\n            </Col>\n\n            <Col className=\"detailed-database\">\n                <RenderDetailedData detailedData={props.detailedData} isLoading={props.isLoading_detailedData} errMess={props.errMess_detailedData} />\n            </Col>\n        </Container>\n    );\n}, true);\n\nexport default DetailedDataset;"]},"metadata":{},"sourceType":"module"}