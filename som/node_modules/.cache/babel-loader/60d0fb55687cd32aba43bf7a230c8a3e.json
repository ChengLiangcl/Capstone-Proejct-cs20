{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pythoncodes\\\\New2\\\\som\\\\src\\\\components\\\\MainComponent.js\";\nimport React, { PureComponent, Component, useCallback } from 'react';\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Container, Row, Col } from 'reactstrap';\nimport { actions } from 'react-redux-form';\nimport Sidebar from './SidebarComponent';\nimport Database from './DatabaseComponent';\nimport Visualisation from './VisualisationComponent';\nimport SOMModel from './ModelComponent';\nimport DetailedDataset from './DetailedDatasetComponent';\nimport MetadataForm from './MetadataForm';\nimport { fetchDatasetFiles, uploadDataset, fetchUploadedDataset, submitMetadata, deleteOneDataset, fetchModelFiles, uploadModel, fetchUploadedModel, deleteOneModel, sendNameForDetailedData } from '../redux/ActionCreators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => {\n  return {\n    metadata: state.metadata,\n    datasetFiles: state.datasetFiles,\n    modelFiles: state.modelFiles,\n    detailedData: state.detailedData\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchDatasetFiles: () => {\n    dispatch(fetchDatasetFiles());\n  },\n  uploadDataset: (dataset, onUploadProgress) => dispatch(uploadDataset(dataset, onUploadProgress)),\n  fetchUploadedDataset: () => {\n    dispatch(fetchUploadedDataset());\n  },\n  deleteDataset: datasetName => {\n    dispatch(deleteOneDataset(datasetName));\n  },\n  fetchModelFiles: () => {\n    dispatch(fetchModelFiles());\n  },\n  uploadModel: (model, onUploadProgress) => dispatch(uploadModel(model, onUploadProgress)),\n  fetchUploadedModel: () => {\n    dispatch(fetchUploadedModel());\n  },\n  deleteModel: name => {\n    dispatch(deleteOneModel(name));\n  },\n  submitMetadata: metadata => {\n    dispatch(submitMetadata(metadata));\n  },\n  sendNameForDetailedData: datasetName => {\n    dispatch(sendNameForDetailedData(datasetName));\n  }\n});\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedDataset: ''\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchDatasetFiles();\n    this.props.fetchModelFiles();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.metadata.metadata.length === nextProps.metadata.metadata.length) {\n      if (this.props.datasetFiles.datasetFiles !== nextProps.datasetFiles.datasetFiles) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    const DatasetWithName = ({\n      match\n    }) => {\n      return /*#__PURE__*/_jsxDEV(DetailedDataset, {\n        selectedDataset: this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0],\n        sendNameForDetailedData: this.props.sendNameForDetailedData,\n        detailedData: this.props.detailedData.detailedData,\n        isLoading_detailedData: this.props.detailedData.isLoading,\n        errMess_detailedData: this.props.detailedData.errMess,\n        metadata: this.props.metadata.metadata,\n        isLoading_metadata: this.props.metadata.isLoading,\n        errMess_metadata: this.props.metadata.errMess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this);\n    };\n\n    const DatasetSelect = ({\n      match\n    }) => {\n      return /*#__PURE__*/_jsxDEV(MetadataForm, {\n        dataset: this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0],\n        submitMetadata: this.props.submitMetadata\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this);\n    };\n\n    return /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        className: \"sidebar\",\n        md: \"3\",\n        children: /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        className: \"main-page\",\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/mydatabase\",\n            component: () => /*#__PURE__*/_jsxDEV(Database, {\n              datasetFiles: this.props.datasetFiles.datasetFiles,\n              isLoading: this.props.datasetFiles.isLoading,\n              errMess: this.props.datasetFiles.errMess,\n              uploadDataset: this.props.uploadDataset,\n              fetchUploadedDataset: this.props.fetchUploadedDataset,\n              deleteDataset: this.props.deleteDataset\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/mydatabase/:datasetName\",\n            component: DatasetWithName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/metadata-form/:datasetName\",\n            component: DatasetSelect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/mymodels\",\n            component: () => /*#__PURE__*/_jsxDEV(SOMModel, {\n              modelFiles: this.props.modelFiles.modelFiles,\n              isLoading: this.props.modelFiles.isLoading,\n              errMess: this.props.modelFiles.errMess,\n              uploadModel: this.props.uploadModel,\n              fetchUploadedModel: this.props.fetchUploadedModel,\n              deleteModel: this.props.deleteModel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 64\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/visualisation\",\n            component: Visualisation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/mydatabase\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","map":{"version":3,"sources":["D:/Pythoncodes/New2/som/src/components/MainComponent.js"],"names":["React","PureComponent","Component","useCallback","Switch","Route","Redirect","withRouter","connect","Container","Row","Col","actions","Sidebar","Database","Visualisation","SOMModel","DetailedDataset","MetadataForm","fetchDatasetFiles","uploadDataset","fetchUploadedDataset","submitMetadata","deleteOneDataset","fetchModelFiles","uploadModel","fetchUploadedModel","deleteOneModel","sendNameForDetailedData","mapStateToProps","state","metadata","datasetFiles","modelFiles","detailedData","mapDispatchToProps","dispatch","dataset","onUploadProgress","deleteDataset","datasetName","model","deleteModel","name","Main","constructor","props","selectedDataset","componentDidMount","shouldComponentUpdate","nextProps","nextState","length","render","DatasetWithName","match","filter","FileName","params","isLoading","errMess","DatasetSelect"],"mappings":"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","sourcesContent":["import React, { PureComponent, Component, useCallback } from 'react';\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Container, Row, Col } from 'reactstrap';\nimport { actions } from 'react-redux-form';\nimport Sidebar from './SidebarComponent';\nimport Database from './DatabaseComponent';\nimport Visualisation from './VisualisationComponent';\nimport SOMModel from './ModelComponent';\nimport DetailedDataset from './DetailedDatasetComponent';\nimport MetadataForm from './MetadataForm';\n\nimport {\n    fetchDatasetFiles, uploadDataset, fetchUploadedDataset, submitMetadata, deleteOneDataset,\n    fetchModelFiles, uploadModel, fetchUploadedModel, deleteOneModel,\n    sendNameForDetailedData\n} from '../redux/ActionCreators';\n\nconst mapStateToProps = state => {\n    return {\n        metadata: state.metadata,\n        datasetFiles: state.datasetFiles,\n        modelFiles: state.modelFiles,\n        detailedData: state.detailedData\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    fetchDatasetFiles: () => { dispatch(fetchDatasetFiles()) },\n    uploadDataset: (dataset, onUploadProgress) => dispatch(uploadDataset(dataset, onUploadProgress)),\n    fetchUploadedDataset: () => { dispatch(fetchUploadedDataset()) },\n    deleteDataset: (datasetName) => { dispatch(deleteOneDataset(datasetName)) },\n    fetchModelFiles: () => { dispatch(fetchModelFiles()) },\n    uploadModel: (model, onUploadProgress) => dispatch(uploadModel(model, onUploadProgress)),\n    fetchUploadedModel: () => { dispatch(fetchUploadedModel()) },\n    deleteModel: (name) => { dispatch(deleteOneModel(name)) },\n    submitMetadata: (metadata) => { dispatch(submitMetadata(metadata)) },\n    sendNameForDetailedData: (datasetName) => { dispatch(sendNameForDetailedData(datasetName)) }\n});\n\nclass Main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedDataset: ''\n        }\n    }\n\n    componentDidMount() {\n        this.props.fetchDatasetFiles();\n        this.props.fetchModelFiles();\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n\n        if (this.props.metadata.metadata.length === nextProps.metadata.metadata.length){\n            if (this.props.datasetFiles.datasetFiles !== nextProps.datasetFiles.datasetFiles){\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return true;\n        }\n    }\n\n    render() {\n        const DatasetWithName = ({ match }) => {\n\n            return (\n                <DetailedDataset\n                    selectedDataset= {this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0]}\n                    sendNameForDetailedData = {this.props.sendNameForDetailedData}\n                    detailedData={this.props.detailedData.detailedData}\n                    isLoading_detailedData={this.props.detailedData.isLoading}\n                    errMess_detailedData={this.props.detailedData.errMess}\n\n                    metadata={this.props.metadata.metadata}\n                    isLoading_metadata={this.props.metadata.isLoading}\n                    errMess_metadata={this.props.metadata.errMess}  />\n            );\n        };\n\n        const DatasetSelect = ({ match }) => {\n            return (\n                <MetadataForm dataset={this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0]}\n                    submitMetadata={this.props.submitMetadata}\n                />\n            );\n        };\n\n        return (\n            <Row>\n                <Col className=\"sidebar\" md=\"3\"><Sidebar /></Col>\n                <Col className=\"main-page\">\n                    <Switch>\n\n                        <Route exact path=\"/mydatabase\" component={() =>\n                            <Database datasetFiles={this.props.datasetFiles.datasetFiles}\n                                isLoading={this.props.datasetFiles.isLoading}\n                                errMess={this.props.datasetFiles.errMess}\n                                uploadDataset={this.props.uploadDataset}\n                                fetchUploadedDataset={this.props.fetchUploadedDataset}\n                                deleteDataset={this.props.deleteDataset}\n                            />} />\n                        <Route path='/mydatabase/:datasetName' component={DatasetWithName} />\n                        <Route path=\"/metadata-form/:datasetName\" component={DatasetSelect} />\n                        <Route path=\"/mymodels\" component={()=><SOMModel\n                          modelFiles={this.props.modelFiles.modelFiles}\n                          isLoading={this.props.modelFiles.isLoading}\n                          errMess={this.props.modelFiles.errMess}\n                          uploadModel={this.props.uploadModel}\n                          fetchUploadedModel={this.props.fetchUploadedModel}\n                          deleteModel={this.props.deleteModel}\n                        />} />\n                        <Route path=\"/visualisation\" component={Visualisation} />\n                        <Redirect to=\"/mydatabase\" />\n                    </Switch>\n                </Col>\n            </Row>\n\n        );\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\n"]},"metadata":{},"sourceType":"module"}