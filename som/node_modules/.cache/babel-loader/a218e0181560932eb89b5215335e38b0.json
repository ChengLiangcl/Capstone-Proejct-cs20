{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { DATASETFILES } from '../database/datasetFiles';\nimport { MODELFILES } from '../database/modelFiles';\nimport { backendUrl } from '../server/backendUrl';\nimport http from \"../server/baseUrl\";\nimport baseUrl from '../server/baseUrl';\n/**\n * User\n */\n\nexport const login = data => dispatch => {\n  return http.post('/login', JSON.stringify(data), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    if (res.data) {\n      dispatch(updateUser(res.data)); // success\n    }\n  }).catch(err => console.log(err));\n};\nexport const signUp = data => dispatch => {\n  return http.post('/sign-up', JSON.stringify(data), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).catch(err => console.log(err));\n};\nexport const updateUser = userInfo => ({\n  type: ActionTypes.LOGIN,\n  payload: userInfo\n});\n/**\n * Dataset\n */\n// fetch datasets from the backend server\n\nexport const fetchDatasetFiles = () => dispatch => {\n  // return dispatch(addDatasetFiles(DATASETFILES))\n  dispatch(datasetFilesLoading(true));\n  return fetch(backendUrl + 'datasetFiles') // backend address: Localhost: 5000/datasetFiles\n  .then(response => response.json()) // when the promise resolved, we convert the incoming response into JSON by calling response.json\n  .then(datasetFiles => dispatch(addDatasetFiles(datasetFiles))) // when the datasetFiles is obtained, we dispatch it into addDatasetFiles()\n  .then(data => console.log(data));\n};\nexport const datasetFilesLoading = () => ({\n  type: ActionTypes.DATASETFILES_LOADING\n});\nexport const datasetFilesFailed = errmess => ({\n  type: ActionTypes.DATASETFILES_FAILED,\n  payload: errmess\n});\nexport const addDatasetFiles = datasetFiles => ({\n  type: ActionTypes.ADD_DATASETFILES,\n  payload: datasetFiles\n});\nexport const addDataset = dataset => ({\n  type: ActionTypes.UPLOAD_DATASET,\n  payload: dataset\n}); // uploading a new dataset file\n\nexport const uploadDataset = (dataset, onUploadProgress) => dispatch => {\n  // post the uploaded dataset to the backend server\n  return http.post('/upload', dataset, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    },\n    onUploadProgress\n  }).then(res => {\n    console.log(\"this is response\");\n    console.log(res);\n  }).then(res => {\n    dispatch(fetchUploadedDataset());\n  });\n}; // get the uploded dataset info when the uploading is done in the backend\n\nexport const fetchUploadedDataset = () => dispatch => {\n  return fetch(backendUrl + 'newDataset').then(response => response.json()).then(dataset => dispatch(addDataset(dataset))).then(data => {\n    console.log(\"this is data\");\n    console.log(data);\n  });\n};\nexport const removeOneDataset = datasetName => ({\n  type: ActionTypes.REMOVE_DATASET,\n  payload: datasetName\n}); // pass the filename to the backend server and tell it to delete corresponding dataset\n\nexport const deleteOneDataset = datasetName => dispatch => {\n  return http.post('/delete-dataset', JSON.stringify(datasetName), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for delete dataset\");\n    console.log(res);\n    dispatch(removeOneDataset(res.data));\n  }).catch(err => console.log(err));\n};\n/**\n * Models\n */\n// fetch models from the backend server\n\nexport const fetchModelFiles = () => dispatch => {\n  // test\n  // return dispatch(addModelFiles(MODELFILES))\n  dispatch(modelFilesLoading(true));\n  return fetch(backendUrl + 'modelFiles') // backend address: Localhost: 5000/modelFiles\n  .then(response => response.json()) // when the promise resolved, we convert the incoming response into JSON by calling response.json\n  .then(modelFiles => dispatch(addModelFiles(modelFiles))) // when the modelFiles is obtained, we dispatch it into addModelFiles()\n  .then(data => console.log(data));\n};\nexport const modelFilesLoading = () => ({\n  type: ActionTypes.MODELFILES_LOADING\n});\nexport const modelFilesFailed = errmess => ({\n  type: ActionTypes.MODELFILES_FAILED,\n  payload: errmess\n});\nexport const addModelFiles = modelFiles => ({\n  type: ActionTypes.ADD_MODELFILES,\n  payload: modelFiles\n});\nexport const addModel = model => ({\n  type: ActionTypes.UPLOAD_MODEL,\n  payload: model\n}); // uploading a new model file\n\nexport const uploadModel = (model, onUploadProgress) => dispatch => {\n  // post the uploaded model to the backend server\n  return http.post('/upload', model, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    },\n    onUploadProgress\n  }).then(res => {\n    console.log(\"this is response\");\n    console.log(res);\n  }).then(res => {\n    dispatch(fetchUploadedModel());\n  });\n}; // get the uploded model info when the uploading is done in the backend\n\nexport const fetchUploadedModel = () => dispatch => {\n  return fetch(backendUrl + 'newModel').then(response => response.json()).then(model => dispatch(addModel(model))).then(data => {\n    console.log(\"this is data\");\n    console.log(data);\n  });\n};\nexport const removeOneModel = modelName => ({\n  type: ActionTypes.REMOVE_MODEL,\n  payload: modelName\n});\nexport const editOneModelDescription = (modelName, description) => ({\n  type: ActionTypes.EDIT_MODEL_DESCRIPTION,\n  payload: {\n    modelName,\n    description\n  }\n}); // pass the filename to the backend server and tell it to delete corresponding model\n\nexport const deleteOneModel = modelName => dispatch => {\n  return http.post('/delete-model', JSON.stringify(modelName), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for delete model\");\n    console.log(res);\n    dispatch(removeOneModel(res.data));\n  }).catch(err => console.log(err));\n};\nexport const editModelDescription = (modelName, description) => dispatch => {\n  return http.post('/edit-model-desc', JSON.stringify({\n    modelName,\n    description\n  }), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for delete model\");\n    console.log(res);\n    dispatch(editOneModelDescription(modelName, description));\n  }).catch(err => console.log(err));\n};\n/**\n * Metadata\n */\n// submit metadata of a dataset\n\nexport const submitMetadata = metadata => dispatch => {\n  return http.post('/submit-metadata', JSON.stringify(metadata), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for metadata\");\n    console.log(res);\n  }).catch(err => console.log(err));\n};\nexport const addMetadata = metadata => ({\n  type: ActionTypes.ADD_METADATA,\n  payload: metadata\n});\nexport const metadataFailed = errmess => ({\n  type: ActionTypes.METADATA_FAILED,\n  payload: errmess\n});\nexport const metadataLoading = () => ({\n  type: ActionTypes.METADATA_LOADING\n});\n/**\n * Detailed data\n */\n\nexport const sendNameForDetailedData = datasetName => dispatch => {\n  console.log(\"start detailed loading\");\n  return http.post('/detailedData-name', JSON.stringify(datasetName), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for detailed data\");\n    console.log(res.data);\n    dispatch(addDetailedData(res.data[0]));\n    dispatch(addMetadata(res.data[1]));\n  }).catch(err => console.log(err));\n};\nexport const addDetailedData = detaileddata => ({\n  type: ActionTypes.ADD_DETAILEDDATA,\n  payload: detaileddata\n});\nexport const detailedDataFailed = errmess => ({\n  type: ActionTypes.DETAILEDDATA_FAILED,\n  payload: errmess\n});\nexport const detailedDataLoading = () => ({\n  type: ActionTypes.DETAILEDDATA_LOADING\n});","map":{"version":3,"sources":["D:/Pythoncodes/New2/som/src/redux/ActionCreators.js"],"names":["ActionTypes","DATASETFILES","MODELFILES","backendUrl","http","baseUrl","login","data","dispatch","post","JSON","stringify","headers","then","res","updateUser","catch","err","console","log","signUp","userInfo","type","LOGIN","payload","fetchDatasetFiles","datasetFilesLoading","fetch","response","json","datasetFiles","addDatasetFiles","DATASETFILES_LOADING","datasetFilesFailed","errmess","DATASETFILES_FAILED","ADD_DATASETFILES","addDataset","dataset","UPLOAD_DATASET","uploadDataset","onUploadProgress","fetchUploadedDataset","removeOneDataset","datasetName","REMOVE_DATASET","deleteOneDataset","fetchModelFiles","modelFilesLoading","modelFiles","addModelFiles","MODELFILES_LOADING","modelFilesFailed","MODELFILES_FAILED","ADD_MODELFILES","addModel","model","UPLOAD_MODEL","uploadModel","fetchUploadedModel","removeOneModel","modelName","REMOVE_MODEL","editOneModelDescription","description","EDIT_MODEL_DESCRIPTION","deleteOneModel","editModelDescription","submitMetadata","metadata","addMetadata","ADD_METADATA","metadataFailed","METADATA_FAILED","metadataLoading","METADATA_LOADING","sendNameForDetailedData","addDetailedData","detaileddata","ADD_DETAILEDDATA","detailedDataFailed","DETAILEDDATA_FAILED","detailedDataLoading","DETAILEDDATA_LOADING"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport { DATASETFILES } from '../database/datasetFiles';\nimport { MODELFILES } from '../database/modelFiles';\nimport { backendUrl } from '../server/backendUrl';\nimport http from \"../server/baseUrl\";\nimport baseUrl from '../server/baseUrl';\n/**\n * User\n */\nexport const login = (data) => (dispatch) => {\n  return http.post('/login', JSON.stringify(data), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n    }})\n    .then(res => {\n      if(res.data){\n        dispatch(updateUser(res.data));// success\n      }\n    })\n    .catch((err) => console.log(err));\n\n}\nexport const signUp = (data) => (dispatch) => {\n\n  return http.post('/sign-up', JSON.stringify(data), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n    }})\n    .catch((err) => console.log(err));\n}\nexport const updateUser = (userInfo) => ({\n  type: ActionTypes.LOGIN,\n  payload: userInfo\n});\n\n/**\n * Dataset\n */\n// fetch datasets from the backend server\nexport const fetchDatasetFiles = () => (dispatch) => {\n  // return dispatch(addDatasetFiles(DATASETFILES))\n    dispatch(datasetFilesLoading(true));\n\n    return fetch(backendUrl + 'datasetFiles') // backend address: Localhost: 5000/datasetFiles\n        .then(response => response.json()) // when the promise resolved, we convert the incoming response into JSON by calling response.json\n        .then(datasetFiles => dispatch(addDatasetFiles(datasetFiles))) // when the datasetFiles is obtained, we dispatch it into addDatasetFiles()\n        .then(data => console.log(data));\n}\n\nexport const datasetFilesLoading = () => ({\n    type: ActionTypes.DATASETFILES_LOADING\n});\n\nexport const datasetFilesFailed = (errmess) => ({\n    type: ActionTypes.DATASETFILES_FAILED,\n    payload: errmess\n});\n\nexport const addDatasetFiles = (datasetFiles) => ({\n    type: ActionTypes.ADD_DATASETFILES,\n    payload: datasetFiles\n});\n\nexport const addDataset = (dataset) => ({\n    type: ActionTypes.UPLOAD_DATASET,\n    payload: dataset\n});\n\n// uploading a new dataset file\nexport const uploadDataset = (dataset, onUploadProgress) => (dispatch) => {\n    // post the uploaded dataset to the backend server\n    return http.post('/upload', dataset, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n        onUploadProgress,\n      })\n        .then(res => {\n            console.log(\"this is response\");\n            console.log(res);\n        })\n        .then(res => {\n            dispatch(fetchUploadedDataset());\n        })\n};\n\n// get the uploded dataset info when the uploading is done in the backend\nexport const fetchUploadedDataset = () => (dispatch) => {\n    return fetch(backendUrl + 'newDataset')\n        .then(response => response.json())\n        .then(dataset => dispatch(addDataset(dataset)))\n        .then(data => {\n            console.log(\"this is data\");\n            console.log(data);\n        });\n};\n\nexport const removeOneDataset = (datasetName) => ({\n    type: ActionTypes.REMOVE_DATASET,\n    payload: datasetName\n});\n\n// pass the filename to the backend server and tell it to delete corresponding dataset\nexport const deleteOneDataset = (datasetName) => (dispatch) => {\n    return http.post('/delete-dataset', JSON.stringify(datasetName), {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        }})\n        .then(res => {\n            console.log(\"this is response for delete dataset\");\n            console.log(res);\n            dispatch(removeOneDataset(res.data));\n        })\n        .catch((err) => console.log(err));\n};\n\n\n/**\n * Models\n */\n// fetch models from the backend server\nexport const fetchModelFiles = () => (dispatch) => {\n  // test\n  // return dispatch(addModelFiles(MODELFILES))\n\n  dispatch(modelFilesLoading(true));\n\n  return fetch(backendUrl + 'modelFiles') // backend address: Localhost: 5000/modelFiles\n    .then(response => response.json()) // when the promise resolved, we convert the incoming response into JSON by calling response.json\n    .then(modelFiles => dispatch(addModelFiles(modelFiles))) // when the modelFiles is obtained, we dispatch it into addModelFiles()\n    .then(data => console.log(data));\n}\n\nexport const modelFilesLoading = () => ({\n  type: ActionTypes.MODELFILES_LOADING\n});\n\nexport const modelFilesFailed = (errmess) => ({\n  type: ActionTypes.MODELFILES_FAILED,\n  payload: errmess\n});\n\nexport const addModelFiles = (modelFiles) => ({\n  type: ActionTypes.ADD_MODELFILES,\n  payload: modelFiles\n});\n\nexport const addModel = (model) => ({\n  type: ActionTypes.UPLOAD_MODEL,\n  payload: model\n});\n\n// uploading a new model file\nexport const uploadModel = (model, onUploadProgress) => (dispatch) => {\n  // post the uploaded model to the backend server\n  return http.post('/upload', model, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n    },\n    onUploadProgress,\n  })\n    .then(res => {\n      console.log(\"this is response\");\n      console.log(res);\n    })\n    .then(res => {\n      dispatch(fetchUploadedModel());\n    })\n};\n\n// get the uploded model info when the uploading is done in the backend\nexport const fetchUploadedModel = () => (dispatch) => {\n  return fetch(backendUrl + 'newModel')\n    .then(response => response.json())\n    .then(model => dispatch(addModel(model)))\n    .then(data => {\n      console.log(\"this is data\");\n      console.log(data);\n    });\n};\n\nexport const removeOneModel = (modelName) => ({\n  type: ActionTypes.REMOVE_MODEL,\n  payload: modelName\n});\n\nexport const editOneModelDescription = (modelName,description) => ({\n  type: ActionTypes.EDIT_MODEL_DESCRIPTION,\n  payload: {modelName,description}\n});\n\n// pass the filename to the backend server and tell it to delete corresponding model\nexport const deleteOneModel = (modelName) => (dispatch) => {\n  return http.post('/delete-model', JSON.stringify(modelName), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n    }})\n    .then(res => {\n      console.log(\"this is response for delete model\");\n      console.log(res);\n      dispatch(removeOneModel(res.data));\n    })\n    .catch((err) => console.log(err));\n};\nexport const editModelDescription = (modelName,description) => (dispatch) => {\n  return http.post('/edit-model-desc', JSON.stringify({modelName, description}), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n    }})\n    .then(res => {\n      console.log(\"this is response for delete model\");\n      console.log(res);\n      dispatch(editOneModelDescription(modelName,description));\n    })\n    .catch((err) => console.log(err));\n};\n/**\n * Metadata\n */\n// submit metadata of a dataset\nexport const submitMetadata = (metadata) => (dispatch) => {\n    return http.post('/submit-metadata', JSON.stringify(metadata), {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        }})\n        .then(res => {\n            console.log(\"this is response for metadata\");\n            console.log(res);\n        })\n        .catch((err) => console.log(err));\n};\n\nexport const addMetadata = (metadata) => ({\n    type: ActionTypes.ADD_METADATA,\n    payload: metadata\n});\n\nexport const metadataFailed = (errmess) => ({\n    type: ActionTypes.METADATA_FAILED,\n    payload: errmess\n});\n\nexport const metadataLoading = () => ({\n    type: ActionTypes.METADATA_LOADING\n});\n\n/**\n * Detailed data\n */\nexport const sendNameForDetailedData = (datasetName) => (dispatch) => {\n    console.log(\"start detailed loading\")\n\n    return http.post('/detailedData-name', JSON.stringify(datasetName), {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        }})\n        .then(res => {\n            console.log(\"this is response for detailed data\");\n            console.log(res.data);\n            dispatch(addDetailedData(res.data[0]));\n            dispatch(addMetadata(res.data[1]));\n        })\n        .catch((err) => console.log(err));\n}\n\n\n\nexport const addDetailedData = (detaileddata) => ({\n    type: ActionTypes.ADD_DETAILEDDATA,\n    payload: detaileddata\n});\n\nexport const detailedDataFailed = (errmess) => ({\n    type: ActionTypes.DETAILEDDATA_FAILED,\n    payload: errmess\n});\n\nexport const detailedDataLoading = () => ({\n    type: ActionTypes.DETAILEDDATA_LOADING\n});\n\n\n"]},"metadata":{},"sourceType":"module"}