{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nexport const DatasetFiles = (state = {\n  isLoading: true,\n  errMess: null,\n  datasetFiles: []\n}, action) => {\n  switch (action.type) {\n    case ActionTypes.ADD_DATASETFILES:\n      console.log(\"I wanna check dataset file\");\n      return { ...state,\n        isLoading: false,\n        errMess: null,\n        datasetFiles: action.payload\n      };\n\n    case ActionTypes.DATASETFILES_LOADING:\n      return { ...state,\n        isLoading: true,\n        errMess: null,\n        datasetFiles: []\n      };\n\n    case ActionTypes.DATASETFILES_FAILED:\n      return { ...state,\n        isLoading: false,\n        errMess: action.payload\n      };\n    // when a user upload a dataset, we will first send the dataset to the server,\n    // if the dataset is successfully added on the server site, and the server sends back a success of the posting of the dataset\n    // only then we will add it to the redux store.\n\n    case ActionTypes.UPLOAD_DATASET:\n      var dataset = action.payload; // get the uploaded dataset\n\n      return { ...state,\n        datasetFiles: state.datasetFiles.concat(dataset)\n      };\n\n    case ActionTypes.REMOVE_DATASET:\n      console.log(\"start delete\");\n      var datasetName = action.payload; // to get the filename of the selected dataset\n\n      let deletedIndex = 0; // to find the corresponding index based on filename\n\n      console.log(\"get dataset is \" + datasetName);\n\n      for (let [index, eachDataset] of Object.entries(state.datasetFiles)) {\n        if (eachDataset.FileName === datasetName) {\n          deletedIndex = parseInt(index, 10);\n        }\n      }\n\n      console.log(\"deletedIndex is \" + deletedIndex);\n      const newDataset = [...state.datasetFiles.slice(0, deletedIndex), ...state.datasetFiles.slice(deletedIndex + 1, state.datasetFiles.length)];\n      return { ...state,\n        datasetFiles: newDataset\n      };\n\n    default:\n      return state;\n  }\n};\n_c = DatasetFiles;\n\nvar _c;\n\n$RefreshReg$(_c, \"DatasetFiles\");","map":{"version":3,"sources":["D:/Pythoncodes/T/som/src/redux/datasetFiles.js"],"names":["ActionTypes","DatasetFiles","state","isLoading","errMess","datasetFiles","action","type","ADD_DATASETFILES","console","log","payload","DATASETFILES_LOADING","DATASETFILES_FAILED","UPLOAD_DATASET","dataset","concat","REMOVE_DATASET","datasetName","deletedIndex","index","eachDataset","Object","entries","FileName","parseInt","newDataset","slice","length"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAG;AACjCC,EAAAA,SAAS,EAAE,IADsB;AAEjCC,EAAAA,OAAO,EAAE,IAFwB;AAGjCC,EAAAA,YAAY,EAAE;AAHmB,CAAT,EAIzBC,MAJyB,KAId;AACV,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,WAAW,CAACQ,gBAAjB;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,aAAO,EAAE,GAAGR,KAAL;AAAYC,QAAAA,SAAS,EAAE,KAAvB;AAA8BC,QAAAA,OAAO,EAAE,IAAvC;AAA6CC,QAAAA,YAAY,EAAEC,MAAM,CAACK;AAAlE,OAAP;;AAEJ,SAAKX,WAAW,CAACY,oBAAjB;AACI,aAAO,EAAE,GAAGV,KAAL;AAAYC,QAAAA,SAAS,EAAE,IAAvB;AAA6BC,QAAAA,OAAO,EAAE,IAAtC;AAA4CC,QAAAA,YAAY,EAAE;AAA1D,OAAP;;AAEJ,SAAKL,WAAW,CAACa,mBAAjB;AACI,aAAO,EAAE,GAAGX,KAAL;AAAYC,QAAAA,SAAS,EAAE,KAAvB;AAA8BC,QAAAA,OAAO,EAAEE,MAAM,CAACK;AAA9C,OAAP;AAEJ;AACA;AACA;;AACA,SAAKX,WAAW,CAACc,cAAjB;AACI,UAAIC,OAAO,GAAGT,MAAM,CAACK,OAArB,CADJ,CACkC;;AAC9B,aAAO,EAAE,GAAGT,KAAL;AAAYG,QAAAA,YAAY,EAAEH,KAAK,CAACG,YAAN,CAAmBW,MAAnB,CAA0BD,OAA1B;AAA1B,OAAP;;AAEJ,SAAKf,WAAW,CAACiB,cAAjB;AACIR,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,UAAIQ,WAAW,GAAGZ,MAAM,CAACK,OAAzB,CAFJ,CAEsC;;AAClC,UAAIQ,YAAY,GAAG,CAAnB,CAHJ,CAG0B;;AACtBV,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBQ,WAAhC;;AACA,WAAK,IAAI,CAACE,KAAD,EAAQC,WAAR,CAAT,IAAiCC,MAAM,CAACC,OAAP,CAAerB,KAAK,CAACG,YAArB,CAAjC,EAAqE;AACjE,YAAIgB,WAAW,CAACG,QAAZ,KAAyBN,WAA7B,EAA0C;AACtCC,UAAAA,YAAY,GAAGM,QAAQ,CAACL,KAAD,EAAQ,EAAR,CAAvB;AACH;AACJ;;AAEDX,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBS,YAAjC;AAEA,YAAMO,UAAU,GAAG,CACf,GAAGxB,KAAK,CAACG,YAAN,CAAmBsB,KAAnB,CAAyB,CAAzB,EAA4BR,YAA5B,CADY,EAEf,GAAGjB,KAAK,CAACG,YAAN,CAAmBsB,KAAnB,CAAyBR,YAAY,GAAG,CAAxC,EAA2CjB,KAAK,CAACG,YAAN,CAAmBuB,MAA9D,CAFY,CAAnB;AAIA,aAAO,EAAE,GAAG1B,KAAL;AAAYG,QAAAA,YAAY,EAAEqB;AAA1B,OAAP;;AAGJ;AACI,aAAOxB,KAAP;AAvCR;AAyCH,CA9CM;KAAMD,Y","sourcesContent":["import * as ActionTypes from './ActionTypes';\n\nexport const DatasetFiles = (state = {\n    isLoading: true,\n    errMess: null,\n    datasetFiles: []\n}, action) => {\n    switch (action.type) {\n        case ActionTypes.ADD_DATASETFILES:\n            console.log(\"I wanna check dataset file\");\n            return { ...state, isLoading: false, errMess: null, datasetFiles: action.payload };\n\n        case ActionTypes.DATASETFILES_LOADING:\n            return { ...state, isLoading: true, errMess: null, datasetFiles: [] }\n\n        case ActionTypes.DATASETFILES_FAILED:\n            return { ...state, isLoading: false, errMess: action.payload };\n\n        // when a user upload a dataset, we will first send the dataset to the server,\n        // if the dataset is successfully added on the server site, and the server sends back a success of the posting of the dataset\n        // only then we will add it to the redux store.\n        case ActionTypes.UPLOAD_DATASET:\n            var dataset = action.payload; // get the uploaded dataset\n            return { ...state, datasetFiles: state.datasetFiles.concat(dataset) };\n\n        case ActionTypes.REMOVE_DATASET:\n            console.log(\"start delete\");\n            var datasetName = action.payload; // to get the filename of the selected dataset\n            let deletedIndex = 0; // to find the corresponding index based on filename\n            console.log(\"get dataset is \" + datasetName);\n            for (let [index, eachDataset] of Object.entries(state.datasetFiles)) {\n                if (eachDataset.FileName === datasetName) {\n                    deletedIndex = parseInt(index, 10);\n                }\n            }\n\n            console.log(\"deletedIndex is \" + deletedIndex);\n\n            const newDataset = [\n                ...state.datasetFiles.slice(0, deletedIndex),\n                ...state.datasetFiles.slice(deletedIndex + 1, state.datasetFiles.length)];\n\n            return { ...state, datasetFiles: newDataset };\n\n\n        default:\n            return state;\n    }\n};"]},"metadata":{},"sourceType":"module"}